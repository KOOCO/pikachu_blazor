@using Microsoft.AspNetCore.Components;
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.AspNetCore.Components.Messages
@using Blazorise
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@if(MessageType==UiMessageType.Confirmation)
{
    <Modal @ref="@ModalRef" Closing="@OnModalClosing">
        <ModalContent Centered="@CenterMessage" Class="rounded border-0 overflow-hidden shadow-lg" Size="ModalSize.Large">

            @if (IsConfirmation)
            {
                <!-- Red warning header -->
                <ModalHeader Class="bg-danger d-flex justify-content-center">
                    <Icon Name="IconName.ExclamationTriangle" style="font-size:50px;color:white;" />
                </ModalHeader>
            }
            else if (!Title.IsNullOrEmpty())
            {
                <!-- Generic title for non-confirmation messages -->
                <ModalHeader>
                    <ModalTitle>@Title</ModalTitle>
                </ModalHeader>
            }

            <ModalBody Class="text-center px-4 pt-3">
                <Paragraph TextAlignment="TextAlignment.Center" Margin="Margin.Is0.FromBottom" Style="white-space: break-spaces; font-size: 1.1rem; font-weight: 500;">
                    @if (!IsMessageHtmlMarkup)
                    {
                        @Message
                    }
                    else
                    {
                        @((MarkupString)Message)
                    }
                </Paragraph>
            </ModalBody>

            <ModalFooter>
                @if (IsConfirmation)
                {
                    <Button Color="Color.Secondary" Outline Class="px-4 mx-2" Clicked="@OnCancelClicked">
                        @if (Options?.CancelButtonIcon != null)
                        {
                            <Icon Name="@Options.CancelButtonIcon"  />
                        }
                        @CancelButtonText
                    </Button>
                    <Button Color="Color.Danger" Clicked="@OnConfirmClicked">
                        @if (Options?.ConfirmButtonIcon != null)
                        {
                            <Icon Name="@Options.ConfirmButtonIcon"  />
                        }
                        @ConfirmButtonText
                    </Button>
                }
                else
                {
                    <Button Color="Color.Primary" Class="px-4 mx-2" Clicked="@OnOkClicked">
                        @if (Options?.OkButtonIcon != null)
                        {
                            <Icon Name="@Options.OkButtonIcon" Margin="Margin.Is2.FromEnd" />
                        }
                        @OkButtonText
                    </Button>
                }
            </ModalFooter>

        </ModalContent>
    </Modal>
}
@if (MessageType != UiMessageType.Confirmation)
{ 
    ﻿<Modal @ref="@ModalRef" Closing="@OnModalClosing">
    <ModalContent Centered="@CenterMessage" >
        @if (!Title.IsNullOrEmpty())
        {
            <ModalHeader>
                <ModalTitle>
                    @Title
                </ModalTitle>
            </ModalHeader>
        }
        <ModalBody>
            @if ( ShowMessageIcon )
            {
                <DisplayHeading Size="DisplayHeadingSize.Is2" TextAlignment="TextAlignment.Center">
                    <Icon Name="@MessageIcon" Style="@MessageIconStyle" />                    
                </DisplayHeading>
            }
            <Paragraph TextAlignment="TextAlignment.Center" Margin="Margin.Is0.FromBottom" Style="white-space: break-spaces;">
                @if (!IsMessageHtmlMarkup)
                {
                    @Message
                }
                else
                {
                    @((MarkupString)Message)
                }
            </Paragraph>
        </ModalBody>
        <ModalFooter class="d-flex justify-content-center">
                @if ( IsConfirmation )
                {
                    <Button Color="Color.Primary" Outline Padding="Padding.Is3.OnX" Margin="Margin.Is1.OnX" Clicked="@OnCancelClicked">
                        @if ( Options?.CancelButtonIcon != null )
                        {
                            <Icon Name="@Options.CancelButtonIcon" Margin="Margin.Is2.FromEnd" />
                        }
                        @CancelButtonText
                    </Button>
                    <Button Color="Color.Primary" Padding="Padding.Is3.OnX" Margin="Margin.Is1.OnX" Clicked="@OnConfirmClicked">
                        @if ( Options?.ConfirmButtonIcon != null )
                        {
                            <Icon Name="@Options.ConfirmButtonIcon" Margin="Margin.Is2.FromEnd" />
                        }
                        @ConfirmButtonText
                    </Button>
                }
                else
                {
                    <Button Color="Color.Primary" Padding="Padding.Is3.OnX" Margin="Margin.Is1.OnX" Clicked="@OnOkClicked">
                        @if ( Options?.OkButtonIcon != null )
                        {
                            <Icon Name="@Options.OkButtonIcon" Margin="Margin.Is2.FromEnd" />
                        }
                        @OkButtonText
                    </Button>
                }
        </ModalFooter>
    </ModalContent>
</Modal>
}
