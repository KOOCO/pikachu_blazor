@page "/Orders/ReturnAndExchangeOrder"

@using Blazorise;
@using Blazorise.LoadingIndicator;
@using Kooco.Pikachu.EnumValues;
@using Kooco.Pikachu.Localization;
@using Kooco.Pikachu.OrderItems;
@using Kooco.Pikachu.Orders;
@using Kooco.Pikachu.Orders.Interfaces
@using Microsoft.Extensions.Localization;
@using Volo.Abp.AspNetCore.Components.Messages;

@inherits PikachuComponentBase;

@inject IStringLocalizer<PikachuResource> L;
@inject NavigationManager NavigationManager;
@inject IUiMessageService _uiMessageService;
@inject IOrderAppService _orderAppService;
@attribute [Authorize]

     @if(loading)
    {
        <div class="row">
            <div class="col-3">
                <SkeletonItem ColumnSize="ColumnSize.Is3" Class="mb-2" />
            </div>
            <div class="col-9 text-lg-end">
                
                        <SkeletonItem ColumnSize="ColumnSize.Is2" Class="mb-2" />
                        <SkeletonItem ColumnSize="ColumnSize.Is1" Class="mb-2" />
                  
            </div>
        </div>
        <Card>
            <CardBody>
                <Skeleton Animation="SkeletonAnimation.Pulse">
                    <!-- For example, 5 horizontal bars to represent the table rows -->
                    <SkeletonTable Rows="10" Columns="9" />
                </Skeleton>
            </CardBody>
        </Card>
    }
    <div style="@($"display: {(loading ? "none" : "block")};" )">
    <div class="row">
        <div class="col-3">
            <h3>@L["Return&Exchange"]</h3>
        </div>
        <div class="col-9 text-lg-end">
            <div class="d-inline-block me-1">
                <div class="input-group">
                    <InputText class="form-control form-control-sm search-bar" @bind-Value="@Filter" placeholder="@L["Search"]"></InputText>
                    <Button Type="ButtonType.Button" Class="btn btn-sm btn-primary" Clicked="OnSearch">
                        <i class="fa fa-search"></i>
                    </Button>
                </div>
            </div>
        </div>
    </div>
    <Card>
        <CardBody>
            <DataGrid TItem="OrderDto"
                      Data="@Orders"
                      @bind-SelectedRow="@SelectedOrder"
                      ReadData="OnDataGridReadAsync"
                      TotalItems="TotalCount"
                      Responsive
                      ShowPager="true"
                      PageSize="PageSize"
                      SortChanged="OnSortChange"
                      Hoverable>
                <DataGridColumns>
                    <DataGridCommandColumn />
                    <DataGridColumn Caption="@L["Select"]" Width="30px">
                        <DisplayTemplate>
                            <InputCheckbox class="form-check-input" @bind-Value="@context.IsSelected"></InputCheckbox>
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(OrderDto.OrderNo)" Caption="@L["OrderNo"]">
                        <DisplayTemplate>
                            <Button Class="btn-link hyperlink" Clicked="() => NavigateToOrderDetails(context)">@context.OrderNo</Button>
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(OrderDto.CreationTime)" Caption="@L["OrderDate"]" />
                    <DataGridColumn Field="@nameof(OrderDto.CustomerName)" Caption="@L["CustomerName"]" />
                    <DataGridColumn Field="@nameof(OrderDto.ReturnStatus)" Caption="@L["ReturnStatus"]">
                        <DisplayTemplate>
                            @if (context.ReturnStatus == OrderReturnStatus.Pending && CanProcessRefund)
                            {
                                <Select TValue="OrderReturnStatus" Class="form-select form-select-sm"
                                        SelectedValue="@context.ReturnStatus"
                                        SelectedValueChanged="@(e => ReturnStatusChanged(e, context))">

                                    @foreach (var enumValue in Enum.GetValues(typeof(OrderReturnStatus)))
                                    {
                                        @if (enumValue.ToString() == "Approve" || enumValue.ToString() == "Pending" || enumValue.ToString() == "Reject")
                                        {
                                            @if (enumValue.ToString() == "Succeeded")
                                            {
                                                var str = enumValue.ToString() + " in return";


                                                <SelectItem Value="@enumValue">@L[str]</SelectItem>

                                            }
                                            else
                                            {
                                                <SelectItem Value="@enumValue">@L[enumValue.ToString()]</SelectItem>
                                            }
                                        }
                                    }
                                </Select>
                            }

                            else if (context.ReturnStatus == OrderReturnStatus.Processing)
                            {
                                <Select TValue="OrderReturnStatus" Class="form-select form-select-sm"
                                        SelectedValue="@context.ReturnStatus"
                                        SelectedValueChanged="@(e => ReturnStatusChanged(e, context))">

                                    @foreach (var enumValue in Enum.GetValues(typeof(OrderReturnStatus)))
                                    {
                                        @if (enumValue.ToString() == "Processing" || enumValue.ToString() == "Succeeded")
                                        {
                                            @if (enumValue.ToString() == "Succeeded")
                                            {
                                                var str = enumValue.ToString() + " in return";


                                                <SelectItem Value="@enumValue">@L[str]</SelectItem>

                                            }
                                            else
                                            {
                                                <SelectItem Value="@enumValue">@L[enumValue.ToString()]</SelectItem>
                                            }

                                        }
                                    }
                                </Select>
                            }
                            else if (context.ReturnStatus == OrderReturnStatus.Succeeded)
                            {
                                <Select Disabled TValue="OrderReturnStatus" Class="form-select form-select-sm"
                                        SelectedValue="@context.ReturnStatus"
                                        SelectedValueChanged="@(e => ReturnStatusChanged(e, context))">

                                    @foreach (var enumValue in Enum.GetValues(typeof(OrderReturnStatus)))
                                    {
                                        @if (enumValue.ToString() == "Succeeded")
                                        {
                                            var str = enumValue.ToString() + " in return";


                                            <SelectItem Value="@enumValue">@L[str]</SelectItem>

                                        }
                                        else
                                        {
                                            <SelectItem Value="@enumValue">@L[enumValue.ToString()]</SelectItem>
                                        }

                                    }
                                </Select>
                            }
                            else if (context.ReturnStatus == OrderReturnStatus.Reject)
                            {
                                <Select Disabled TValue="OrderReturnStatus" Class="form-select form-select-sm"
                                        SelectedValue="@context.ReturnStatus"
                                        SelectedValueChanged="@(e => ReturnStatusChanged(e, context))">

                                    @foreach (var enumValue in Enum.GetValues(typeof(OrderReturnStatus)))
                                    {
                                        @if (enumValue.ToString() == "Succeeded")
                                        {
                                            var str = enumValue.ToString() + " in return";


                                            <SelectItem Value="@enumValue">@L[str]</SelectItem>

                                        }
                                        else
                                        {
                                            <SelectItem Value="@enumValue">@L[enumValue.ToString()]</SelectItem>
                                        }

                                    }
                                </Select>
                            }
                            else
                            {
                                <Select Disabled TValue="OrderReturnStatus" Class="form-select form-select-sm"
                                        SelectedValue="@context.ReturnStatus"
                                        SelectedValueChanged="@(e => ReturnStatusChanged(e, context))">

                                    @foreach (var enumValue in Enum.GetValues(typeof(OrderReturnStatus)))
                                    {
                                        @if (enumValue.ToString() == "Succeeded")
                                        {
                                            var str = enumValue.ToString() + " in return";


                                            <SelectItem Value="@enumValue">@L[str]</SelectItem>

                                        }
                                        else
                                        {
                                            <SelectItem Value="@enumValue">@L[enumValue.ToString()]</SelectItem>
                                        }

                                    }
                                </Select>

                            }

                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(OrderDto.OrderStatus)" Caption="@L["OrderStatus"]">
                        <DisplayTemplate>
                            @L[context.OrderStatus.ToString()]
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(OrderDto.ShippingStatus)" Caption="@L["ShippingStatus"]">
                        <DisplayTemplate>
                            @L[context.ShippingStatus.ToString()]
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(OrderDto.PaymentMethod)" Caption="@L["PaymentMethod"]">
                        <DisplayTemplate>
                            @L[context.PaymentMethod.ToString()]
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TextAlignment="TextAlignment.Center" Field="@nameof(OrderDto.TotalAmount)" Caption="@L["CheckoutAmount"]">
                        <DisplayTemplate>
                            $ @context.TotalAmount.ToString("N2")
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGridColumns>
                <FirstPageButtonTemplate>@L[PikachuResource.FirstPage]</FirstPageButtonTemplate>
                <PreviousPageButtonTemplate>@L[PikachuResource.PrevPage]</PreviousPageButtonTemplate>
                <NextPageButtonTemplate>@L[PikachuResource.NextPage]</NextPageButtonTemplate>
                <LastPageButtonTemplate>@L[PikachuResource.LastPage]</LastPageButtonTemplate>
            </DataGrid>
        </CardBody>
    </Card>
    </div>

@code {

}