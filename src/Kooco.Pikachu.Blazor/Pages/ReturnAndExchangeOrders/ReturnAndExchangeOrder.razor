@page "/Orders/ReturnAndExchangeOrder"
@using Kooco.Pikachu.EnumValues;
@using Kooco.Pikachu.Localization;
@using Kooco.Pikachu.OrderItems;
@using Kooco.Pikachu.Orders;
@using Microsoft.Extensions.Localization;
@using Blazorise;
@using Volo.Abp.AspNetCore.Components.Messages;
@using Blazorise.LoadingIndicator;
@inherits PikachuComponentBase;
@inject IStringLocalizer<PikachuResource> L;
@inject NavigationManager NavigationManager;
@inject IUiMessageService _uiMessageService;
@inject IOrderAppService _orderAppService;
<LoadingIndicator @ref="loading" FullScreen FadeIn>
<div class="row">
    <div class="col-3">
        <h3>@L["訂單管理-退換貨列表"]</h3>
    </div>
    <div class="col-9 text-lg-end">
        <div class="d-inline-block me-1">
            <div class="input-group">
                <InputText class="form-control form-control-sm search-bar" @bind-Value="@Filter" placeholder="@L["Search"]"></InputText>
                <Button Type="ButtonType.Button" Class="btn btn-sm btn-primary" Clicked="OnSearch">
                    <i class="fa fa-search"></i>
                </Button>
            </div>
        </div>
       
    
       

    </div>
</div>
   <Card>
        <CardBody>
            <DataGrid TItem="OrderDto"
                      Data="@Orders"
            @bind-SelectedRow="@SelectedOrder"
                      ReadData="OnDataGridReadAsync"
                      TotalItems="TotalCount"
                     
                      Responsive
                       ShowPager="true"
                       PageSize="PageSize"
                      
                       RowDoubleClicked="NavigateToOrderDetails"
                       SortChanged="OnSortChange">
                 <DataGridColumns>
                     <DataGridCommandColumn />
                     <DataGridColumn Caption="@L["Select"]" Width="30px">
                         <DisplayTemplate>
                             <InputCheckbox class="form-check-input" @bind-Value="@context.IsSelected"></InputCheckbox>
                         </DisplayTemplate>
                     </DataGridColumn>
                     <DataGridColumn Field="@nameof(OrderDto.OrderNo)" Caption="@L["OrderNo"]">
                         <DisplayTemplate>
                     
                            @L[context.OrderNo]
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(OrderDto.CreationTime)" Caption="@L["OrderDate"]" />
                    <DataGridColumn Field="@nameof(OrderDto.CustomerName)" Caption="@L["CustomerName"]" />
                    <DataGridColumn   Field="@nameof(OrderDto.ReturnStatus)" Caption="@L["ReturnStatus"]">
                             <DisplayTemplate>
                            @if (context.ReturnStatus == OrderReturnStatus.PendingReview && CanProcessRefund)
                            {
                                <Select TValue="OrderReturnStatus" Class="form-select form-select-sm"
                                SelectedValue="@context.ReturnStatus"
                                SelectedValueChanged="@(e => ReturnStatusChanged(e, context))">
                                    
                                    @foreach (var enumValue in Enum.GetValues(typeof(OrderReturnStatus)))
                                    {
                                        <SelectItem Value="@enumValue">@L[enumValue.ToString()]</SelectItem>
                                    }
                                </Select>
                            }
                            else
                            {

                                <Select  TValue="OrderReturnStatus" Class="form-select form-select-sm"
                                        SelectedValue="@context.ReturnStatus"
                                        SelectedValueChanged="@(e => ReturnStatusChanged(e, context))">
                                    <SelectItem></SelectItem>

                                    @foreach (var enumValue in Enum.GetValues(typeof(OrderReturnStatus)))
                                    {
                                        @if(enumValue.ToString()=="Processing"||enumValue.ToString()=="Succeeded")
                                        {
                                        <SelectItem Value="@enumValue">@L[enumValue.ToString()]</SelectItem>
                                        }
                                    }
                                </Select>


}
                        </DisplayTemplate>
                        </DataGridColumn>
                    <DataGridColumn Field="@nameof(OrderDto.OrderStatus)" Caption="@L["OrderStatus"]">
                        <DisplayTemplate>
                            @L[context.OrderStatus.ToString()]
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(OrderDto.ShippingStatus)" Caption="@L["ShippingStatus"]">
                        <DisplayTemplate>
                            @L[context.ShippingStatus.ToString()]
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(OrderDto.PaymentMethod)" Caption="@L["PaymentMethod"]">
                        <DisplayTemplate>
                            @L[context.PaymentMethod.ToString()]
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TextAlignment="TextAlignment.Center" Field="@nameof(OrderDto.TotalAmount)" Caption="@L["CheckoutAmount"]">
                        <DisplayTemplate>
                            $ @context.TotalAmount.ToString("N2")
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGridColumns>
              
            </DataGrid>
        </CardBody>
    </Card>
</LoadingIndicator>

@code {

}
