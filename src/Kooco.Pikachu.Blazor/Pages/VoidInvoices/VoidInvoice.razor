@page "/VoidInvoice"
@using Blazorise;
@using Blazorise.LoadingIndicator;
@using Kooco.Pikachu.EnumValues;
@using Kooco.Pikachu.Localization;
@using Kooco.Pikachu.OrderItems;
@using Kooco.Pikachu.Orders;
@using Kooco.Pikachu.Orders.Interfaces
@using Microsoft.Extensions.Localization;
@using Volo.Abp.AspNetCore.Components.Messages;

@inject IStringLocalizer<PikachuResource> L;
@inject NavigationManager NavigationManager;
@inject IUiMessageService _uiMessageService;
@inject IOrderAppService _orderAppService;
@inject IJSRuntime JSRuntime;
@attribute [Authorize]

<LoadingIndicator @ref="loading" FullScreen FadeIn>
    <div class="row">
        <div class="col-3">
            <h3>@L["作廢/折讓票據"]</h3>
        </div>
        <div class="col-9 text-lg-end">
            <div class="d-inline-block me-1">
                <div class="input-group">
                    <InputText class="form-control form-control-sm search-bar" @bind-Value="@Filter" placeholder="@L["Search"]"></InputText>
                    <Button Type="ButtonType.Button" Class="btn btn-sm btn-primary" Clicked="OnSearch">
                        <i class="fa fa-search"></i>
                    </Button>
                </div>
                
            </div>
      
            <Button Type="ButtonType.Button" Class="btn btn-sm btn-outline-dark" Clicked="DownloadExcel"><i class="fa fa-arrow-down"></i></Button>
           

        </div>
    </div>
    <Card>
        <CardBody>
            <DataGrid TItem="OrderDto"
                      Data="@Orders"
                      @bind-SelectedRow="@SelectedOrder"
                      ReadData="OnDataGridReadAsync"
                      TotalItems="TotalCount"
                      DetailRowTrigger="@((e) => e.Item.OrderItems?.Count > 0 && e.Item.Id == SelectedOrder?.Id)"
                      Responsive
                      ShowPager="true"
                      PageSize="PageSize"
                      RowClicked="ToggleRow"
                      RowDoubleClicked="NavigateToOrderDetails"
                      SortChanged="OnSortChange">
                <DataGridColumns>
                    <DataGridCommandColumn />
                    <DataGridColumn Field="@nameof(OrderDto.OrderNo)" Caption="@L["OrderNo"]">
                        <DisplayTemplate>
                            @{
                               var isExpanded = ExpandedRows.Contains(context.Id);
                               var chevronClass = isExpanded ? "fa fa-caret-up" : "fa fa-caret-down";
                            }
                            <i class="@chevronClass"></i>
                            @L[context.OrderNo]
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(OrderDto.InvoiceDate)" Caption="@L["IssueDate"]" />
                  @*   <DataGridColumn Field="@nameof(OrderDto.CustomerName)" Caption="@L["CustomerName"]" />
                    <DataGridColumn Field="@nameof(OrderDto.CustomerEmail)" Caption="@L["Email"]" /> *@
                    <DataGridColumn Field="@nameof(OrderDto.IssueStatus)" Caption="@L["InvoiceStatus"]">
                        <DisplayTemplate>
                            @if (context.IssueStatus.ToString() == "Succeeded")
                            {
                                var str = context.IssueStatus.ToString() + " void invoice";
                                @L[str]
                                ;

                            }
                            else
                            {
                                @L[context.IssueStatus.ToString()]
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                    
                    <DataGridColumn Field="@nameof(OrderDto.InvoiceNumber)" Caption="@L["InvoiceNumber"]">
                        <DisplayTemplate>
                            @context.InvoiceNumber
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TextAlignment="TextAlignment.Center" Field="@nameof(OrderDto.TotalAmount)" Caption="@L["CheckoutAmount"]">
                        <DisplayTemplate>
                            $ @context.TotalAmount.ToString("N2")
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(OrderDto.VoidDate)" Caption="@L["VoidDate"]" />
                    <DataGridColumn Field="@nameof(OrderDto.VoidUser)" Caption="@L["VoidUser"]"/>
                        
                    <DataGridColumn Field="@nameof(OrderDto.CreditNoteDate)" Caption="@L["CreditNoteDate"]" />
                    <DataGridColumn Field="@nameof(OrderDto.CreditNoteUser)" Caption="@L["CreditNoteUser"]"/>
                      
                    
                </DataGridColumns>
                <DetailRowTemplate>
                    @{
                        var orderItems = (context as OrderDto).OrderItems;
                        <div class="mx-2 px-3 py-2 border">
                            <table>
                                <tbody>
                                    <tr>
                                        <td>@L["VoidReason"]</td>
                                        <td>@context.VoidReason </td>
                                    </tr>
                                    <tr>
                                        <td>@L["CreditNoteReason"]</td>
                                        <td>@context.CreditNoteReason</td>
                                    </tr>
                                  
                                  
                                </tbody>
                            </table>
                        </div>
                    }
                </DetailRowTemplate>
                <FirstPageButtonTemplate>@L[PikachuResource.FirstPage]</FirstPageButtonTemplate>
                <PreviousPageButtonTemplate>@L[PikachuResource.PrevPage]</PreviousPageButtonTemplate>
                <NextPageButtonTemplate>@L[PikachuResource.NextPage]</NextPageButtonTemplate>
                <LastPageButtonTemplate>@L[PikachuResource.LastPage]</LastPageButtonTemplate>
                <TotalItemsTemplate>
                    @(string.Format(
                        L["Range"],
                        ((PageIndex - 1) * PageSize) + 1,
                        (PageIndex * PageSize > TotalCount ? TotalCount : PageIndex * PageSize),
                        TotalCount
                        ))
                </TotalItemsTemplate>
            </DataGrid>
        </CardBody>
    </Card>
      <Modal @ref="CreateCreditNoteReasonModal">
      
        <ModalContent IsCentered="true">
            <EditForm Model="@CreditReason" OnValidSubmit="ApplyCreditReasonAsync">
                <ModalHeader>
                    <ModalTitle>@L["CreditReason"]</ModalTitle>
                        <CloseButton Clicked="CloseVoidReasonModal"  />
                    </ModalHeader>
                    <ModalBody>

                        <DataAnnotationsValidator />
                    
                    <div class="row my-2">
                        <label class="form-label">@L["CreditReason"]</label>
                        <div class="col-12 mb-2">
                            <InputText class="form-control" @bind-Value="@CreditReason.Reason"></InputText>
                            <ValidationMessage For="@(() => CreditReason.Reason)" />
                        </div>
                    </div>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Danger"
                            Clicked="CloseVoidReasonModal">
                        @L["Cancel"]
                    </Button>
                    <Button Type="ButtonType.Submit" Class="btn btn-primary">
                        <i class="fa fa-check"></i>
                        @L["Save"]
                    </Button>
                </ModalFooter>
            </EditForm>
        </ModalContent>
    </Modal>
</LoadingIndicator>
@code {

}
<script>
    window.downloadFile = function (data) {
        debugger;
        var blob = new Blob([new Uint8Array(data.byteArray)], { type: data.contentType });
        var url = window.URL.createObjectURL(blob);
        var a = document.createElement('a');
        a.href = url;
        a.download = data.fileName;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
    }
</script>