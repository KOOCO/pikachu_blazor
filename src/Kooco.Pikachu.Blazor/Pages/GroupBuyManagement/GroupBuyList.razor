@page "/GroupBuyManagement/GroupBuyList"
@using Kooco.Pikachu.EnumValues;
@using Kooco.Pikachu.Tenants
@using Microsoft.Extensions.Configuration
@using Volo.Abp.MultiTenancy
@using Volo.Abp.Application.Dtos
@using Kooco.Pikachu.GroupBuys
@using Kooco.Pikachu.Localization
@using Microsoft.Extensions.Localization
@using Volo.Abp
@using System.Text.Json;
@using System.ComponentModel;
@using Blazorise.Components;
@using Blazorise.LoadingIndicator;
@using Kooco.Pikachu.Items.Dtos;
@inherits PikachuComponentBase
@inject IMyTenantAppService MyTenantAppService
@inject IStringLocalizer<PikachuResource> L
@inject NavigationManager NavigationManager
@inject IConfiguration _Configuration
@inject IJSRuntime _JSRuntime
@attribute [Authorize]

     @if(loading)
    {
     <div class="row">
        <div class="col-4">
             <SkeletonItem ColumnSize="ColumnSize.Is4" Class="mb-2" />
        </div>
        <div class="col-8 text-end">
           <SkeletonItem ColumnSize="ColumnSize.Is1" Class="mb-2" />
            <SkeletonItem ColumnSize="ColumnSize.Is1" Class="mb-2" />
             <SkeletonItem ColumnSize="ColumnSize.Is1" Class="mb-2" />
              <SkeletonItem ColumnSize="ColumnSize.Is1" Class="mb-2" />
        </div>
    </div> 
    <Card>
        <CardBody>
            <Row>
                <Column ColumnSize="ColumnSize.Is10">
                    <SkeletonItem ColumnSize="ColumnSize.Is10" Class="mb-2" />
                </Column>
                <Column ColumnSize="ColumnSize.Is2">
                     <SkeletonItem ColumnSize="ColumnSize.Is4" Class="mb-2" />
                </Column>
            </Row>
            
           

        </CardBody>

    </Card>
    <Card>
        <CardBody>
            <Skeleton Animation="SkeletonAnimation.Pulse">
        <!-- For example, 5 horizontal bars to represent the table rows -->
      <SkeletonTable Rows="10" Columns="7" />
    </Skeleton>
        </CardBody>
    </Card>
    }
    <div style="@($"display: {(loading ? "none" : "block")};" )">
    <div class="row">
        <div class="col-4">
            <h3>@L["GroupBuyList"]</h3>
        </div>
        <div class="col-8 text-end">
            <div class="custom-check-group me-1">
                <input type="checkbox" class="form-check-input" checked="@IsAllSelected" @onchange="HandleSelectAllChange" />
                <Label Class="form-label">@L["SelectAll"]</Label>
            </div>
            <Button Type="@ButtonType.Button" Class="btn btn-sm btn-primary" Clicked="CreateNewItem">
                <i class="fa fa-plus"></i>
                @L["NewGroupBuy"]
            </Button>
            <Button Color="Color.Secondary" Size="Size.Small" Clicked="CopyAsync" Disabled="@(GroupBuyListItem.Count(x => x.IsSelected) != 1)">
                @L["Copy"]
            </Button>
            <Button Type="@ButtonType.Button" Class="btn btn-sm btn-danger" Clicked="DeleteSelectedAsync">
                @L["Delete"]
            </Button>
        </div>
    </div>
    <Card>
        <CardBody>
            <Row>
                <Column ColumnSize="ColumnSize.Is10">
                    <Addons>
                        <Addon AddonType="AddonType.Body">
                            <TextEdit @bind-Text="@Filters.FilterText" Style="border-radius: 0.5rem 0 0 0.5rem;" />
                        </Addon>
                        <Addon AddonType="AddonType.End">
                            <Button Type="ButtonType.Button" Color="Color.Primary" Clicked="(e) => ApplyFilters()"
                                    Style="border-radius: 0 0.5rem 0.5rem 0;">
                                <Icon Name="IconName.Search"></Icon>
                            </Button>
                        </Addon>
                    </Addons>
                </Column>
                <Column ColumnSize="ColumnSize.Is2">
                    <Button Class="btn-outline-primary w-100" Clicked="(() => AdvanceFiltersVisible = !AdvanceFiltersVisible)">
                        @L["Filter"]
                        <i class="fas @(AdvanceFiltersVisible ? "fa-angles-up" : "fa-angles-down") ms-1"></i>
                    </Button>
                </Column>
            </Row>
            @{
                var columnSize = ColumnSize.Is2.OnQuadHD.Is3.OnFullHD.Is4.OnDesktop.Is6.OnTablet.Is12;
            }
            <Row VerticalGutter="10" Style="margin-top: 10px;">
                @if (AdvanceFiltersVisible)
                {
                    <Column ColumnSize="ColumnSize.Is12" Class="d-flex justify-content-end">
                        <Button Class="btn-sm btn-outline-primary me-1" Clicked="ResetFilters">
                            <Icon Class="fa-undo"></Icon>
                            @L["Reset"]
                        </Button>
                        <Button Class="btn-sm btn-primary" Clicked="ApplyFilters">
                            <Icon Class="fa-filter"></Icon>
                            @L["Filter"]
                        </Button>
                    </Column>
                    <Column ColumnSize="columnSize">
                        <Label>@L["StartTime"]</Label>
                        <DatePicker TValue="DateTime?" @bind-Date="Filters.StartTime" Size="Size.Small" />
                    </Column>
                    <Column ColumnSize="columnSize">
                        <Label>@L["EndTime"]</Label>
                        <DatePicker TValue="DateTime?" @bind-Date="Filters.EndTime" Size="Size.Small" />
                    </Column>
                    <Column ColumnSize="columnSize">
                        <Label>@L["Availability"]</Label>
                        <Select TValue="bool?" @bind-SelectedValue="Filters.IsGroupBuyAvaliable" Class="form-select form-select-sm">
                            <SelectItem TValue="bool?" Value="null"></SelectItem>
                            <SelectItem TValue="bool?" Value="true">@L["Active"]</SelectItem>
                            <SelectItem TValue="bool?" Value="false">@L["Inactive"]</SelectItem>
                        </Select>
                    </Column>
                    <Column ColumnSize="columnSize">
                        <Label> @L["ShippingMethod"]</Label><br />
                        <Label class="form-label">@L["HomeDeliveryType"]</Label><br />
                        @foreach (string item in Enum.GetNames(typeof(DeliveryMethod)))
                        {
                            if (item == Enum.GetName(DeliveryMethod.PostOffice) ||
                            item == Enum.GetName(DeliveryMethod.HomeDelivery) ||
                            item == Enum.GetName(DeliveryMethod.BlackCat1) ||
                            item == Enum.GetName(DeliveryMethod.BlackCatFreeze) ||
                            item == Enum.GetName(DeliveryMethod.BlackCatFrozen) ||
                            item == Enum.GetName(DeliveryMethod.TCatDeliveryNormal) ||
                            item == Enum.GetName(DeliveryMethod.TCatDeliveryFreeze) ||
                            item == Enum.GetName(DeliveryMethod.TCatDeliveryFrozen))
                            {
                                if (IsShippingMethodEnabled(item))
                                {
                                    <label for="@item" class="form-label ">
                                        <input type="checkbox"
                                               class="form-check-input me-1"
                                               id="@item"
                                               disabled="@((Filters.ExcludeShippingMethod != null) && (Filters.ExcludeShippingMethod.Contains("DeliveredByStore"))&&item!="DeliveredByStore")"
                                               checked="@((Filters.ExcludeShippingMethod != null) && (Filters.ExcludeShippingMethod.Contains(item)))"
                                               @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                        @L[item]
                                    </label>
                                }
                            }
                        }

                        <br />
                        <Label class="form-label">@L["ConvenienceStoreType"]</Label><br />


                        @foreach (string item in Enum.GetNames(typeof(DeliveryMethod)))
                        {
                            if (item == Enum.GetName(DeliveryMethod.FamilyMart1) ||
                            item == Enum.GetName(DeliveryMethod.FamilyMartC2C) ||
                            item == Enum.GetName(DeliveryMethod.SevenToElevenC2C) ||
                            item == Enum.GetName(DeliveryMethod.SevenToEleven1) ||
                            item == Enum.GetName(DeliveryMethod.SevenToElevenFrozen) ||
                            item == Enum.GetName(DeliveryMethod.TCatDeliverySevenElevenNormal) ||
                            item == Enum.GetName(DeliveryMethod.TCatDeliverySevenElevenFreeze) ||
                            item == Enum.GetName(DeliveryMethod.TCatDeliverySevenElevenFrozen))
                            {
                                if (IsShippingMethodEnabled(item))
                                {
                                    <label for="@item" class="form-label ">
                                        <input type="checkbox"
                                               class="form-check-input me-1"
                                               id="@item"
                                               disabled="@((Filters.ExcludeShippingMethod != null) && (Filters.ExcludeShippingMethod.Contains("DeliveredByStore"))&&item!="DeliveredByStore")"
                                               checked="@((Filters.ExcludeShippingMethod != null) && (Filters.ExcludeShippingMethod.Contains(item)))"
                                               @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                        @L[item]
                                    </label>
                                }
                            }
                        }

                        <br />
                        <Label class="form-label">@L["Self-PickupType"]</Label><br />
                        @foreach (string item in Enum.GetNames(typeof(DeliveryMethod)))
                        {
                            if (item == Enum.GetName(DeliveryMethod.SelfPickup))
                            {
                                <label for="@item" class="form-label ">
                                    <input type="checkbox"
                                           class="form-check-input me-1"
                                           id="@item"
                                           disabled="@((Filters.ExcludeShippingMethod != null) && (Filters.ExcludeShippingMethod.Contains("DeliveredByStore")) && item != "DeliveredByStore")"
                                           checked="@((Filters.ExcludeShippingMethod != null) && (Filters.ExcludeShippingMethod.Contains(item)))"
                                           @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                    @L[item]
                                </label>
                            }
                        }
                        <br />
                        <Label class="form-label">@L["DeliveredByStoreType"]</Label><br />
                        @foreach (string item in Enum.GetNames(typeof(DeliveryMethod)))
                        {
                            if (item == Enum.GetName(DeliveryMethod.DeliveredByStore))
                            {
                                <label for="@item" class="form-label ">
                                    <input type="checkbox"
                                           class="form-check-input me-1"
                                           id="@item"
                                           disabled="@((Filters.ExcludeShippingMethod != null) && (Filters.ExcludeShippingMethod.Contains("DeliveredByStore")) && item != "DeliveredByStore")"
                                           checked="@((Filters.ExcludeShippingMethod != null) && (Filters.ExcludeShippingMethod.Contains(item)))"
                                           @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                    @L[item]
                                </label>
                            }
                        }

                    </Column>
                    <Column ColumnSize="columnSize">
                        <Label> @L["PaymentMethod"] </Label>



                        <Check TValue="bool" @bind-Checked="@CreditCard">@L["CreditCard"]</Check>
                        <Check TValue="bool" @bind-Checked="@BankTransfer">@L["BankTransfer"]</Check>
                        <Check TValue="bool" @bind-Checked="@IsLinePay">@L["LinePay"]</Check>
                        <Check TValue="bool"
                               @bind-Checked="@IsCashOnDelivery">
                            @L[PikachuResource.CashOnDelivery]
                        </Check>


                    </Column>
                    <Column ColumnSize="columnSize">
                        <Label> @L[" Others"] </Label>
                        <Check TValue="bool?" @bind-Checked="@Filters.FreeShipping">@L["FreeShipping"]</Check>


                        <Check TValue="bool?" @bind-Checked="@Filters.AllowShipToOuterTaiwan">@L["AllowShipToOuterIslands"]</Check>


                        <Check TValue="bool?" @bind-Checked="@Filters.IssueInvoice">@L["IssueInvoice"]</Check>


                        <Check TValue="bool?" @bind-Checked="@Filters.IsEnterprise">@L["EnterprisePurchase"]</Check>


                        <Check TValue="bool?" @bind-Checked="@Filters.IsEnterprise">@L["InviteCode"]</Check>
                    </Column>
                }
            </Row>

        </CardBody>

    </Card>
    <Card>
        <CardBody>
            <DataGrid TItem="GroupBuyDto"
                      Data="GroupBuyListItem"
                      ReadData="OnDataGridReadAsync"
                      TotalItems="Total"
                      ShowPager="true"
                      PageSize="_pageSize"
                      SortChanged="OnSortChange"
                      Hoverable>
                <DataGridColumns>

                    <DataGridColumn TItem="GroupBuyDto" Caption="@L["Select"]" Width="30px">
                        <DisplayTemplate>
                            <InputCheckbox class="form-check-input" @bind-Value="@context.IsSelected"></InputCheckbox>
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="GroupBuyDto"
                                    Field="@nameof(GroupBuyDto.GroupBuyName)"
                                    Caption="@L["GroupBuyName"]">
                        <DisplayTemplate>
                            <Button Class="btn-link hyperlink" Clicked="() => OnEditItem(context)">@context.GroupBuyName</Button>
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="GroupBuyDto"
                                    Field="@nameof(GroupBuyDto.StartTime)"
                                    Caption="@L["TimePeriod"]">
                        <DisplayTemplate>
                            @context.StartTime-@context.EndTime
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Caption="@L["FrontPage"]"
                                    Sortable="false"
                                    TextAlignment="TextAlignment.Center">
                        <DisplayTemplate>
                            <a href="@context.EntryURL" id="editLink" target="_blank">
                                <i class="fa fa-external-link" />
                            </a>
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Caption="@L["CopyPageLink"]"
                                    Sortable="false"
                                    TextAlignment="TextAlignment.Center">
                        <DisplayTemplate>
                              <Copy Text="@context.EntryURL" ShouldDisplayText="false" IsLink="false" ShouldDisplayIcon="true"></Copy>
                        @*     <Button Type="ButtonType.Button"
                                    Clicked="@(() => CopyLinkToClipboard(context.EntryURL))">
                                <i class="fa fa-link" />
                            </Button> *@
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="GroupBuyDto"
                                    Field="@nameof(GroupBuyDto.CreationTime)"
                                    Caption="@L["CreatedTime"]">
                        <DisplayTemplate>
                            @context.CreationTime.ToShortDateString()
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="GroupBuyDto" Field="@nameof(GroupBuyDto.IsGroupBuyAvaliable)"
                                    Caption="@L["Availability"]">
                        <DisplayTemplate>
                            <Switch TValue="bool" Checked="@context.IsGroupBuyAvaliable" CheckedChanged="@(() => OnGroupBuyAvaliablityChanged(context.Id))"></Switch>
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGridColumns>
                <FirstPageButtonTemplate>@L[PikachuResource.FirstPage]</FirstPageButtonTemplate>
                <PreviousPageButtonTemplate>@L[PikachuResource.PrevPage]</PreviousPageButtonTemplate>
                <NextPageButtonTemplate>@L[PikachuResource.NextPage]</NextPageButtonTemplate>
                <LastPageButtonTemplate>@L[PikachuResource.LastPage]</LastPageButtonTemplate>
                  <TotalItemsTemplate>
                @(string.Format(
                         L["Range"],
                         ((_pageIndex - 1) * _pageSize) + 1,
                         (_pageIndex * _pageSize > Total ? Total : _pageIndex * _pageSize),
                         Total
                         ))
            </TotalItemsTemplate>
            </DataGrid>
        </CardBody>
    </Card>
    </div>

@code {
}

