@page "/GroupBuyManagement/GroupBuyList/Edit/{id}"

@using Kooco.Pikachu.EnumValues;
@using Kooco.Pikachu.GroupBuyOrderInstructions
@using Kooco.Pikachu.GroupBuys;
@using Kooco.Pikachu.GroupPurchaseOverviews
@using Kooco.Pikachu.Images
@using Kooco.Pikachu.Items.Dtos;
@using Kooco.Pikachu.Orders
@using Kooco.Pikachu.Tenants
@using Microsoft.Extensions.Configuration;
@using Pikachu.Items;
@using Pikachu.Localization;
@using Microsoft.Extensions.Localization;
@using Volo.Abp.AspNetCore.Components.Web
@using System.ComponentModel
@using Blazorise.Components
@using Blazorise.LoadingIndicator;
@inherits PikachuComponentBase
@inject IMyTenantAppService MyTenantAppService
@inject IGroupBuyAppService AppService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<PikachuResource> L
@inject IMessageService _message
@inject IConfiguration _configuration
@inject IJSRuntime JSRuntime;
@inject IOrderAppService _OrderAppService;

<style>
    .row {
        margin-top: 10px;
    }

    .drag-drop-span {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        max-height: 55px !important;
    }

        .drag-drop-span i {
            cursor: pointer;
        }

    .color-scheme > .b-input-color-picker-preview {
        height: 9.55rem;
    }
</style>
<h3>@L["EditGroupBuy"]</h3>
<LoadingIndicator @ref="Loading" FullScreen FadeIn></LoadingIndicator>
<Card>
    <CardBody>
        <div class="col-12">
            <h4>@L["SalesURL"]</h4>
        </div>
        <div class="row">
            <div class="col-2">
                <label>
                    @L["SalesURL1"]
                    <a href="@EditGroupBuyDto.EntryURL" target="_blank" class="text-primary">
                        <i class="fa-solid fa-arrow-up-right-from-square"></i>
                    </a>
                </label>
            </div>
            <div class="col-10">
                <TextEdit @bind-Text="@EditGroupBuyDto.EntryURL" ReadOnly />
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                <label>@L["SalesURL2"]</label>
            </div>
            <div class="col-10">
                <TextEdit @bind-Text="@EditGroupBuyDto.EntryURL2" />
            </div>
        </div>
        <Validations @ref="@EditValidationsRef" Model="@EditGroupBuyDto" ValidateOnLoad="false">
            <div class="row">
                <div class="col-2">
                    <label>@L["ShortCode"]</label>
                </div>
                <div class="col-10">
                    <Validation UsePattern>
                        <Addons>
                            <Addon AddonType="AddonType.Start">
                                <AddonLabel Style="background-color: #f5f5f7">
                                    @((string.IsNullOrWhiteSpace(EditGroupBuyDto.ShortCode) ? 0 : (EditGroupBuyDto.ShortCode.Count())))/@(12)
                                </AddonLabel>
                            </Addon>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit Pattern="^[A-Za-z0-9]{4,12}$" MaxLength="12" @bind-Text="@EditGroupBuyDto.ShortCode">
                                    <Feedback>
                                        <ValidationError>@L["ShortCodePatternDoesnotMatch"]</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Addon>
                        </Addons>
                    </Validation>
                </div>
            </div>
        </Validations>
        <Divider></Divider>
        <div class="row">
            <div class="col-2">
                <label>@L["GroupBuyName"] <span class="text-danger"> *</span></label>
            </div>
            <div class="col-10">
                <Addons>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit MaxLength="@MaxtextCount" @bind-Text="@EditGroupBuyDto.GroupBuyName" />
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <AddonLabel Style="background-color: #f5f5f7">
                            @(string.IsNullOrWhiteSpace(EditGroupBuyDto.GroupBuyName) ? 0 : (EditGroupBuyDto.GroupBuyName.Count()))/@MaxtextCount
                        </AddonLabel>
                    </Addon>
                </Addons>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                <label>@L["Subject"]</label>
            </div>
            <div class="col-10">
                <Addons>
                    <Addon AddonType="AddonType.Body">
                        <MemoEdit MaxLength="@MaxtextCount" @bind-Text="@EditGroupBuyDto.SubjectLine" Rows="5" />
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <AddonLabel Style="background-color: #f5f5f7">
                            @(string.IsNullOrWhiteSpace(EditGroupBuyDto.SubjectLine) ? 0 : (EditGroupBuyDto.SubjectLine.Count()))/@MaxtextCount
                        </AddonLabel>
                    </Addon>
                </Addons>
            </div>
        </div>
        <div class="row">
            <div class="col-2">@L["GroupBuyTime"]</div>
            <div class="col-5">
                <DatePicker TValue="DateTime?" @bind-Date="EditGroupBuyDto.StartTime" InputMode="DateInputMode.DateTime" Placeholder="@L["StartTime"]" />
            </div>
            <div class="col-5">
                <DatePicker TValue="DateTime?" @bind-Date="EditGroupBuyDto.EndTime" InputMode="DateInputMode.DateTime" Placeholder="@L["EndDate"]" />
            </div>
        </div>

        <div class="row">
            <div class="col-2">
                <label>
                    @L["NotificationBar"]
                </label>
            </div>
            <div class="col-10">
                <TextEdit @bind-Text="@EditGroupBuyDto.NotificationBar" />
            </div>
        </div>

        @* <div class="row">
        <div class="col-2">
        <label>@L["GroupBuyShortName"]</label>
        </div>
        <div class="col-10">
        <Addons>
        <Addon AddonType="AddonType.Body">
        <TextEdit MaxLength="@MaxtextCount" @bind-Text="@EditGroupBuyDto.ShortName" />
        </Addon>
        <Addon AddonType="AddonType.End">
        <AddonLabel Style="background-color: #f5f5f7">
        @(string.IsNullOrWhiteSpace(EditGroupBuyDto.ShortName) ? 60 : (MaxtextCount - EditGroupBuyDto.ShortName.Count()))/@MaxtextCount
        </AddonLabel>
        </Addon>
        </Addons>
        </div>
        </div> *@
        @* <Div Class="row">
        <Div Class="col-2">
        <label>@L["Facebook"]</label>
        </Div>
        <Div Class="col-10">
        <TextEdit @bind-Text="@EditGroupBuyDto.FacebookLink" />
        </Div>
        </Div>
        <Div Class="row">
        <Div Class="col-2">
        <label>@L["Instagram"]</label>
        </Div>
        <Div Class="col-10">
        <TextEdit @bind-Text="@EditGroupBuyDto.InstagramLink" />
        </Div>
        </Div>
        <Div Class="row">
        <Div Class="col-2">
        <label>@L["LINE"]</label>
        </Div>
        <Div Class="col-10">
        <TextEdit @bind-Text="@EditGroupBuyDto.LINELink" />
        </Div>
        </Div> *@
        <div class="row">
            <div class="col-2">
                <label>
                    @L["GroupBuyLogo"]
                    <span class="text-danger"> *</span>
                </label>
            </div>
            <div class="col-10">
                <Field>
                    <FilePicker @ref="LogoPickerCustom"
                                FilePickerLocalizer="(key,args)=>LocalizeFilePicker(key,args)"
                                Changed="OnLogoUploadAsync"
                                ShowMode="FilePickerShowMode.List"
                                Accept=".jpg, .png, .svg,.jpeg,.webp">
                        <FileTemplate>
                            <Div Flex="Flex.JustifyContent.Between">
                                <Div>
                                    <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
                                    <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                </Div>
                                <Div Class="ps-2">
                                    <Div>
                                        @if (context.File.Status == FileEntryStatus.Ready)
                                        {
                                            <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Uploading)
                                        {
                                            <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Uploaded)
                                        {
                                            <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Error)
                                        {
                                            <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
                                        }
                                    </Div>
                                    <Div>
                                        <Icon TextColor="TextColor.Danger" Name="IconName.Delete" class="cursor-pointer" Clicked="context.RemoveFile" />
                                    </Div>
                                </Div>
                            </Div>
                        </FileTemplate>
                        <ButtonsTemplate>
                            <Progress Value="@LogoPickerCustom.GetProgressPercentage()" />
                        </ButtonsTemplate>
                    </FilePicker>
                </Field>
            </div>
            @if (EditGroupBuyDto.LogoURL != null)
            {
                <div class="col-2"></div>
                <div class="col-10">
                    <div class="image-list-container">
                        <div class="image-container">
                            <Image class="blur-image" Source="@EditGroupBuyDto.LogoURL" Text="Logo Image" Fluid />
                            <button class="delete-button" @onclick="() => DeleteLogoAsync(EditGroupBuyDto.BannerURL)">
                                <i class="fa fa-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
        @* <div class="row">
        <div class="col-2">
        <label>@L["GroupBuyBanner"]</label>
        </div>
        <div class="col-10">
        <Field>
        <FilePicker @ref="BannerPickerCustom"
        Changed="OnBannerUploadAsync"
        ShowMode="FilePickerShowMode.List"
        Accept=".jpg, .png, .svg ,.jpeg,.webp">
        <FileTemplate>
        <Div Flex="Flex.JustifyContent.Between">
        <Div>
        <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
        <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
        </Div>
        <Div Class="ps-2">
        <Div>
        @if (context.File.Status == FileEntryStatus.Ready)
        {
        <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
        }
        else if (context.File.Status == FileEntryStatus.Uploading)
        {
        <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
        }
        else if (context.File.Status == FileEntryStatus.Uploaded)
        {
        <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
        }
        else if (context.File.Status == FileEntryStatus.Error)
        {
        <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
        }
        </Div>
        <Div>
        <Icon TextColor="TextColor.Danger" Name="IconName.Delete" class="cursor-pointer" Clicked="context.RemoveFile" />
        </Div>
        </Div>
        </Div>
        </FileTemplate>
        <ButtonsTemplate>
        <Progress Value="@BannerPickerCustom.GetProgressPercentage()" />
        </ButtonsTemplate>
        </FilePicker>
        </Field>
        </div>
        @if(EditGroupBuyDto.BannerURL != null)
        {
        <div class="row">
        <div class="col-2"></div>
        <div class="col-10">
        <div class="image-list-container">
        <div class="image-container">
        <Image class="blur-image" Source="@EditGroupBuyDto.BannerURL" Text="Logo Image" Fluid />
        <button class="delete-button" @onclick="() => DeleteBannerAsync(EditGroupBuyDto.BannerURL)">
        <i class="fa fa-trash"></i>
        </button>
        </div>
        </div>
        </div>
        </div>
        }
        </div> *@

        <Divider></Divider>
        <div class="row">
            <div class="col-2">@L["Logistic"]</div>
            <div class="col-2">@L["FreeShipping"]</div>
            <div class="col-2"> <Switch TValue="bool" @bind-Checked="@EditGroupBuyDto.FreeShipping"></Switch></div>
            <div class="col-1">@L["Threshold"]</div>
            <div class="col-2">  <InputNumber id="h-threshold" class="form-control" @bind-Value="EditGroupBuyDto.FreeShippingThreshold" DisplayName="Free Shipping Threshold"></InputNumber></div>

        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">@L["AllowShipToOuterIsland"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@EditGroupBuyDto.AllowShipToOuterTaiwan"></Switch></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">@L["AllowShipToOverSea"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@EditGroupBuyDto.AllowShipOversea"></Switch></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                @L["ShippingMethod"] <span class="text-danger"> *</span>
            </div>
            <div class="col-8">
                <label class="form-label">@L["Normal"]</label><br />
                @if (EditGroupBuyDto.AllowShipToOuterTaiwan && !EditGroupBuyDto.AllowShipOversea)
                {
                    @foreach (string item in Enum.GetNames(typeof(DeliveryMethod)))
                    {
                        if (item == Enum.GetName(DeliveryMethod.BlackCat1) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliveryNormal) ||
                        item == Enum.GetName(DeliveryMethod.SevenToElevenC2C) ||
                        item == Enum.GetName(DeliveryMethod.SevenToEleven1))
                        {
                            if (IsShippingMethodEnabled(item))
                            {
                                <label for="@item" class="form-label ">
                                    <input type="checkbox"
                                           class="form-check-input me-1"
                                           id="@item"
                                           checked="@((EditGroupBuyDto.ExcludeShippingMethod is not null) &&
                                                      (EditGroupBuyDto.ExcludeShippingMethod.Contains(item)))"
                                           @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                    @L[item]
                                </label>
                            }
                        }
                    }
                }
                else
                {
                    @foreach (string item in Enum.GetNames(typeof(DeliveryMethod)))
                    {
                        if (item == Enum.GetName(DeliveryMethod.PostOffice) ||
                        item == Enum.GetName(DeliveryMethod.BlackCat1) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliveryNormal) ||
                        item == Enum.GetName(DeliveryMethod.SevenToEleven1) ||
                        item == Enum.GetName(DeliveryMethod.SevenToElevenC2C) ||
                        item == Enum.GetName(DeliveryMethod.FamilyMart1) ||
                        item == Enum.GetName(DeliveryMethod.FamilyMartC2C) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliverySevenElevenNormal))
                        {
                            if (IsShippingMethodEnabled(item))
                            {
                                <label for="@item" class="form-label">
                                    <input type="checkbox"
                                           class="form-check-input me-1"
                                           id="@item"
                                           disabled="@((EditGroupBuyDto.ExcludeShippingMethod is not null) &&
                                                   (EditGroupBuyDto.ExcludeShippingMethod.Contains("DeliveredByStore")) &&
                                                   item is not "DeliveredByStore")"
                                           checked="@((EditGroupBuyDto.ExcludeShippingMethod is not null) &&
                                                  (EditGroupBuyDto.ExcludeShippingMethod.Contains(item)))"
                                           @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                    @L[item]
                                </label>
                            }
                        }
                    }
                }
                <br />
                <label class="form-label">@L["Freeze"]</label><br />
                @if (EditGroupBuyDto.AllowShipToOuterTaiwan && !EditGroupBuyDto.AllowShipOversea)
                {
                    @foreach (string item in Enum.GetNames(typeof(DeliveryMethod)))
                    {
                        if (item == Enum.GetName(DeliveryMethod.BlackCatFreeze) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliveryFreeze))
                        {
                            if (IsShippingMethodEnabled(item))
                            {
                                <label for="@item" class="form-label ">
                                    <input type="checkbox"
                                           class="form-check-input me-1"
                                           id="@item"
                                           checked="@((EditGroupBuyDto.ExcludeShippingMethod is not null) &&
                                                  (EditGroupBuyDto.ExcludeShippingMethod.Contains(item)))"
                                           @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                    @L[item]
                                </label>
                            }
                        }
                    }
                }
                else
                {
                    @foreach (string item in Enum.GetNames(typeof(DeliveryMethod)))
                    {
                        if (item == Enum.GetName(DeliveryMethod.BlackCatFreeze) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliveryFreeze) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliverySevenElevenFreeze))
                        {
                            if (IsShippingMethodEnabled(item))
                            {
                                <label for="@item" class="form-label">
                                    <input type="checkbox"
                                           class="form-check-input me-1"
                                           id="@item"
                                           disabled="@((EditGroupBuyDto.ExcludeShippingMethod is not null) &&
                                                       (EditGroupBuyDto.ExcludeShippingMethod.Contains("DeliveredByStore")) &&
                                                       item is not "DeliveredByStore")"
                                           checked="@((EditGroupBuyDto.ExcludeShippingMethod is not null) &&
                                                      (EditGroupBuyDto.ExcludeShippingMethod.Contains(item)))"
                                           @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                    @L[item]
                                </label>
                            }
                        }
                    }
                }
                <br />
                <label class="form-label">@L["Frozen"]</label><br />
                @if (EditGroupBuyDto.AllowShipToOuterTaiwan && !EditGroupBuyDto.AllowShipOversea)
                {
                    @foreach (string item in Enum.GetNames(typeof(DeliveryMethod)))
                    {
                        if (item == Enum.GetName(DeliveryMethod.BlackCatFrozen) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliveryFrozen))
                        {
                            if (IsShippingMethodEnabled(item))
                            {
                                <label for="@item" class="form-label ">
                                    <input type="checkbox"
                                           class="form-check-input me-1"
                                           id="@item"
                                           checked="@((EditGroupBuyDto.ExcludeShippingMethod is not null) &&
                                                  (EditGroupBuyDto.ExcludeShippingMethod.Contains(item)))"
                                           @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                    @L[item]
                                </label>
                            }
                        }
                    }
                }
                else
                {
                    @foreach (string item in Enum.GetNames(typeof(DeliveryMethod)))
                    {
                        if (item == Enum.GetName(DeliveryMethod.BlackCatFrozen) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliveryFrozen) ||
                        item == Enum.GetName(DeliveryMethod.SevenToElevenFrozen) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliverySevenElevenFrozen))
                        {
                            if (IsShippingMethodEnabled(item))
                            {
                                <label for="@item" class="form-label">
                                    <input type="checkbox"
                                           class="form-check-input me-1"
                                           id="@item"
                                           disabled="@((EditGroupBuyDto.ExcludeShippingMethod is not null) &&
                                                       (EditGroupBuyDto.ExcludeShippingMethod.Contains("DeliveredByStore")) &&
                                                       item is not "DeliveredByStore")"
                                           checked="@((EditGroupBuyDto.ExcludeShippingMethod is not null) &&
                                                      (EditGroupBuyDto.ExcludeShippingMethod.Contains(item)))"
                                           @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                    @L[item]
                                </label>
                            }
                        }
                    }
                }
                <br />
                <label class="form-label">@L["DeliveryTypeOthers"]</label><br />
                @foreach (string item in Enum.GetNames(typeof(DeliveryMethod)))
                {
                    if (item == Enum.GetName(DeliveryMethod.HomeDelivery))
                    {
                        if (IsShippingMethodEnabled(item))
                        {
                            <label for="@item" class="form-label ">
                                <input type="checkbox"
                                       class="form-check-input me-1"
                                       id="@item"
                                       checked="@((EditGroupBuyDto.ExcludeShippingMethod is not null) &&
                                                          (EditGroupBuyDto.ExcludeShippingMethod.Contains(item)))"
                                       @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                @L[item]
                            </label>
                        }
                    }
                    if (item == Enum.GetName(DeliveryMethod.DeliveredByStore) ||
                    item == Enum.GetName(DeliveryMethod.SelfPickup))
                    {
                        <label for="@item" class="form-label">
                            <input type="checkbox"
                                   class="form-check-input me-1"
                                   id="@item"
                                   disabled="@((EditGroupBuyDto.ExcludeShippingMethod is not null) &&
                                               (EditGroupBuyDto.ExcludeShippingMethod.Contains("DeliveredByStore")) &&
                                               item is not "DeliveredByStore")"
                                   checked="@((EditGroupBuyDto.ExcludeShippingMethod is not null) &&
                                              (EditGroupBuyDto.ExcludeShippingMethod.Contains(item)))"
                                   @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                            @L[item]
                        </label>
                    }
                }
            </div>
        </div>

        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">@L[PikachuResource.DeliveryTimePreference]</div>
            <div class="col-8">
                @if (EditGroupBuyDto.ExcludeShippingMethod != null && EditGroupBuyDto.ExcludeShippingMethod.Contains("BlackCat1"))
                {
                    <label class="form-label">@L["BlackCat"] / @L[PikachuResource.TCatDelivery]<span class="text-danger"> </span></label>
                }
                else if (EditGroupBuyDto.ExcludeShippingMethod != null && EditGroupBuyDto.ExcludeShippingMethod.Contains("BlackCatFreeze"))
                {
                    <label class="form-label">@L["BlackCatFreeze"] / @L[PikachuResource.TCatDelivery]<span class="text-danger"> </span></label>
                }
                else if (EditGroupBuyDto.ExcludeShippingMethod != null && EditGroupBuyDto.ExcludeShippingMethod.Contains("BlackCatFrozen"))
                {
                    <label class="form-label">@L["BlackCatFrozen"] / @L[PikachuResource.TCatDelivery]<span class="text-danger"> </span></label>
                }
                else
                {
                    <label class="form-label">@L["BlackCat"] / @L[PikachuResource.TCatDelivery]<span class="text-danger"> </span></label>
                }
            </div>
            <div class="col-2"></div>
            <div class="col-2"></div>
            <div class="col-8">
                @if (DeliveryTimeConts.BlackCat is not null)
                {
                    @foreach (string island in DeliveryTimeConts.BlackCat)
                    {
                        @if ((EditGroupBuyDto.ExcludeShippingMethod is not null) &&
                       ((EditGroupBuyDto.ExcludeShippingMethod.Contains("BlackCat1")) ||
                       (EditGroupBuyDto.ExcludeShippingMethod.Contains("BlackCatFreeze")) ||
                       (EditGroupBuyDto.ExcludeShippingMethod.Contains("BlackCatFrozen")) ||
                       (EditGroupBuyDto.ExcludeShippingMethod.Contains("TCatDeliveryNormal")) ||
                       (EditGroupBuyDto.ExcludeShippingMethod.Contains("TCatDeliveryFreeze")) ||
                       (EditGroupBuyDto.ExcludeShippingMethod.Contains("TCatDeliveryFrozen")) ||
                       (EditGroupBuyDto.ExcludeShippingMethod.Contains("TCatDeliverySevenElevenNormal")) ||
                       (EditGroupBuyDto.ExcludeShippingMethod.Contains("TCatDeliverySevenElevenFreeze")) ||
                       (EditGroupBuyDto.ExcludeShippingMethod.Contains("TCatDeliverySevenElevenFrozen")) ||
                       (EditGroupBuyDto.ExcludeShippingMethod.Contains("DeliveredByStore"))))
                        {
                            <label for="@island" class="form-label">
                                <input type="checkbox"
                                       class="form-check-input me-1"
                                       id="@island"
                                       checked="@(EditGroupBuyDto.BlackCatDeliveryTime is not null && EditGroupBuyDto.BlackCatDeliveryTime.Contains(island))"
                                       @onchange="(value) => BlackCatDeliveryTimeCheckedChange(island, value)" />
                                @L[island]
                            </label>
                        }
                        else
                        {
                            <label for="@island" class="form-label">
                                <input disabled
                                       type="checkbox"
                                       class="form-check-input me-1"
                                       id="@island"
                                       checked="@(EditGroupBuyDto.BlackCatDeliveryTime is not null && EditGroupBuyDto.BlackCatDeliveryTime.Contains(island))"
                                       @onchange="(value) => BlackCatDeliveryTimeCheckedChange(island, value)" />
                                @L[island]
                            </label>

                        }
                    }
                }
            </div>
            <div class="col-2"></div>
            <div class="col-2"></div>
            <div class="col-8">
                 <label class="form-label">@L["HomeDelivery"]<span class="text-danger"> </span></label>
            </div>
            <div class="col-2"></div>
            <div class="col-2"></div>
            <div class="col-8">
                @if (DeliveryTimeConts.HomeDelivery != null)
                {
                    @foreach (string island in DeliveryTimeConts.HomeDelivery)
                    {
                        @if ((EditGroupBuyDto.ExcludeShippingMethod is not null) &&
                       (EditGroupBuyDto.ExcludeShippingMethod.Contains("HomeDelivery")))
                        {
                            <label for="@(island)_HomeDelivery" class="form-label">
                                <input type="checkbox"
                                       class="form-check-input me-1"
                                       id="@island"
                                       disabled="@(island is not PikachuResource.UnableToSpecifyDuringPeakPeriods ?
                                                    IsUnableToSpecifyDuringPeakPeriodsForHomeDelivery :
                                                    false)"
                                       checked="@(EditGroupBuyDto.HomeDeliveryDeliveryTime is not null &&
                                                      EditGroupBuyDto.HomeDeliveryDeliveryTime.Contains(island))"
                                       @onchange="(value) => HomeDeliveryTimeCheckedChange(island, value)" />
                                @L[island]
                            </label>
                        }
                        else
                        {
                            <label for="@(island)_HomeDelivery" class="form-label">
                                <input disabled
                                       type="checkbox"
                                       class="form-check-input me-1"
                                       id="@island"
                                       checked="@(EditGroupBuyDto.HomeDeliveryDeliveryTime is not null &&
                                                         EditGroupBuyDto.HomeDeliveryDeliveryTime.Contains(island))"
                                       @onchange="(value) => HomeDeliveryTimeCheckedChange(island, value)" />
                                @L[island]
                            </label>

                        }
                    }
                }
            </div>
            <div class="col-2"></div>
            <div class="col-2"></div>
            <div class="col-8">
               <label class="form-label">@L["SelfPickup"]<span class="text-danger"> </span></label>
            </div>
            <div class="col-2"></div>
            <div class="col-2"></div>
            <div class="col-8">
                @if (DeliveryTimeConts.SelfPickUp != null)
                {
                    @foreach (string island in DeliveryTimeConts.SelfPickUp)
                    {
                        @if ((EditGroupBuyDto.ExcludeShippingMethod is not null) &&
                       (EditGroupBuyDto.ExcludeShippingMethod.Contains("SelfPickup")))
                        {
                            <label for="@(island)_SelfPickUp" class="form-label">
                                <input type="checkbox"
                                       class="form-check-input me-1"
                                       id="@island"
                                       disabled="@(island is not PikachuResource.UnableToSpecifyDuringPeakPeriods ?
                                                        IsUnableToSpecifyDuringPeakPeriodsForSelfPickups :
                                                        false)"
                                       checked="@(EditGroupBuyDto.SelfPickupDeliveryTime is not null &&
                                                      EditGroupBuyDto.SelfPickupDeliveryTime.Contains(island))"
                                       @onchange="(value) => SelfPickupDeliveryTimeCheckedChange(island, value)" />
                                @L[island]
                            </label>
                        }
                        else
                        {
                            <label for="@(island)_SelfPickUp" class="form-label">
                                <input disabled
                                       type="checkbox"
                                       class="form-check-input me-1"
                                       id="@island"
                                       checked="@(EditGroupBuyDto.SelfPickupDeliveryTime is not null &&
                                                      EditGroupBuyDto.SelfPickupDeliveryTime.Contains(island))"
                                       @onchange="(value) => SelfPickupDeliveryTimeCheckedChange(island, value)" />
                                @L[island]
                            </label>
                        }
                    }
                }
            </div>
            <div class="col-2"></div>
            <div class="col-2"></div>
            <div class="col-8">
                <label class="form-label">@L["DeliveredByStore"]<span class="text-danger"> </span></label>
            </div>
            <div class="col-2"></div>
            <div class="col-2"></div>
            <div class="col-8">
                @if (DeliveryTimeConts.DeliveredByStore != null)
                {
                    @foreach (string island in DeliveryTimeConts.DeliveredByStore)
                    {
                        @if ((EditGroupBuyDto.ExcludeShippingMethod is not null) &&
                       (EditGroupBuyDto.ExcludeShippingMethod.Contains("DeliveredByStore")))
                        {
                            <label for="@(island)_DeliveredByStore" class="form-label">
                                <input type="checkbox"
                                       class="form-check-input me-1"
                                       id="@island"
                                       disabled="@(island is not PikachuResource.UnableToSpecifyDuringPeakPeriods ?
                                                    IsUnableToSpecifyDuringPeakPeriodsForDeliveredByStore :
                                                    false)"
                                       checked="@(EditGroupBuyDto.DeliveredByStoreDeliveryTime is not null &&
                                                  EditGroupBuyDto.DeliveredByStoreDeliveryTime.Contains(island))"
                                       @onchange="(value) => DeliveredByStoreTimeCheckedChange(island, value)" />
                                @L[island]
                            </label>
                        }
                        else
                        {
                            <label for="@(island)_DeliveredByStore" class="form-label">
                                <input disabled
                                       type="checkbox"
                                       class="form-check-input me-1"
                                       id="@island"
                                       checked="@(EditGroupBuyDto.DeliveredByStoreDeliveryTime is not null &&
                                                     EditGroupBuyDto.DeliveredByStoreDeliveryTime.Contains(island))"
                                       @onchange="(value) => DeliveredByStoreTimeCheckedChange(island, value)" />
                                @L[island]
                            </label>

                        }
                    }
                }
            </div>
        </div>
        <Div Class="row">
            <Div Class="col-2"></Div>
            <Div Class="col-2">@L[PikachuResource.ProductType] <span class="text-danger"> *</span></Div>
            <Div Class="col-8">
                <select class="form-select"
                        @onchange=OnProductTypeChange>
                    <option></option>
                    @foreach (ProductType value in Enum.GetValues<ProductType>())
                    {
                        if (value == EditGroupBuyDto.ProductType)
                        {
                            <option value="@value" selected>@L[value.ToString() ?? string.Empty]</option>
                        }

                        else
                        {
                            <option value="@value">@L[value.ToString() ?? string.Empty]</option>
                        }
                    }
                </select>
            </Div>
        </Div>
        <Divider></Divider>
        <div class="row">
            <div class="col-2">@L["Gateway"]</div>
            <div class="col-2">@L["PaymentMethod"] <span class="text-danger"> *</span></div>
            <Div Class="col-8">
                <Div Class="row">
                    <Check TValue="bool"
                           @bind-Checked="@CreditCard">
                        @L["CreditCard"]
                    </Check>
                    <Check TValue="bool"
                           @bind-Checked="@BankTransfer">
                        @L["BankTransfer"]
                    </Check>
                    <Check TValue="bool"
                           @bind-Checked="@IsCashOnDelivery">
                        @L[PikachuResource.CashOnDelivery]
                    </Check>
                </Div>
            </Div>
        </div>

        <div class="row">
            <div class="col-2">@L["Invoice"]</div>
            <div class="col-2">@L["IssueInvoice"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@EditGroupBuyDto.IssueInvoice"></Switch></div>
        </div>
        @*   <div class="row">
        <div class="col-2"></div>
        <div class="col-2 form-label">@L["AutoIssueTriplicateInvoice"]</div>
        <div class="col-4"> <Switch TValue="bool" @bind-Checked="@EditGroupBuyDto.AutoIssueTriplicateInvoice"></Switch></div>
        </div> *@
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2 form-label">@L["InvoiceComment"]</div>
            <div class="col-8">
                <InputTextArea class="form-control" maxlength="200" @bind-Value="@EditGroupBuyDto.InvoiceNote"></InputTextArea>
            </div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["TaxType"]</label>
            </div>
            <div class="col-5">
                <Select TValue="TaxType" Class="form-select"
                        @bind-SelectedValue="@EditGroupBuyDto.TaxType">
                    @foreach (var enumValue in Enum.GetValues(typeof(TaxType)))
                    {
                        <SelectItem Value="@enumValue">@L[enumValue.ToString()]</SelectItem>
                    }
                </Select>
            </div>
        </div>
        <Divider></Divider>
        <div class="row">
            <div class="col-2">@L["AdvanceSetting"]</div>
            <div class="col-2 form-label">@L["HideCredention"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@EditGroupBuyDto.ProtectPrivacyData"></Switch></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2 form-label">@L["EnterprisePurchase"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@EditGroupBuyDto.IsEnterprise"></Switch></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["InviteCode"]</label>
            </div>
            <div class="col-5">
                <TextEdit @bind-Text="@EditGroupBuyDto.InviteCode" />
            </div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["ProfitShare"]</label>
            </div>
            <div class="col-5">
                <InputNumber class="form-control" @bind-Value="@EditGroupBuyDto.ProfitShare" />
            </div>
        </div>

        @*    <div class="row">
        <div class="col-2"></div>
        <div class="col-2">
        <label>@L["FaceBookPixelID"]</label>
        </div>
        <div class="col-5">
        <InputNumber class="form-control" @bind-Value="@EditGroupBuyDto.MetaPixelNo" />
        </div>
        </div>
        <div class="row">
        <div class="col-2"></div>
        <div class="col-2">
        <label>@L["FaceBookID"]</label>
        </div>
        <div class="col-5">
        <TextEdit @bind-Text="@EditGroupBuyDto.FBID" />
        </div>
        </div>
        <div class="row">
        <div class="col-2"></div>
        <div class="col-2">
        <label>@L["IGID"]</label>
        </div>
        <div class="col-5">
        <TextEdit  @bind-Text="@EditGroupBuyDto.IGID" />
        </div>
        </div>
        <div class="row">
        <div class="col-2"></div>
        <div class="col-2">
        <label>@L["LINEID"]</label>
        </div>
        <div class="col-5">
        <TextEdit  @bind-Text="@EditGroupBuyDto.LineID" />
        </div>
        </div>
        <div class="row">
        <div class="col-2"></div>
        <div class="col-2">
        <label>@L["GAID"]</label>
        </div>
        <div class="col-5">
        <TextEdit  @bind-Text="@EditGroupBuyDto.GAID" />
        </div>
        </div>
        <div class="row">
        <div class="col-2"></div>
        <div class="col-2">
        <label>@L["GTM"]</label>
        </div>
        <div class="col-5">
        <TextEdit  @bind-Text="@EditGroupBuyDto.GTM" />
        </div>
        </div> *@

        <Divider></Divider>
        <Div Class="row">
            <Div Class="col-2">@L["ColorSchemes"]</Div>
            <Div Class="col-2">@L["SelectColorTheme"]</Div>
            <Div Class="col-8">
                <select class="form-select"
                        @onchange=OnColorSchemeChange>
                    <option>@L["ChooseColorTheme"]</option>
                    @foreach (ColorScheme value in Enum.GetValues<ColorScheme>())
                    {
                        if (value == EditGroupBuyDto.ColorSchemeType)
                        {
                            <option value="@value" selected>@L["Enum:ColorScheme." + (int)value]</option>
                        }

                        else
                        {
                            <option value="@value">@L["Enum:ColorScheme." + (int)value]</option>
                        }
                    }
                </select>
            </Div>
        </Div>

        @if (IsColorPickerOpen)
        {
            <Div Class="row d-flex justify-content-center">
                <Div Class="col-2">
                    <label class="form-label">@L["Primary"]</label>
                    <ColorPicker Class="color-scheme" @bind-Color="@EditGroupBuyDto.PrimaryColor" />
                    <TextEdit Disabled @bind-text="EditGroupBuyDto.PrimaryColor" class="form-control mt-2" />
                </Div>
                <Div Class="col-2">
                    <label class="form-label">@L["Secondary"]</label>
                    <ColorPicker Class="color-scheme" @bind-Color="@EditGroupBuyDto.SecondaryColor" />
                    <TextEdit Disabled @bind-text="EditGroupBuyDto.SecondaryColor" class="form-control mt-2" />
                </Div>

                <Div Class="col-2">
                    <label class="form-label">@L["Background"]</label>
                    <ColorPicker Class="color-scheme" @bind-Color="@EditGroupBuyDto.BackgroundColor" />
                    <TextEdit Disabled @bind-text="EditGroupBuyDto.BackgroundColor" class="form-control mt-2" />
                </Div>

                <Div Class="col-2">
                    <label class="form-label d-none d-xl-block">@L["SecondaryBackground"]</label>
                    <label class="form-label d-block d-xl-none">@L["SecondaryBg"]</label>
                    <ColorPicker Class="color-scheme" @bind-Color="@EditGroupBuyDto.SecondaryBackgroundColor" />
                    <TextEdit Disabled @bind-text="EditGroupBuyDto.SecondaryBackgroundColor" class="form-control mt-2" />
                </Div>

                <Div Class="col-2">
                    <label class="form-label">@L["Alert"]</label>
                    <ColorPicker Class="color-scheme" @bind-Color="@EditGroupBuyDto.AlertColor" />
                    <TextEdit Disabled @bind-text="EditGroupBuyDto.AlertColor" class="form-control mt-2" />
                </Div>
            </Div>
        }

        <Divider></Divider>

        <Div Class="row">
            <Div Class="col-2">@L["DisplayMethodForProductDetails"]</Div>
            <Div Class="col-8">
                <select class="form-select"
                        @onchange=OnProductDetailsDisplayMethodChange>
                    <option value="0" selected>@L["ChooseMethod"]</option>
                    @foreach (ProductDetailsDisplayMethod value in Enum.GetValues<ProductDetailsDisplayMethod>())
                    {
                        if (value == EditGroupBuyDto.ProductDetailsDisplayMethod)
                        {
                            <option value="@value" selected>@L[value.ToString()]</option>
                        }

                        else
                        {
                            <option value="@value">@L[value.ToString()]</option>
                        }
                    }
                </select>
            </Div>
        </Div>

        <Divider></Divider>
        <div class="row">
            <div class="col-2"><label>@L["AddModule"]</label></div>
            <div class="col-3 d-flex gap-2">
                @if (CollapseItem.Count < 20)
                {
                    <Select TValue="GroupBuyTemplateType"
                            @onchange="@((e) => SelectTemplate(e))">
                        <option value="">@L["SelectTemplate"]</option>
                        @foreach (GroupBuyTemplateType type in TemplateTypes.Where(w => w != GroupBuyTemplateType.PikachuOne))
                        {
                            if (EditGroupBuyDto.TemplateType == type)
                            {
                                <option value="@type" selected>@L[type.ToString()]</option>
                            }

                            else
                            {
                                <option value="@type">@L[type.ToString()]</option>
                            }
                        }
                    </Select>
                    <Dropdown Disabled=@(EditGroupBuyDto.TemplateType is null)>
                        <DropdownToggle Color="Color.Primary">
                            @L["SelectModule"]
                        </DropdownToggle>
                        <DropdownMenu>
                            @if (SelectedTemplate is GroupBuyTemplateType.PikachuOne)
                            {
                                @foreach (GroupBuyModuleType module in GetPikachuOneList())
                                {
                                    <DropdownItem Clicked='@(() => AddProductItem(module))'>
                                        @L[module.ToString()]
                                    </DropdownItem>
                                }
                            }
                            else if (SelectedTemplate is GroupBuyTemplateType.PikachuTwo)
                            {
                                @foreach (GroupBuyModuleType module in GetPikachuTwoList())
                                {
                                    <DropdownItem Clicked='@(() => AddProductItem(module))'>
                                        @L[module.ToString()]
                                    </DropdownItem>
                                }
                            }
                        </DropdownMenu>
                    </Dropdown>
                }
            </div>
        </div>

        <div ondragover="event.preventDefault();">
            @foreach (var module in CollapseItem)
            {
                <div class="d-flex">
                    <div class="p-2 flex-grow-1">
                        <Accordion>
                            <Collapse VisibleChanged="(e) => OnCollapseVisibleChanged(module, e)">
                                <CollapseHeader>
                                    <AccordionToggle>
                                        <i class="fa fa-trash text-danger me-2" @onclick="@(()=>RemoveCollapseItem(@module.Index))"></i>
                                        @L[module.GroupBuyModuleType.ToString()]

                                        @if (module.IsWarnedForInCompatible)
                                        {
                                            <Tooltip Text="@($"Incompatible Module for {L[SelectedTemplate.ToString()]}")"
                                                     TriggerTargetId="tooltip-custom-target"
                                                     Inline
                                                     Style="margin-left: 5px;">
                                                <Badge Color="Color.Warning">
                                                    <i class="fas fa-circle-info" />
                                                </Badge>
                                            </Tooltip>
                                        }

                                    </AccordionToggle>
                                </CollapseHeader>
                                <CollapseBody>
                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.ProductGroupModule)
                                    {
                                        <div class="d-flex justify-content-end">
                                            <div style="width: 60px;">
                                                <select class="form-control form-control-sm" @onchange="(e) => OnProductGroupValueChange(e, module)">
                                                    @if (module.Selected.Count == 3)
                                                    {
                                                        <option selected="selected" value="3">3</option>
                                                        <option value="4">4</option>
                                                    }
                                                    else if (module.Selected.Count == 4)
                                                    {
                                                        <option value="3">3</option>
                                                        <option selected="selected" value="4">4</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    }

                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.CarouselImages)
                                    {
                                        List<List<CreateImageDto>> carouselModules = CarouselModules.Select(s => s.Where(w => w.ModuleNumber == module.ModuleNumber).ToList()).Where(w => w.Count > 0).ToList();

                                        foreach (List<CreateImageDto> carouselImages in carouselModules)
                                        {
                                            <div class="row">
                                                <div class="col-2">
                                                    <label>
                                                        @L["CarouselImages"]<Span>
                                                            <Tooltip Text="@L["uploadUpto5Images"]">
                                                                <Icon class="fa-question-circle" />
                                                            </Tooltip>
                                                        </Span>
                                                    </label>
                                                </div>
                                                <div class="col-10 ">
                                                    <Field>
                                                        <FilePicker @ref="CarouselFilePickers[carouselImages.GroupBy(g => g.ModuleNumber).FirstOrDefault().Key!.Value - 1]"
                                                                    Disabled="carouselImages.Count >= 5"
                                                                    Multiple
                                                                    Changed="@(async (e) => await OnImageModuleUploadAsync(e,
                                                                                                                           carouselImages,
                                                                                                                           carouselImages.GroupBy(g => g.ModuleNumber).FirstOrDefault().Key!.Value,
                                                                                                                           CarouselFilePickers[carouselImages.GroupBy(g => g.ModuleNumber).FirstOrDefault().Key!.Value - 1],
                                                                                                                           ImageType.GroupBuyCarouselImage))"
                                                                    ShowMode="FilePickerShowMode.List"
                                                                    Accept=".jpg, .png, .svg, .jpeg, .webp">
                                                            <FileTemplate>
                                                                <Div Flex="Flex.JustifyContent.Between">
                                                                    <Div>
                                                                        <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
                                                                        <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                                                    </Div>
                                                                    <Div Class="ps-2">
                                                                        <Div>
                                                                            @if (context.File.Status is FileEntryStatus.Ready)
                                                                            {
                                                                                <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
                                                                            }
                                                                            else if (context.File.Status is FileEntryStatus.Uploading)
                                                                            {
                                                                                <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
                                                                            }
                                                                            else if (context.File.Status is FileEntryStatus.Uploaded)
                                                                            {
                                                                                <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
                                                                            }
                                                                            else if (context.File.Status is FileEntryStatus.Error)
                                                                            {
                                                                                <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
                                                                            }
                                                                        </Div>
                                                                        <Div>
                                                                            <Icon TextColor="TextColor.Danger" Name="IconName.Delete" class="cursor-pointer" Clicked="context.RemoveFile" />
                                                                        </Div>
                                                                    </Div>
                                                                </Div>
                                                            </FileTemplate>
                                                            <ButtonsTemplate>
                                                                <Progress Value="@CarouselFilePickers[carouselImages.GroupBy(g => g.ModuleNumber).FirstOrDefault().Key!.Value - 1].GetProgressPercentage()" />
                                                            </ButtonsTemplate>
                                                        </FilePicker>
                                                    </Field>
                                                </div>
                                                @if (carouselImages.Count > 0 && carouselImages.Any(a => !a.ImageUrl.IsNullOrEmpty()))
                                                {
                                                    <Div Class="row">
                                                        <Div Class="col-2"></Div>
                                                        <Div Class="col-10">
                                                            <Div Class="image-list-container d-block flex-nowrap">
                                                                <Div Class="d-flex flex-wrap">
                                                                    @foreach (CreateImageDto image in carouselImages.Where(w => !w.ImageUrl.IsNullOrEmpty()).ToList())
                                                                    {
                                                                        <Div Class="image-container">
                                                                            <Image class="blur-image" Source="@image.ImageUrl" Text="Carousel Image" Fluid />
                                                                            <button class="delete-button" @onclick="() => DeleteImageAsync(image.BlobImageName,
                                                                                                                                           carouselImages,
                                                                                                                                           ImageType.GroupBuyCarouselImage)">
                                                                                <i class="fa fa-trash"></i>
                                                                            </button>
                                                                        </Div>
                                                                    }
                                                                </Div>

                                                                @foreach (CreateImageDto createImageDto in carouselImages.Where(w => !w.ImageUrl.IsNullOrEmpty()).ToList())
                                                                {
                                                                    <button type="button"
                                                                            class="btn btn-primary @(carouselImages.IndexOf(createImageDto) > 0 ? "mx-1" : "")"
                                                                            @onclick="() => OpenAddLinkModal(createImageDto)">
                                                                        @L["AddLink"]
                                                                    </button>
                                                                }
                                                            </Div>
                                                        </Div>
                                                    </Div>
                                                }
                                                <Div class="row">
                                                    <Div class="col-2 pt-2 pb-4">
                                                        <label>@L["Style"]</label>
                                                    </Div>
                                                    <Div class="col-10 pt-2 pb-4">
                                                        <select class="form-select form-select"
                                                                @onchange=@((e) => OnStyleCarouselChange(e, carouselImages, carouselImages.GroupBy(g => g.ModuleNumber).FirstOrDefault().Key!.Value))>
                                                            <option>Select Style</option>
                                                            @foreach (object? enumValue in Enum.GetValues(typeof(StyleForCarouselImages)))
                                                            {
                                                                if (enumValue is not null && carouselImages.Any(a => a.CarouselStyle == (StyleForCarouselImages)enumValue)) 
                                                                {
                                                                    <option value="@enumValue" selected>@L[enumValue.ToString()]</option>
                                                                }

                                                                else
                                                                {
                                                                    <option value="@enumValue">@L[enumValue.ToString()]</option>
                                                                }
                                                            }
                                                        </select>
                                                    </Div>
                                                </Div>
                                            </div>
                                            <Divider />
                                        }
                                    }

                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.BannerImages)
                                    {
                                        List<List<CreateImageDto>> bannerModules = BannerModules.Select(s => s.Where(w => w.ModuleNumber == module.ModuleNumber).ToList()).Where(w => w.Count > 0).ToList();

                                        foreach (List<CreateImageDto> bannerImages in bannerModules)
                                        {
                                            <div class="row">
                                                <div class="col-2">
                                                    <label>
                                                        @L["BannerImages"]<Span>
                                                            <Tooltip Text="@L["uploadUpto5Images"]">
                                                                <Icon class="fa-question-circle" />
                                                            </Tooltip>
                                                        </Span>
                                                    </label>
                                                </div>
                                                <div class="col-10 ">
                                                    <Field>
                                                        <FilePicker @ref="BannerFilePickers[bannerImages.GroupBy(g => g.ModuleNumber).FirstOrDefault().Key!.Value - 1]"
                                                                    Changed="@(async (e) => await OnBannerImageModuleUploadAsync(e,
                                                                                                                           bannerImages,
                                                                                                                           bannerImages.GroupBy(g => g.ModuleNumber).FirstOrDefault().Key!.Value,
                                                                                                                           BannerFilePickers[bannerImages.GroupBy(g => g.ModuleNumber).FirstOrDefault().Key!.Value - 1],
                                                                                                                           ImageType.GroupBuyBannerImage))"
                                                                    ShowMode="FilePickerShowMode.List"
                                                                    Accept=".jpg, .png, .svg, .jpeg, .webp">
                                                            <FileTemplate>
                                                                <Div Flex="Flex.JustifyContent.Between">
                                                                    <Div>
                                                                        <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
                                                                        <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                                                    </Div>
                                                                    <Div Class="ps-2">
                                                                        <Div>
                                                                            @if (context.File.Status is FileEntryStatus.Ready)
                                                                            {
                                                                                <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
                                                                            }
                                                                            else if (context.File.Status is FileEntryStatus.Uploading)
                                                                            {
                                                                                <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
                                                                            }
                                                                            else if (context.File.Status is FileEntryStatus.Uploaded)
                                                                            {
                                                                                <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
                                                                            }
                                                                            else if (context.File.Status is FileEntryStatus.Error)
                                                                            {
                                                                                <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
                                                                            }
                                                                        </Div>
                                                                        <Div>
                                                                            <Icon TextColor="TextColor.Danger" Name="IconName.Delete" class="cursor-pointer" Clicked="context.RemoveFile" />
                                                                        </Div>
                                                                    </Div>
                                                                </Div>
                                                            </FileTemplate>
                                                            <ButtonsTemplate>
                                                                <Progress Value="@BannerFilePickers[bannerImages.GroupBy(g => g.ModuleNumber).FirstOrDefault().Key!.Value - 1].GetProgressPercentage()" />
                                                            </ButtonsTemplate>
                                                        </FilePicker>
                                                    </Field>
                                                </div>
                                                @if (bannerImages.Count > 0 && bannerImages.Any(a => !a.ImageUrl.IsNullOrEmpty()))
                                                {
                                                    <Div Class="row">
                                                        <Div Class="col-2"></Div>
                                                        <Div Class="col-10">
                                                            <Div Class="image-list-container d-block flex-nowrap">
                                                                <Div Class="d-flex flex-wrap">
                                                                    @foreach (CreateImageDto image in bannerImages.Where(w => !w.ImageUrl.IsNullOrEmpty()).ToList())
                                                                    {
                                                                        <Div Class="image-container">
                                                                            <Image class="blur-image" Source="@image.ImageUrl" Text="Carousel Image" Fluid />
                                                                            <button class="delete-button" @onclick="() => DeleteImageAsync(image.BlobImageName,
                                                                                                                                            bannerImages,
                                                                                                                                            ImageType.GroupBuyBannerImage)">
                                                                                <i class="fa fa-trash"></i>
                                                                            </button>
                                                                        </Div>
                                                                    }
                                                                </Div>

                                                                @foreach (CreateImageDto createImageDto in bannerImages.Where(w => !w.ImageUrl.IsNullOrEmpty()).ToList())
                                                                {
                                                                    <button type="button"
                                                                            class="btn btn-primary @(bannerImages.IndexOf(createImageDto) > 0 ? "mx-1" : "")"
                                                                            @onclick="() => OpenAddLinkModal(createImageDto)">
                                                                        @L["AddLink"]
                                                                    </button>
                                                                }
                                                            </Div>
                                                        </Div>
                                                    </Div>
                                                }
                                            </div>
                                        }
                                    }

                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.GroupPurchaseOverview)
                                    {
                                        foreach (GroupPurchaseOverviewDto module in GroupPurchaseOverviewModules)
                                        {
                                            <Div Class="row d-flex">
                                                <Div Class="col-6 pb-1">
                                                    <Div Class="col-2 pb-1">
                                                        <Label>@L["Image"] <Span Class="text-danger">*</Span></Label>
                                                    </Div>
                                                    <Field>
                                                        <FilePicker @ref="GroupPurchaseOverviewFilePickers[GroupPurchaseOverviewModules.IndexOf(module)]"
                                                                    Changed="@(async (e) => await OnImageUploadAsync(e,
                                                                                                                     module,
                                                                                                                     GroupPurchaseOverviewFilePickers[GroupPurchaseOverviewModules.IndexOf(module)]))"
                                                                    ShowMode="FilePickerShowMode.List"
                                                                    Accept=".jpg, .png, .svg ,.jpeg,.webp">
                                                            <FileTemplate>
                                                                <Div Flex="Flex.JustifyContent.Between">
                                                                    <Div>
                                                                        <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
                                                                        <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                                                    </Div>
                                                                    <Div Class="ps-2">
                                                                        <Div>
                                                                            @if (context.File.Status is FileEntryStatus.Ready)
                                                                            {
                                                                                <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
                                                                            }
                                                                            else if (context.File.Status is FileEntryStatus.Uploading)
                                                                            {
                                                                                <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
                                                                            }
                                                                            else if (context.File.Status is FileEntryStatus.Uploaded)
                                                                            {
                                                                                <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
                                                                            }
                                                                            else if (context.File.Status is FileEntryStatus.Error)
                                                                            {
                                                                                <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
                                                                            }
                                                                        </Div>
                                                                        <Div>
                                                                            <Icon TextColor="TextColor.Danger"
                                                                                  Name="IconName.Delete"
                                                                                  Class="cursor-pointer"
                                                                                  Clicked="context.RemoveFile" />
                                                                        </Div>
                                                                    </Div>
                                                                </Div>
                                                            </FileTemplate>
                                                            <ButtonsTemplate>
                                                                <Progress Value="@GroupPurchaseOverviewFilePickers[GroupPurchaseOverviewModules.IndexOf(module)].GetProgressPercentage()" />
                                                            </ButtonsTemplate>
                                                        </FilePicker>
                                                    </Field>
                                                    @if (!module.Image.IsNullOrEmpty())
                                                    {
                                                        <Div Class="row">
                                                            <Div Class="col-2"></Div>
                                                            <Div Class="col-12">
                                                                <Div Class="image-list-container">
                                                                    <Div Class="image-container">
                                                                        <Image Class="blur-image" Source="@module.Image" Text="Logo Image" Fluid />
                                                                        <Button Class="delete-button"
                                                                                Clicked="@(async (e) => await DeleteImageAsync(e, module))">
                                                                            <i class="fa fa-trash" />
                                                                        </Button>
                                                                    </Div>
                                                                </Div>
                                                            </Div>
                                                        </Div>
                                                    }
                                                </Div>
                                                <Div Class="col-6">
                                                    <Div Class="col-2 pb-1">
                                                        <Label>@L["Title"] <Span Class="text-danger">*</Span></Label>
                                                    </Div>
                                                    <Div Class="col-12 pb-1">
                                                        <TextEdit @bind-Text="module.Title" />
                                                    </Div>
                                                    <Div Class="col-2 pb-1">
                                                        <Label>@L["SubTitle"]</Label>
                                                    </Div>
                                                    <Div Class="col-12 pb-1">
                                                        <TextEdit @bind-Text="@module.SubTitle" />
                                                    </Div>
                                                    <Div Class="col-2 pb-1">
                                                        <Label>@L["BodyText"]</Label>
                                                    </Div>
                                                    <Div Class="col-12 pb-1">
                                                        <TextEdit @bind-Text="@module.BodyText" />
                                                    </Div>
                                                    <Div Class="col-12 pb-1"></Div>
                                                    <Div Class="col-12 pb-1">
                                                        <Switch TValue="bool"
                                                                @bind-Checked="@module.IsButtonEnable" />
                                                    </Div>

                                                    @if (module.IsButtonEnable)
                                                    {
                                                        <Div Class="col-2 pb-1">
                                                            <Label>@L["ButtonText"] <Span Class="text-danger">*</Span></Label>
                                                        </Div>
                                                        <Div Class="col-12 pb-1">
                                                            <TextEdit @bind-Text="@module.ButtonText" />
                                                        </Div>
                                                        <Div Class="col-2 pb-1">
                                                            <Label>@L["ButtonLink"] <Span Class="text-danger">*</Span></Label>
                                                        </Div>
                                                        <Div Class="col-12 pb-1">
                                                            <TextEdit @bind-Text="@module.ButtonLink" />
                                                        </Div>
                                                    }
                                                </Div>
                                            </Div>
                                        }
                                    }

                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.OrderInstruction)
                                    {
                                        foreach (GroupBuyOrderInstructionDto module in GroupBuyOrderInstructionModules)
                                        {
                                            <Div Class="row d-flex">
                                                <Div Class="col-6 pb-1">
                                                    <Div Class="col-2 pb-1">
                                                        <Label>@L["Image"] <Span Class="text-danger">*</Span></Label>
                                                    </Div>
                                                    <Field>
                                                        <FilePicker @ref="GroupBuyOrderInstructionPickers[GroupBuyOrderInstructionModules.IndexOf(module)]"
                                                                    Changed="@(async (e) => await OnImageUploadAsync(e,
                                                                                                                     module,
                                                                                                                     GroupBuyOrderInstructionPickers[GroupBuyOrderInstructionModules.IndexOf(module)]))"
                                                                    ShowMode="FilePickerShowMode.List"
                                                                    Accept=".jpg, .png, .svg ,.jpeg,.webp">
                                                            <FileTemplate>
                                                                <Div Flex="Flex.JustifyContent.Between">
                                                                    <Div>
                                                                        <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
                                                                        <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                                                    </Div>
                                                                    <Div Class="ps-2">
                                                                        <Div>
                                                                            @if (context.File.Status is FileEntryStatus.Ready)
                                                                            {
                                                                                <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
                                                                            }
                                                                            else if (context.File.Status is FileEntryStatus.Uploading)
                                                                            {
                                                                                <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
                                                                            }
                                                                            else if (context.File.Status is FileEntryStatus.Uploaded)
                                                                            {
                                                                                <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
                                                                            }
                                                                            else if (context.File.Status is FileEntryStatus.Error)
                                                                            {
                                                                                <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
                                                                            }
                                                                        </Div>
                                                                        <Div>
                                                                            <Icon TextColor="TextColor.Danger"
                                                                                  Name="IconName.Delete"
                                                                                  Class="cursor-pointer"
                                                                                  Clicked="context.RemoveFile" />
                                                                        </Div>
                                                                    </Div>
                                                                </Div>
                                                            </FileTemplate>
                                                            <ButtonsTemplate>
                                                                <Progress Value="@GroupBuyOrderInstructionPickers[GroupBuyOrderInstructionModules.IndexOf(module)].GetProgressPercentage()" />
                                                            </ButtonsTemplate>
                                                        </FilePicker>
                                                    </Field>
                                                    @if (!module.Image.IsNullOrEmpty())
                                                    {
                                                        <Div Class="row">
                                                            <Div Class="col-2"></Div>
                                                            <Div Class="col-12">
                                                                <Div Class="image-list-container">
                                                                    <Div Class="image-container">
                                                                        <Image Class="blur-image" Source="@module.Image" Text="Logo Image" Fluid />
                                                                        <Button Class="delete-button"
                                                                                Clicked="@(async (e) => await DeleteImageAsync(e, module))">
                                                                            <i class="fa fa-trash" />
                                                                        </Button>
                                                                    </Div>
                                                                </Div>
                                                            </Div>
                                                        </Div>
                                                    }
                                                </Div>
                                                <Div Class="col-6">
                                                    <Div Class="col-2 pb-1">
                                                        <Label>@L["Title"] <Span Class="text-danger">*</Span></Label>
                                                    </Div>
                                                    <Div Class="col-12 pb-1">
                                                        <TextEdit @bind-Text="module.Title" />
                                                    </Div>
                                                    <Div Class="col-2 pb-1">
                                                        <Label>@L["BodyText"]</Label>
                                                    </Div>
                                                    <Div Class="col-12 pb-1">
                                                        <TextEdit @bind-Text="@module.BodyText" />
                                                    </Div>
                                                </Div>
                                            </Div>
                                        }
                                    }

                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.CountdownTimer)
                                    {
                                        <Div Class="col-12 mb-2">
                                            <InputText class="form-control" @bind-Value="module.AdditionalInfo" />
                                        </Div>
                                    }

                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.ProductRankingCarouselModule)
                                    {
                                        foreach (ProductRankingCarouselModule productModule in ProductRankingCarouselModules)
                                        {
                                            <Div Class="col-12 d-flex">
                                                <Div Class="col-5">
                                                    <Div Class="row mt-2">
                                                        @foreach (ItemWithItemTypeDto selectedItem in productModule.Selected)
                                                        {
                                                            <div class="row-cols-12 mt-@(productModule.Selected.IndexOf(selectedItem) > 0 ? "5" : "2")"
                                                                 style="@(productModule.Selected.IndexOf(selectedItem) > 0 ? "margin-top: 75px !important" : "")">
                                                                <label>Products</label>
                                                                <Autocomplete TItem="ItemWithItemTypeDto"
                                                                              TValue="Guid?"
                                                                              Data="@ItemsList"
                                                                              TextField="@(( item ) => item.Name)"
                                                                              ValueField="@(( item ) => item.Id)"
                                                                              Placeholder="@L["Search..."]"
                                                                              Filter="AutocompleteFilter.StartsWith"
                                                                              CustomFilter="@(( item, searchValue ) => item.Name.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )"
                                                                              HighlightSearch
                                                                              Immediate="true"
                                                                              SelectedValue="selectedItem.Id"
                                                                              SelectedValueChanged="(id) => OnSelectedValueChanged(selectedItem.Item is not null && selectedItem.Item.Id != Guid.Empty ?
                                                                                                                                   selectedItem.Item.Id :
                                                                                                                                   id,
                                                                                                                                   productModule,
                                                                                                                                   selectedItem)">
                                                                    <NotFoundContent> @L["NotFound"] </NotFoundContent>
                                                                </Autocomplete>
                                                            </div>

                                                            @if (selectedItem.Id != Guid.Empty)
                                                            {
                                                                string? firstImage;
                                                                if (selectedItem.ItemType == ItemType.Item)
                                                                {
                                                                    firstImage = selectedItem.Item?.Images?.FirstOrDefault()?.ImageUrl;
                                                                }
                                                                else
                                                                {
                                                                    firstImage = selectedItem.SetItem?.Images?.FirstOrDefault()?.ImageUrl;
                                                                }
                                                                <div class="d-flex mt-3">
                                                                    @if (firstImage != null)
                                                                    {
                                                                        <div class="w-100 text-center">
                                                                            <img src="@firstImage" class="img-fluid" />
                                                                            @if (module.GroupBuyModuleType is GroupBuyModuleType.ProductRankingCarouselModule)
                                                                            {
                                                                                <div class="row mt-2">
                                                                                    <h4 class="text-center mt-2">
                                                                                        <strong>@selectedItem.Name</strong>
                                                                                    </h4>
                                                                                    @if (selectedItem.Item != null)
                                                                                    {
                                                                                        var itemDetails = selectedItem.Item?.ItemDetails;
                                                                                        @if (itemDetails != null && itemDetails.Where(x => x.Attribute1Value != null).Count() > 0)
                                                                                        {
                                                                                            <div class="mt-2">
                                                                                                <select class="form-control dropdown">
                                                                                                    @foreach (var item in itemDetails.DistinctBy(i => i.Attribute1Value))
                                                                                                    {
                                                                                                        <option>
                                                                                                            @item.Attribute1Value
                                                                                                        </option>
                                                                                                    }
                                                                                                </select>
                                                                                            </div>
                                                                                        }
                                                                                        @if (itemDetails != null && itemDetails.Where(x => x.Attribute2Value != null).Count() > 0)
                                                                                        {
                                                                                            <div class="mt-2">
                                                                                                <select class="form-control dropdown">
                                                                                                    @foreach (var item in itemDetails.DistinctBy(i => i.Attribute2Value))
                                                                                                    {
                                                                                                        <option>
                                                                                                            @item.Attribute2Value
                                                                                                        </option>
                                                                                                    }
                                                                                                </select>
                                                                                            </div>
                                                                                        }
                                                                                        @if (itemDetails != null && itemDetails.Where(x => x.Attribute3Value != null).Count() > 0)
                                                                                        {
                                                                                            <div class="mt-2">
                                                                                                <select class="form-control dropdown">
                                                                                                    @foreach (var item in itemDetails.DistinctBy(i => i.Attribute3Value))
                                                                                                    {
                                                                                                        <option>
                                                                                                            @item.Attribute3Value
                                                                                                        </option>
                                                                                                    }
                                                                                                </select>
                                                                                            </div>
                                                                                        }
                                                                                    }
                                                                                </div>
                                                                            }
                                                                        </div>
                                                                    }
                                                                </div>
                                                            }
                                                        }
                                                    </Div>
                                                </Div>
                                                <Div Class="col-1" />
                                                <Div Class="col-6">
                                                    <Div Class="row">
                                                        <Div Class="col-12">
                                                            <Div Class="col-2 pb-1">
                                                                <Label>@L["Carousel"] <Span Class="text-danger">*</Span></Label>
                                                            </Div>
                                                            <Field>
                                                                <FilePicker @ref="ProductRankingCarouselPickers[ProductRankingCarouselModules.IndexOf(productModule)]"
                                                                            Disabled="productModule.Images.Count >= 5"
                                                                            Multiple
                                                                            Changed="@(async (e) => await OnImageModuleUploadAsync(e,
                                                                                                                                   productModule.Images,
                                                                                                                                   ProductRankingCarouselModules.IndexOf(productModule) + 1,
                                                                                                                                   ProductRankingCarouselPickers[ProductRankingCarouselModules.IndexOf(productModule)],
                                                                                                                                   ImageType.GroupBuyProductRankingCarousel))"
                                                                            ShowMode="FilePickerShowMode.List"
                                                                            Accept=".jpg, .png, .svg, .jpeg, .webp">
                                                                    <FileTemplate>
                                                                        <Div Flex="Flex.JustifyContent.Between">
                                                                            <Div>
                                                                                <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
                                                                                <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                                                            </Div>
                                                                            <Div Class="ps-2">
                                                                                <Div>
                                                                                    @if (context.File.Status is FileEntryStatus.Ready)
                                                                                    {
                                                                                        <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
                                                                                    }
                                                                                    else if (context.File.Status is FileEntryStatus.Uploading)
                                                                                    {
                                                                                        <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
                                                                                    }
                                                                                    else if (context.File.Status is FileEntryStatus.Uploaded)
                                                                                    {
                                                                                        <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
                                                                                    }
                                                                                    else if (context.File.Status is FileEntryStatus.Error)
                                                                                    {
                                                                                        <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
                                                                                    }
                                                                                </Div>
                                                                                <Div>
                                                                                    <Icon TextColor="TextColor.Danger" Name="IconName.Delete" class="cursor-pointer" Clicked="context.RemoveFile" />
                                                                                </Div>
                                                                            </Div>
                                                                        </Div>
                                                                    </FileTemplate>
                                                                    <ButtonsTemplate>
                                                                        <Progress Value="@ProductRankingCarouselPickers[ProductRankingCarouselModules.IndexOf(productModule)].GetProgressPercentage()" />
                                                                    </ButtonsTemplate>
                                                                </FilePicker>
                                                            </Field>
                                                            @if (productModule.Images.Count > 0)
                                                            {
                                                                <Div Class="row">
                                                                    <Div Class="col-12">
                                                                        <Div Class="image-list-container d-block flex-nowrap">
                                                                            <Div Class="d-flex flex-wrap">
                                                                                @foreach (CreateImageDto image in productModule.Images)
                                                                                {
                                                                                    <Div Class="image-container">
                                                                                        <Image class="blur-image" Source="@image.ImageUrl" Text="Carousel Image" Fluid />
                                                                                        <button class="delete-button" @onclick="() => DeleteImageAsync(image.BlobImageName,
                                                                                                                                                  productModule.Images,
                                                                                                                                                  ImageType.GroupBuyProductRankingCarousel)">
                                                                                            <i class="fa fa-trash"></i>
                                                                                        </button>
                                                                                    </Div>
                                                                                }
                                                                            </Div>
                                                                        </Div>
                                                                    </Div>
                                                                </Div>
                                                            }
                                                        </Div>
                                                        <Div Class="col-12">
                                                            <Div Class="col-2 pb-1">
                                                                <Label>@L["Title"] <Span Class="text-danger">*</Span></Label>
                                                            </Div>
                                                            <Div Class="col-12 pb-1">
                                                                <TextEdit @bind-Text="productModule.Title" />
                                                            </Div>
                                                            <Div Class="col-2 pb-1">
                                                                <Label>@L["SubTitle"] <Span Class="text-danger">*</Span></Label>
                                                            </Div>
                                                            <Div Class="col-12 pb-1">
                                                                <TextEdit @bind-Text="@productModule.SubTitle" />
                                                            </Div>
                                                            <Div Class="col-2 pb-1">
                                                                <Label>@L["BodyText"]</Label>
                                                            </Div>
                                                            <Div Class="col-12 pb-1">
                                                                <TextEdit @bind-Text="@productModule.Content" />
                                                            </Div>
                                                        </Div>
                                                    </Div>
                                                </Div>
                                            </Div>
                                        }
                                    }

                                    @if (module.GroupBuyModuleType is not GroupBuyModuleType.ProductRankingCarouselModule)
                                    {
                                        <div class="row mt-2">
                                            @if (module.GroupBuyModuleType is GroupBuyModuleType.ProductGroupModule)
                                            {
                                                <Div Class="col-md-6 text-left mb-3">
                                                    <InputText class="form-control" @bind-Value="module.ProductGroupModuleTitle" />
                                                </Div>
                                                <Div Class="col-md-6 text-right mb-3">
                                                    <select class="form-select form-select" @onchange=@((e) => module.ProductGroupModuleImageSize = e.Value.ToString())>
                                                        <option value="">@L["SelectStyle"]</option>
                                                        @foreach (string size in ImageSizes)
                                                        {
                                                            @if (module.ProductGroupModuleImageSize == size)
                                                            {
                                                                <option value="@size" selected>@L[size]</option>
                                                            }

                                                            else
                                                            {
                                                                <option value="@size">@L[size]</option>
                                                            }
                                                        }
                                                    </select>
                                                </Div>
                                            }
                                            @foreach (var selectedItem in module.Selected)
                                            {
                                                <div class="col-@(12 / module.Selected.Count)">
                                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.IndexAnchor)
                                                    {
                                                        <Div Class="col-12 mb-2">
                                                            <InputText class="form-control" @bind-Value="selectedItem.Name"
                                                                       @oninput="(e) => OnSelectedValueChanged(null, module, selectedItem)" />
                                                        </Div>
                                                    }
                                                    else
                                                    {
                                                        <Autocomplete TItem="ItemWithItemTypeDto"
                                                                      TValue="Guid?"
                                                                      Data="@ItemsList"
                                                                      TextField="@(( item ) => item.Name)"
                                                                      ValueField="@(( item ) => item.Id)"
                                                                      Placeholder="@L["Search..."]"
                                                                      Filter="AutocompleteFilter.StartsWith"
                                                                      CustomFilter="@(( item, searchValue ) => item.Name.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )"
                                                                      HighlightSearch
                                                                      Immediate="true"
                                                                      SelectedValue="selectedItem.Id"
                                                                      SelectedValueChanged="(id) => OnSelectedValueChanged(id, module, selectedItem)">
                                                            <NotFoundContent> @L["NotFound"] </NotFoundContent>
                                                        </Autocomplete>
                                                    }
                                                    @if (selectedItem.Id != Guid.Empty)
                                                    {
                                                        string? firstImage;
                                                        if (selectedItem.ItemType == ItemType.Item)
                                                        {
                                                            firstImage = selectedItem.Item?.Images?.FirstOrDefault()?.ImageUrl;
                                                        }
                                                        else
                                                        {
                                                            firstImage = selectedItem.SetItem?.Images?.FirstOrDefault()?.ImageUrl;
                                                        }
                                                        <div class="d-flex mt-3">

                                                            @if (firstImage != null)
                                                            {
                                                                <div class="w-100 text-center">
                                                                    <img src="@firstImage" class="img-fluid" />
                                                                    @if (module.GroupBuyModuleType == GroupBuyModuleType.ProductGroupModule)
                                                                    {
                                                                        <div class="row mt-2">
                                                                            <h4 class="text-center mt-2">
                                                                                <strong>@selectedItem.Name</strong>
                                                                            </h4>
                                                                            @if (selectedItem.Item != null)
                                                                            {
                                                                                var itemDetails = selectedItem.Item?.ItemDetails;
                                                                                @if (itemDetails != null && itemDetails.Where(x => x.Attribute1Value != null).Count() > 0)
                                                                                {
                                                                                    <div class="mt-2">
                                                                                        <select class="form-control dropdown">
                                                                                            @foreach (var item in itemDetails.DistinctBy(i => i.Attribute1Value))
                                                                                            {
                                                                                                <option>
                                                                                                    @item.Attribute1Value
                                                                                                </option>
                                                                                            }
                                                                                        </select>
                                                                                    </div>
                                                                                }
                                                                                @if (itemDetails != null && itemDetails.Where(x => x.Attribute2Value != null).Count() > 0)
                                                                                {
                                                                                    <div class="mt-2">
                                                                                        <select class="form-control dropdown">
                                                                                            @foreach (var item in itemDetails.DistinctBy(i => i.Attribute2Value))
                                                                                            {
                                                                                                <option>
                                                                                                    @item.Attribute2Value
                                                                                                </option>
                                                                                            }
                                                                                        </select>
                                                                                    </div>
                                                                                }
                                                                                @if (itemDetails != null && itemDetails.Where(x => x.Attribute3Value != null).Count() > 0)
                                                                                {
                                                                                    <div class="mt-2">
                                                                                        <select class="form-control dropdown">
                                                                                            @foreach (var item in itemDetails.DistinctBy(i => i.Attribute3Value))
                                                                                            {
                                                                                                <option>
                                                                                                    @item.Attribute3Value
                                                                                                </option>
                                                                                            }
                                                                                        </select>
                                                                                    </div>
                                                                                }
                                                                            }
                                                                        </div>
                                                                    }
                                                                </div>
                                                            }
                                                            @if (module.GroupBuyModuleType == GroupBuyModuleType.ProductDescriptionModule)
                                                            {
                                                                string? ItemDescription;
                                                                if (selectedItem.ItemType == ItemType.Item)
                                                                {
                                                                    ItemDescription = selectedItem.Item?.ItemDescription;
                                                                }
                                                                else
                                                                {
                                                                    ItemDescription = selectedItem.SetItem?.Description;
                                                                }
                                                                <div class="ps-3">
                                                                    <p> @((MarkupString)ItemDescription) </p>
                                                                </div>
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    }
                                </CollapseBody>
                            </Collapse>
                        </Accordion>
                    </div>
                    <div class="py-2"
                         draggable="true"
                         @ondrop="@(()=> Drop(module))"
                         @ondrag="@(()=> StartDrag(module))">
                        <span class="drag-drop-span">
                            <i class="fa-solid fa-bars fa-2xl"></i>
                        </span>
                    </div>
                </div>
            }
        </div>
        <Divider></Divider>
        <div class="row">
            <div class="col-2">
                <fieldLabel>@L["GroupBuyPolicy"]</fieldLabel>
            </div>
            <div class="col-10">
                <div class="col-12">
                    <TextEdit Placeholder="@L["GroupBuyCondition"]" Disabled @bind-Text="EditGroupBuyDto.GroupBuyCondition" MaxLength="60" />
                </div>
                <div class="col-12">
                    @* <Blazored.TextEditor.BlazoredTextEditor @ref="@GroupBuyHtml">
                    <ToolbarContent>
                    <select class="ql-header">
                    <option selected=""></option>
                    <option value="1"></option>
                    <option value="2"></option>
                    <option value="3"></option>
                    <option value="4"></option>
                    <option value="5"></option>
                    </select>
                    <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                    </span>
                    <span class="ql-formats">
                    <button class="ql-link"></button>
                    </span>
                    <span class="ql-formats">
                    <button class="ql-image"></button>
                    </span>
                    <span class="ql-formats">
                    <button class="ql-video"></button>
                    </span>
                    </ToolbarContent>
                    </Blazored.TextEditor.BlazoredTextEditor> *@
                    <textarea rows="5" @bind="@EditGroupBuyDto.GroupBuyConditionDescription" oninput="enforceLineLimit(this)" class="form-control" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
            </div>
            <div class="col-10">
                <div class="col-12">
                    <TextEdit Placeholder="@L["CustomerInformation"]" Disabled @bind-Text="@EditGroupBuyDto.CustomerInformation" MaxLength="60" />
                </div>
                <div class="col-12">
                    <Blazored.TextEditor.BlazoredTextEditor @ref="@CustomerInformationHtml">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-image"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-video"></button>
                            </span>
                        </ToolbarContent>
                    </Blazored.TextEditor.BlazoredTextEditor>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
            </div>
            <div class="col-10">
                <div class="col-12">
                    <TextEdit Placeholder="@L["ExchangePolicy"]" Disabled @bind-Text="@EditGroupBuyDto.ExchangePolicy" MaxLength="60" ShowCount />
                </div>
                <div class=" col-12">
                    <Blazored.TextEditor.BlazoredTextEditor @ref="@ExchangePolicyHtml">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-image"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-video"></button>
                            </span>
                        </ToolbarContent>
                    </Blazored.TextEditor.BlazoredTextEditor>
                </div>
            </div>
        </div>
        <Divider></Divider>
        <div class="row">
            <div class="col-2">
                <fieldLabel>@L["NotifyEmail"]</fieldLabel>
            </div>
            <div class="col-10">
                <div class="col-12">
                    <Blazored.TextEditor.BlazoredTextEditor @ref="@NotifyEmailHtml">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-image"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-video"></button>
                            </span>
                        </ToolbarContent>
                    </Blazored.TextEditor.BlazoredTextEditor>
                </div>
            </div>
        </div>
    </CardBody>

</Card>
<div class="row">
    <div class="col-12 text-lg-end">
        <Button Type="@ButtonType.Button" class="btn btn-danger" Clicked="CloseGroupBuyEdit">@L["Cancel"]</Button>
        <Button Type="@ButtonType.Button" class="btn btn-primary" Clicked="UpdateEntityAsync"><i class="fa fa-check"></i> @L["Save"]</Button>
    </div>
</div>

<Modal @ref="AddLinkModal" Closing="@OnModalClosing">
    <ModalContent IsCentered="true">
        <EditForm Model="@SelectedImageDto" OnValidSubmit="ApplyAddLinkAsync">
            <ModalHeader>
                <ModalTitle>@L["AddLink"]</ModalTitle>
                <CloseButton Clicked="CloseAddLinkModal" />
            </ModalHeader>
            <ModalBody>
                <DataAnnotationsValidator />
                <div class="row my-2">
                    <label class="form-label">@L["AddLink"]</label>
                    <div class="col-12 mb-2">
                        <InputText class="form-control" @bind-Value="@SelectedImageDto.Link" />
                    </div>
                </div>
            </ModalBody>
            <ModalFooter>
                <Button Type="ButtonType.Submit" Class="btn btn-primary">
                    <i class="fa fa-check"></i>
                    @L["Save"]
                </Button>
            </ModalFooter>
        </EditForm>
    </ModalContent>
</Modal>

@code {

}