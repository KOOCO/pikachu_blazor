@page "/GroupBuyManagement/GroupBuyList/Edit/{id}"

@using Kooco.Pikachu.EnumValues;
@using Kooco.Pikachu.GroupBuys;
@using Kooco.Pikachu.Items.Dtos;
@using Microsoft.Extensions.Configuration;
@using Pikachu.Items;
@using Pikachu.Localization;
@using Microsoft.Extensions.Localization;
@using Volo.Abp.AspNetCore.Components.Web
@using System.ComponentModel
@using Blazorise.Components
@using Blazorise.LoadingIndicator;

@inject IGroupBuyAppService AppService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<PikachuResource> L
@inject IMessageService _message
@inject IConfiguration _configuration
@inject IJSRuntime JSRuntime;
<style>
    .row {
        margin-top: 10px;
    }
    .drag-drop-span{
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        max-height: 55px !important;
    }

    .drag-drop-span i{
        cursor: pointer;
    }
</style>
  <h3>@L["EditGroupBuy"]</h3>
<LoadingIndicator @ref="Loading" FullScreen FadeIn></LoadingIndicator>
<Card>
    
 <CardBody>
        <div class="row">
            <div class="col-12">
                <h4>@L["SalesURL"]</h4>  
            </div>
            <div class="row">
                <div class="col-1"></div>
                <div class="col-2">
                    <label>@L["SalesURL1"]
                        <a href="@EditGroupBuyDto.EntryURL" target="_blank" class="text-primary">
                            <i class="fa-solid fa-arrow-up-right-from-square"></i>
                        </a>
                    </label>
                </div>
                <div class="col-7">
                    <TextEdit @bind-Text="@EditGroupBuyDto.EntryURL" ReadOnly />
                </div>
            </div>
             <div class="row">
                  <div class="col-1"></div>
                <div class="col-2">
                    <label>@L["SalesURL2"]</label>
                </div>
                <div class="col-7">
                    <TextEdit @bind-Text="@EditGroupBuyDto.EntryURL2" />
                </div>
            </div>
            <Validations @ref="@EditValidationsRef" Model="@EditGroupBuyDto" ValidateOnLoad="false">
                <div class="row">
                      <div class="col-1"></div>
                    <div class="col-2">
                        <label>@L["ShortCode"]</label>
                    </div>
                    <div class="col-7">
                        <Validation UsePattern>
                            <TextEdit Pattern="^[A-Za-z0-9]{4,12}$" MaxLength="12" @bind-Text="@EditGroupBuyDto.ShortCode">
                                <Feedback>
                                    <ValidationError>@L["ShortCodePatternDoesnotMatch"]</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </Validation>
                    </div>
                    <div class="col-1">
                        <span>
                            @((string.IsNullOrWhiteSpace(EditGroupBuyDto.ShortCode) ? 0 : (0 + EditGroupBuyDto.ShortCode.Count())))/@(12)
                        </span>
                    </div>
                </div>
            </Validations>
        </div>
        <Divider></Divider>
         <div class="row">
            <div class="col-2">
                <label>@L["GroupBuyName"] <span class="text-danger"> *</span></label>
            </div>
            <div class="col-9">
                <TextEdit  MaxLength="@MaxtextCount" @bind-Text="@EditGroupBuyDto.GroupBuyName" />
            </div>
            <div class="col-1">
                <span>
                    @(string.IsNullOrWhiteSpace(EditGroupBuyDto.GroupBuyName) ? 60 : (MaxtextCount - EditGroupBuyDto.GroupBuyName.Count()))/@MaxtextCount
                </span>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                <label>@L["Subject"]</label>
            </div>
            <div class="col-9">
                <TextEdit  MaxLength="@MaxtextCount" @bind-Text="@EditGroupBuyDto.SubjectLine" />
            </div>
                <div class="col-1">
                <span>
                    @(string.IsNullOrWhiteSpace(EditGroupBuyDto.SubjectLine) ? 60 : (MaxtextCount - EditGroupBuyDto.SubjectLine.Count()))/@MaxtextCount
                </span>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                    <label>@L["GroupBuyShortName"]</label>
            </div>
            <div class="col-9">
                <TextEdit  MaxLength="@MaxtextCount" @bind-Text="@EditGroupBuyDto.ShortName" />
            </div>
                <div class="col-1">
                <span>
                    @(string.IsNullOrWhiteSpace(EditGroupBuyDto.ShortName) ? 60 : (MaxtextCount - EditGroupBuyDto.ShortName.Count()))/@MaxtextCount
                </span>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                <label>@L["GroupBuyLogo"]
                    <span class="text-danger"> *</span>
                </label>
            </div>
            <div class="col-10">
                <Field>
                    <FilePicker @ref="LogoPickerCustom"
                                Changed="OnLogoUploadAsync"
                                ShowMode="FilePickerShowMode.List"
                                Accept=".jpg, .png, .svg,.jpeg,.webp">
                        <FileTemplate>
                            <Div Flex="Flex.JustifyContent.Between">
                                <Div>
                                    <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
                                    <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                </Div>
                                <Div Class="ps-2">
                                    <Div>
                                            @if (context.File.Status == FileEntryStatus.Ready)
                                        {
                                            <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Uploading)
                                        {
                                            <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Uploaded)
                                        {
                                            <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Error)
                                        {
                                            <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
                                        }
                                    </Div>
                                    <Div>
                                        <Icon TextColor="TextColor.Danger" Name="IconName.Delete" class="cursor-pointer" Clicked="context.RemoveFile" />
                                    </Div>
                                </Div>
                            </Div>
                        </FileTemplate>
                        <ButtonsTemplate>
                            <Progress Value="@LogoPickerCustom.GetProgressPercentage()" />
                        </ButtonsTemplate>
                    </FilePicker>
                </Field>
            </div>
            @if(EditGroupBuyDto.LogoURL != null)
            {
                <div Class="row">
                    <div class="col-2"></div>
                    <div class="col-10">
                        <div class="image-list-container">
                            <div class="image-container">
                                <Image class="blur-image" Source="@EditGroupBuyDto.LogoURL" Text="Logo Image" Fluid />
                                <button class="delete-button" @onclick="() => DeleteLogoAsync(EditGroupBuyDto.BannerURL)">
                                    <i class="fa fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="row">
            <div class="col-2">
                <label>@L["GroupBuyBanner"]</label>
            </div>
            <div class="col-10">
                <Field>
                    <FilePicker @ref="BannerPickerCustom"
                                Changed="OnBannerUploadAsync"
                                ShowMode="FilePickerShowMode.List"
                                Accept=".jpg, .png, .svg ,.jpeg,.webp">
                        <FileTemplate>
                            <Div Flex="Flex.JustifyContent.Between">
                                <Div>
                                    <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
                                    <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                </Div>
                                <Div Class="ps-2">
                                    <Div>
                                            @if (context.File.Status == FileEntryStatus.Ready)
                                        {
                                            <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Uploading)
                                        {
                                            <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Uploaded)
                                        {
                                            <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Error)
                                        {
                                            <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
                                        }
                                    </Div>
                                    <Div>
                                        <Icon TextColor="TextColor.Danger" Name="IconName.Delete" class="cursor-pointer" Clicked="context.RemoveFile" />
                                    </Div>
                                </Div>
                            </Div>
                        </FileTemplate>
                        <ButtonsTemplate>
                            <Progress Value="@BannerPickerCustom.GetProgressPercentage()" />
                        </ButtonsTemplate>
                    </FilePicker>
                </Field>
            </div>
            @if(EditGroupBuyDto.BannerURL != null)
            {
                <div class="row">
                    <div class="col-2"></div>
                    <div class="col-10">
                        <div class="image-list-container">
                            <div class="image-container">
                                <Image class="blur-image" Source="@EditGroupBuyDto.BannerURL" Text="Logo Image" Fluid />
                                <button class="delete-button" @onclick="() => DeleteBannerAsync(EditGroupBuyDto.BannerURL)">
                                    <i class="fa fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="row">
            <div class="col-2">
                <label>@L["CarouselImages"]<Span><Tooltip Text="@L["uploadUpto5Images"]">
                <Icon class="fa-question-circle "></Icon></Tooltip></Span></label>
            </div>
            <div class="col-10">
                <Field>
                    <FilePicker @ref="CarouselPickerCustom"
                                Multiple
                                 Disabled="CarouselImages.Count>=5"
                                Changed="OnCarouselUploadAsync"
                                ShowMode="FilePickerShowMode.List"
                                Accept=".jpg, .png, .svg ,.jpeg,.webp">
                        <FileTemplate>
                            <Div Flex="Flex.JustifyContent.Between">
                                <Div>
                                    <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
                                    <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                </Div>
                                <Div Class="ps-2">
                                    <Div>
                                            @if (context.File.Status == FileEntryStatus.Ready)
                                        {
                                            <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Uploading)
                                        {
                                            <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Uploaded)
                                        {
                                            <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Error)
                                        {
                                            <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
                                        }
                                    </Div>
                                    <Div>
                                        <Icon TextColor="TextColor.Danger" Name="IconName.Delete" class="cursor-pointer" Clicked="context.RemoveFile" />
                                    </Div>
                                </Div>
                            </Div>
                        </FileTemplate>
                        <ButtonsTemplate>
                            <Progress Value="@CarouselPickerCustom.GetProgressPercentage()" />
                        </ButtonsTemplate>
                    </FilePicker>
                </Field>

            </div>
            @if(CarouselImages.Count > 0)
            {
                <div Class="row">
                    <div class="col-2"></div>
                    <div class="col-10">
                        <div class="image-list-container">
                            @foreach (var image in CarouselImages)
                            {
                                <div class="image-container">
                                    <Image class="blur-image" Source="@image.ImageUrl" Text="Carousel Image" Fluid />
                                    <button class="delete-button" @onclick="() => DeleteImageAsync(image.BlobImageName)">
                                        <i class="fa fa-trash"></i>
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
        <Divider></Divider>

        <div class="row">
            <div class="col-2">@L["GroupBuyTime"]</div>
            <div class="col-4">
                <DateEdit Class="form-control" InputMode="DateInputMode.DateTime" @bind-Date=EditGroupBuyDto.StartTime Placeholder="@L["StartDate"].ToString()" TValue="DateTime?"/>
            </div>
            <div class="col-4">
               <DateEdit Class="form-control" InputMode="DateInputMode.DateTime" @bind-Date=EditGroupBuyDto.EndTime Placeholder="@L["EndDate"].ToString()" TValue="DateTime?"  />
            </div>
        </div>
        <div class="row">
            <div class="col-2">@L["Logistic"]</div>
            <div class="col-2">@L["FreeShipping"]</div>
            <div class="col-2"> <Switch TValue="bool" @bind-Checked="@EditGroupBuyDto.FreeShipping"></Switch></div>
                 <div class="col-1">@L["Threshold"]</div>
            <div class="col-2">  <InputNumber id="h-threshold" class="form-control" @bind-Value="EditGroupBuyDto.FreeShippingThreshold" DisplayName="Free Shipping Threshold"></InputNumber></div>
       
        </div>
          <div class="row">
            <div class="col-2"></div>
            <div class="col-2">@L["AllowShipToOuterIsland"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@EditGroupBuyDto.AllowShipToOuterTaiwan"></Switch></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">@L["AllowShipToOverSea"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@EditGroupBuyDto.AllowShipOversea"></Switch></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                @L["ShippingMethod"] <span class="text-danger"> *</span>
            </div>
            <div class="col-8">
                @if(EditGroupBuyDto.AllowShipToOuterTaiwan && !EditGroupBuyDto.AllowShipOversea)
            {
             @foreach(var item in Enum.GetNames(typeof(DeliveryMethod)))
              {
                        if (item == Enum.GetName(DeliveryMethod.SevenToElevenC2C) || item == Enum.GetName(DeliveryMethod.SevenToEleven1) || item == Enum.GetName(DeliveryMethod.BlackCat1) || item == Enum.GetName(DeliveryMethod.BlackCatFreeze) || item == Enum.GetName(DeliveryMethod.BlackCatFrozen))
                  {
               <label for="@item" class="form-label ">
                                <input type="checkbox" class="form-check-input me-1" id="@item" checked="@((EditGroupBuyDto.ExcludeShippingMethod != null) && (EditGroupBuyDto.ExcludeShippingMethod.Contains(item)))" @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                @L[item]
                            </label>
              }
              }
            }
            else{
              @foreach(var item in Enum.GetNames(typeof(DeliveryMethod)))
              {
               <label for="@item" class="form-label">
                                <input type="checkbox" class="form-check-input me-1" id="@item" disabled="@((EditGroupBuyDto.ExcludeShippingMethod != null) && (EditGroupBuyDto.ExcludeShippingMethod.Contains("DeliveredByStore"))&&item!="DeliveredByStore")" checked="@((EditGroupBuyDto.ExcludeShippingMethod != null) && (EditGroupBuyDto.ExcludeShippingMethod.Contains(item)))" @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                @L[item]
                            </label>
              }
           }
            </div>
        </div>
      
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">@L["DeliveryTimePreferance"]</div>
         <div class="col-8">
                    <label class="form-label">@L["SelfPickup"]<span class="text-danger"> </span></label>
                </div>
                <div class="col-2"></div>
                <div class="col-2"></div>
                <div class="col-8">
                    @if (DeliveryTimeConts.SelfPickUp != null)
                    {
                        @foreach(string island in DeliveryTimeConts.SelfPickUp)
                        {    
                            @if ((EditGroupBuyDto.ExcludeShippingMethod is not null) && 
                                 (EditGroupBuyDto.ExcludeShippingMethod.Contains("SelfPickup")))
                            {
                                <label for="@(island)_SelfPickUp" class="form-label">
                                    <input type="checkbox" 
                                           class="form-check-input me-1" 
                                           id="@island" 
                                           disabled="@(island is not PikachuResource.UnableToSpecifyDuringPeakPeriods ? 
                                                        IsUnableToSpecifyDuringPeakPeriodsForSelfPickups :
                                                        false)"
                                           checked="@(EditGroupBuyDto.SelfPickupDeliveryTime is not null && 
                                                      EditGroupBuyDto.SelfPickupDeliveryTime.Contains(island))" 
                                           @onchange="(value) => SelfPickupDeliveryTimeCheckedChange(island, value)" />
                                        @L[island]
                                </label>
                            }
                            else
                            {
                                <label for="@(island)_SelfPickUp" class="form-label">
                                    <input disabled 
                                           type="checkbox" 
                                           class="form-check-input me-1" 
                                           id="@island" 
                                           checked="@(EditGroupBuyDto.SelfPickupDeliveryTime is not null && 
                                                      EditGroupBuyDto.SelfPickupDeliveryTime.Contains(island))" 
                                           @onchange="(value) => SelfPickupDeliveryTimeCheckedChange(island, value)" />
                                        @L[island]
                                </label> 
                            }
                        }
                    }
                </div>
                    <div class="col-2"></div>
            <div class="col-2"></div>
         <div class="col-8">
                @if (EditGroupBuyDto.ExcludeShippingMethod != null && EditGroupBuyDto.ExcludeShippingMethod.Contains("BlackCat1"))
                {
                    <label class="form-label">@L["BlackCat"]<span class="text-danger"> </span></label>
                }
                else if (EditGroupBuyDto.ExcludeShippingMethod != null && EditGroupBuyDto.ExcludeShippingMethod.Contains("BlackCatFreeze"))
                {
                    <label class="form-label">@L["BlackCatFreeze"]<span class="text-danger"> </span></label>
                }
                                 else if (EditGroupBuyDto.ExcludeShippingMethod != null && EditGroupBuyDto.ExcludeShippingMethod.Contains("BlackCatFrozen"))
                {
                    <label class="form-label">@L["BlackCatFrozen"]<span class="text-danger"> </span></label>
                }
                else
                {
                    <label class="form-label">@L["BlackCat"]<span class="text-danger"> </span></label>
                }
                </div>
                <div class="col-2"></div>
                <div class="col-2"></div>
                <div class="col-8">
                    @if (DeliveryTimeConts.BlackCat is not null)
                    {
                        @foreach(string island in DeliveryTimeConts.BlackCat)
                        {
                            @if ((EditGroupBuyDto.ExcludeShippingMethod is not null) && 
                                ((EditGroupBuyDto.ExcludeShippingMethod.Contains("BlackCat1")) || 
                                (EditGroupBuyDto.ExcludeShippingMethod.Contains("BlackCatFreeze")) || 
                                (EditGroupBuyDto.ExcludeShippingMethod.Contains("BlackCatFrozen"))))
                            {
                                <label for="@island" class="form-label">
                                    <input type="checkbox" class="form-check-input me-1" id="@island" checked="@(EditGroupBuyDto.BlackCatDeliveryTime != null && EditGroupBuyDto.BlackCatDeliveryTime.Contains(island))" @onchange="(value) => BlackCatDeliveryTimeCheckedChange(island, value)"   />
                                    @L[island]
                                </label>
                            }
                            else
                            {
                                <label for="@island" class="form-label">
                                      <input disabled type="checkbox" class="form-check-input me-1" id="@island" checked="@(EditGroupBuyDto.BlackCatDeliveryTime != null && EditGroupBuyDto.BlackCatDeliveryTime.Contains(island))" @onchange="(value) => BlackCatDeliveryTimeCheckedChange(island, value)"   />
                                      @L[island]
                                </label>
                            
                            }
                        }
                    }
                </div>
                            <div class="col-2"></div>
            <div class="col-2"></div>
         <div class="col-8">
                    <label class="form-label">@L["HomeDelivery"]<span class="text-danger"> </span></label>
                </div>
                <div class="col-2"></div>
                <div class="col-2"></div>
                <div class="col-8">
                    @if (DeliveryTimeConts.HomeDelivery != null)
                    {
                        @foreach(string island in DeliveryTimeConts.HomeDelivery)
                        {
                            @if ((EditGroupBuyDto.ExcludeShippingMethod is not null) && 
                                 (EditGroupBuyDto.ExcludeShippingMethod.Contains("HomeDelivery")))
                            {
                                <label for="@(island)_HomeDelivery" class="form-label">
                                    <input type="checkbox" 
                                           class="form-check-input me-1" 
                                           id="@island" 
                                           disabled="@(island is not PikachuResource.UnableToSpecifyDuringPeakPeriods ?
                                                    IsUnableToSpecifyDuringPeakPeriodsForHomeDelivery :
                                                    false)"
                                           checked="@(EditGroupBuyDto.HomeDeliveryDeliveryTime is not null && 
                                                      EditGroupBuyDto.HomeDeliveryDeliveryTime.Contains(island))" 
                                           @onchange="(value) => HomeDeliveryTimeCheckedChange(island, value)"   />
                                    @L[island]
                                </label>
                            }
                            else{
                                <label for="@(island)_HomeDelivery" class="form-label">
                                       <input disabled 
                                              type="checkbox" 
                                              class="form-check-input me-1" 
                                              id="@island" 
                                              checked="@(EditGroupBuyDto.HomeDeliveryDeliveryTime is not null && 
                                                         EditGroupBuyDto.HomeDeliveryDeliveryTime.Contains(island))" 
                                              @onchange="(value) => HomeDeliveryTimeCheckedChange(island, value)"   />
                                       @L[island]
                                </label>
                            
                            }
                        }
                    }
                </div>
            <div class="col-2"></div>
            <div class="col-2"></div>
         <div class="col-8">
                    <label class="form-label">@L["DeliveredByStore"]<span class="text-danger"> </span></label>
                </div>
                <div class="col-2"></div>
                <div class="col-2"></div>
                <div class="col-8">
                    @if (DeliveryTimeConts.DeliveredByStore != null)
                    {
                        @foreach(string island in DeliveryTimeConts.DeliveredByStore)
                        {
                            @if ((EditGroupBuyDto.ExcludeShippingMethod is not null) && 
                                 (EditGroupBuyDto.ExcludeShippingMethod.Contains("DeliveredByStore")))
                            {
                                <label for="@(island)_DeliveredByStore" class="form-label">
                                    <input type="checkbox" 
                                           class="form-check-input me-1" 
                                           id="@island"
                                           disabled="@(island is not PikachuResource.UnableToSpecifyDuringPeakPeriods ?
                                                        IsUnableToSpecifyDuringPeakPeriodsForDeliveredByStore :
                                                        false)"
                                           checked="@(EditGroupBuyDto.DeliveredByStoreDeliveryTime is not null && 
                                                      EditGroupBuyDto.DeliveredByStoreDeliveryTime.Contains(island))" 
                                           @onchange="(value) => DeliveredByStoreTimeCheckedChange(island, value)"   />
                                    @L[island]
                                </label>
                            }
                            else
                            {
                                <label for="@(island)_DeliveredByStore" class="form-label">
                                       <input disabled 
                                              type="checkbox" 
                                              class="form-check-input me-1" 
                                              id="@island" 
                                              checked="@(EditGroupBuyDto.DeliveredByStoreDeliveryTime is not null && 
                                                         EditGroupBuyDto.DeliveredByStoreDeliveryTime.Contains(island))" 
                                              @onchange="(value) => DeliveredByStoreTimeCheckedChange(island, value)"   />
                                       @L[island]
                                </label>
                            
                            }
                        }
                    }
                </div>
            </div>
        <div class="row">
            <div class="col-2">@L["Gateway"]</div>
            <div class="col-2">@L["PaymentMethod"] <span class="text-danger"> *</span></div>
            <div class="col-4">  
               
                    <Check   TValue="bool" @bind-Checked="@CreditCard">@L["CreditCard"]</Check>
                   <Check  TValue="bool" @bind-Checked="@BankTransfer">@L["BankTransfer"]</Check>
               
            </div>
        </div>
       
        <div class="row">
            <div class="col-2">@L["Invoice"]</div>
            <div class="col-2">@L["IssueInvoice"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@EditGroupBuyDto.IssueInvoice"></Switch></div>
        </div>
      @*   <div class="row">
            <div class="col-2"></div>
            <div class="col-2 form-label">@L["AutoIssueTriplicateInvoice"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@EditGroupBuyDto.AutoIssueTriplicateInvoice"></Switch></div>
        </div> *@
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2 form-label">@L["InvoiceComment"]</div>
            <div class="col-8"> 
                <InputTextArea class="form-control"   maxlength="200" @bind-Value="@EditGroupBuyDto.InvoiceNote"></InputTextArea>
            </div>
        </div>
          <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["TaxType"]</label>
            </div>
            <div class="col-5">
                   <Select TValue="TaxType" Class="form-select"
                            @bind-SelectedValue="@EditGroupBuyDto.TaxType">
                                @foreach (var enumValue in Enum.GetValues(typeof(TaxType)))
                                {
                                    <SelectItem Value="@enumValue">@L[enumValue.ToString()]</SelectItem>
                                }
                            </Select>
            </div>
        </div>
        <Divider></Divider>
        <div class="row">
            <div class="col-2">@L["AdvanceSetting"]</div>
            <div class="col-2 form-label">@L["HideCredention"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@EditGroupBuyDto.ProtectPrivacyData"></Switch></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2 form-label">@L["EnterprisePurchase"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@EditGroupBuyDto.IsEnterprise"></Switch></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["InviteCode"]</label>
            </div>
            <div class="col-5">
                <TextEdit @bind-Text="@EditGroupBuyDto.InviteCode" />
            </div>
        </div>
         <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["ProfitShare"]</label>
            </div>
            <div class="col-5">
                <InputNumber class="form-control" @bind-Value="@EditGroupBuyDto.ProfitShare" />
            </div>
        </div>
       
     @*    <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["FaceBookPixelID"]</label>
            </div>
            <div class="col-5">
                <InputNumber class="form-control" @bind-Value="@EditGroupBuyDto.MetaPixelNo" />
            </div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["FaceBookID"]</label>
            </div>
            <div class="col-5">
                <TextEdit @bind-Text="@EditGroupBuyDto.FBID" />
            </div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["IGID"]</label>
            </div>
            <div class="col-5">
                <TextEdit  @bind-Text="@EditGroupBuyDto.IGID" />
            </div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["LINEID"]</label>
            </div>
            <div class="col-5">
                <TextEdit  @bind-Text="@EditGroupBuyDto.LineID" />
            </div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["GAID"]</label>
            </div>
            <div class="col-5">
                <TextEdit  @bind-Text="@EditGroupBuyDto.GAID" />
            </div>
        </div>
        <div class="row">
            <div class="col-2"></div>
             <div class="col-2">
                <label>@L["GTM"]</label>
            </div>
            <div class="col-5">
                <TextEdit  @bind-Text="@EditGroupBuyDto.GTM" />
            </div>
        </div> *@
        <Divider></Divider>
        <div class="row">
            <div class="col-2"><label>@L["AddModule"]</label></div>
            <div class="col-3">
                @if (CollapseItem.Count < 20)
                {
                    <Dropdown>
                        <DropdownToggle Color="Color.Primary">
                            @L["SelectModule"]
                        </DropdownToggle>
                        <DropdownMenu>
                            @foreach (GroupBuyModuleType groupBuyDropdownValue in Enum.GetValues(typeof(GroupBuyModuleType)))
                            {
                                <DropdownItem Clicked='@(()=>AddProductItem(@groupBuyDropdownValue))'>
                                    @L[groupBuyDropdownValue.ToString()]
                                </DropdownItem>
                            }
                        </DropdownMenu>
                    </Dropdown>
                }
            </div>
        </div>
        <div ondragover="event.preventDefault();">
            @foreach (var module in CollapseItem)
            {
                <div class="d-flex">
                    <div class="p-2 flex-grow-1">
                        <Accordion>
                            <Collapse VisibleChanged="(e) => OnCollapseVisibleChanged(module, e)">
                                <CollapseHeader>
                                    <AccordionToggle>
                                        <i class="fa fa-trash text-danger me-2" @onclick="@(()=>RemoveCollapseItem(@module.Index))"></i>
                                        @L[module.GroupBuyModuleType.ToString()]
                                    </AccordionToggle>
                                </CollapseHeader>
                                <CollapseBody>
                                    @if(module.GroupBuyModuleType == GroupBuyModuleType.ProductGroupModule)
                                        {
                                            <div class="d-flex justify-content-end">
                                                <div style="width: 60px;">
                                                    <select class="form-control form-control-sm" @onchange="(e) => OnProductGroupValueChange(e, module)">
                                                        @if (module.Selected.Count == 3)
                                                        {
                                                            <option selected="selected" value="3">3</option>
                                                            <option value="4">4</option>
                                                        } 
                                                        else if (module.Selected.Count == 4)
                                                        {
                                                            <option value="3">3</option>
                                                            <option selected="selected" value="4">4</option>
                                                        }
                                                    </select>
                                                </div>
                                            </div>

                                        }

                                    <div class="row mt-2">
                                        @foreach(var selectedItem in module.Selected)
                                        {
                                            <div class="col-@(12 / module.Selected.Count)">
                                                @if(module.GroupBuyModuleType == GroupBuyModuleType.IndexAnchor)
                                                {
                                                    <Autocomplete 
                                                                TItem="ItemWithItemTypeDto"
                                                                TValue="Guid?"
                                                                Data="@ItemsList.Where(x => x.ItemType == ItemType.Item)"
                                                                TextField="@(( item ) => item.Name)"
                                                                ValueField="@(( item ) => item.Id)"
                                                                Placeholder="Search..."
                                                                Filter="AutocompleteFilter.StartsWith"
                                                                CustomFilter="@(( item, searchValue ) => item.Name.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )"
                                                                HighlightSearch
                                                                Immediate="true"
                                                                SelectedValue="selectedItem.Id"
                                                                @bind-SelectedText="@selectedItem.Name"
                                                                SelectedValueChanged="(id) => OnSelectedValueChanged(id, module, selectedItem)"
                                                                FreeTyping>
                                                            <NotFoundContent> @L["NotFound"] </NotFoundContent>
                                                    </Autocomplete>
                                                    @if(selectedItem.Id == Guid.Empty)
                                                    {
                                                        <h4 class="p-2 d-inline-block">@selectedItem.Name</h4>
                                                    }
                                                }
                                                else
                                                {
                                                    <Autocomplete 
                                                                TItem="ItemWithItemTypeDto"
                                                                TValue="Guid?"
                                                                Data="@ItemsList"
                                                                TextField="@(( item ) => item.Name)"
                                                                ValueField="@(( item ) => item.Id)"
                                                                Placeholder="Search..."
                                                                Filter="AutocompleteFilter.StartsWith"
                                                                CustomFilter="@(( item, searchValue ) => item.Name.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )"
                                                                HighlightSearch
                                                                Immediate="true"
                                                                SelectedValue="selectedItem.Id"
                                                                SelectedValueChanged="(id) => OnSelectedValueChanged(id, module, selectedItem)">
                                                            <NotFoundContent> @L["NotFound"] </NotFoundContent>
                                                    </Autocomplete>
                                                }
                                                @if (selectedItem.Id != Guid.Empty)
                                                {
                                                    string? firstImage;
                                                    if (selectedItem.ItemType==ItemType.Item)
                                                    {
                                                        firstImage = selectedItem.Item?.Images?.FirstOrDefault()?.ImageUrl;
                                                    }
                                                    else
                                                    {
                                                        firstImage = selectedItem.SetItem?.Images?.FirstOrDefault()?.ImageUrl;
                                                    }
                                                     <div class="d-flex mt-3">

                                                        @if(firstImage != null)
                                                        {
                                                            <div class="w-100 text-center">
                                                                <img src="@firstImage" class="img-fluid" />
                                                                @if(module.GroupBuyModuleType == GroupBuyModuleType.ProductGroupModule)
                                                                {
                                                                    <div class="row mt-2">
                                                                        <h4 class="text-center mt-2">
                                                                            <strong>@selectedItem.Name</strong>
                                                                        </h4>
                                                                        @if (selectedItem.Item != null)
                                                                        {
                                                                            var itemDetails = selectedItem.Item?.ItemDetails;
                                                                            @if (itemDetails != null && itemDetails.Where(x => x.Attribute1Value != null).Count() > 0)
                                                                            {
                                                                                <div class="mt-2">
                                                                                    <select class="form-control dropdown">
                                                                                        @foreach (var item in itemDetails.DistinctBy(i => i.Attribute1Value))
                                                                                        {
                                                                                            <option>
                                                                                                @item.Attribute1Value
                                                                                            </option>
                                                                                        }
                                                                                    </select>
                                                                                </div>
                                                                            }
                                                                            @if (itemDetails != null && itemDetails.Where(x => x.Attribute2Value != null).Count() > 0)
                                                                            {
                                                                                <div class="mt-2">
                                                                                    <select class="form-control dropdown">
                                                                                        @foreach (var item in itemDetails.DistinctBy(i => i.Attribute2Value))
                                                                                        {
                                                                                            <option>
                                                                                                @item.Attribute2Value
                                                                                            </option>
                                                                                        }
                                                                                    </select>
                                                                                </div>
                                                                            }
                                                                            @if (itemDetails != null && itemDetails.Where(x => x.Attribute3Value != null).Count() > 0)
                                                                            {
                                                                                <div class="mt-2">
                                                                                    <select class="form-control dropdown">
                                                                                        @foreach (var item in itemDetails.DistinctBy(i => i.Attribute3Value))
                                                                                        {
                                                                                            <option>
                                                                                                @item.Attribute3Value
                                                                                            </option>
                                                                                        }
                                                                                    </select>
                                                                                </div>
                                                                            }
                                                                        } 
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                        @if (module.GroupBuyModuleType == GroupBuyModuleType.ProductDescriptionModule)
                                                        {
                                                            string? ItemDescription;
                                                            if (selectedItem.ItemType == ItemType.Item)
                                                            {
                                                                 ItemDescription = selectedItem.Item?.ItemDescription;
                                                            }
                                                            else
                                                            {
                                                                 ItemDescription = selectedItem.SetItem?.Description;
                                                            }
                                                            <div class="ps-3">
                                                                <p> @((MarkupString)ItemDescription) </p>
                                                            </div>
                                                        }
                                                    </div> 
                                                }
                                            </div>
                                        }
                                    </div>
                                </CollapseBody>
                            </Collapse>
                        </Accordion>
                    </div>
                    <div class="py-2"
                            draggable="true"
                            @ondrop="@(()=> Drop(module))" 
                            @ondrag="@(()=> StartDrag(module))"
                            >
                        <span class="drag-drop-span">
                            <i class="fa-solid fa-bars fa-2xl"></i>
                        </span>
                    </div>
                </div>
            }
        </div>
        <Divider></Divider>
        <div class="row">
            <div class="col-2">
                <fieldLabel>@L["GroupBuyPolicy"]</fieldLabel>
            </div>
            <div class="col-10">
                <div class="col-12">
                    <TextEdit Placeholder="@L["GroupBuyCondition"]" Disabled @bind-Text="EditGroupBuyDto.GroupBuyCondition" MaxLength="60"  />
                </div>
                <div class="col-12">
                    <Blazored.TextEditor.BlazoredTextEditor @ref="@GroupBuyHtml">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-image"></button>
                            </span>
                             <span class="ql-formats">
                                <button class="ql-video"></button>
                            </span>
                        </ToolbarContent>
                    </Blazored.TextEditor.BlazoredTextEditor>
       
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
            </div>
            <div class="col-10">
                <div class="col-12">
                     <TextEdit Placeholder="@L["CustomerInformation"]" Disabled @bind-Text="@EditGroupBuyDto.CustomerInformation" MaxLength="60"  />
                </div>
                <div class="col-12">
                     <Blazored.TextEditor.BlazoredTextEditor @ref="@CustomerInformationHtml">
                         <ToolbarContent>
                             <select class="ql-header">
                                 <option selected=""></option>
                                 <option value="1"></option>
                                 <option value="2"></option>
                                 <option value="3"></option>
                                 <option value="4"></option>
                                 <option value="5"></option>
                             </select>
                             <span class="ql-formats">
                                 <button class="ql-bold"></button>
                                 <button class="ql-italic"></button>
                                 <button class="ql-underline"></button>
                                 <button class="ql-strike"></button>
                             </span>
                             <span class="ql-formats">
                                 <select class="ql-color"></select>
                                 <select class="ql-background"></select>
                             </span>
                             <span class="ql-formats">
                                 <button class="ql-list" value="ordered"></button>
                                 <button class="ql-list" value="bullet"></button>
                             </span>
                             <span class="ql-formats">
                                 <button class="ql-link"></button>
                             </span>
                             <span class="ql-formats">
                                 <button class="ql-image"></button>
                             </span>
                              <span class="ql-formats">
                                 <button class="ql-video"></button>
                             </span>
                         </ToolbarContent>
                     </Blazored.TextEditor.BlazoredTextEditor>
                 </div>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
            </div>
            <div class="col-10">
                <div class="col-12">
                    <TextEdit Placeholder="@L["ExchangePolicy"]" Disabled @bind-Text="@EditGroupBuyDto.ExchangePolicy" MaxLength="60" ShowCount />
                </div>
                <div class=" col-12">
                    <Blazored.TextEditor.BlazoredTextEditor @ref="@ExchangePolicyHtml">
                         <ToolbarContent>
                             <select class="ql-header">
                                 <option selected=""></option>
                                 <option value="1"></option>
                                 <option value="2"></option>
                                 <option value="3"></option>
                                 <option value="4"></option>
                                 <option value="5"></option>
                             </select>
                             <span class="ql-formats">
                                 <button class="ql-bold"></button>
                                 <button class="ql-italic"></button>
                                 <button class="ql-underline"></button>
                                 <button class="ql-strike"></button>
                             </span>
                             <span class="ql-formats">
                                 <select class="ql-color"></select>
                                 <select class="ql-background"></select>
                             </span>
                             <span class="ql-formats">
                                 <button class="ql-list" value="ordered"></button>
                                 <button class="ql-list" value="bullet"></button>
                             </span>
                             <span class="ql-formats">
                                 <button class="ql-link"></button>
                             </span>
                             <span class="ql-formats">
                                 <button class="ql-image"></button>
                             </span>
                              <span class="ql-formats">
                                 <button class="ql-video"></button>
                             </span>
                         </ToolbarContent>
                     </Blazored.TextEditor.BlazoredTextEditor>
                </div>
            </div>
        </div>
        <div class="row">
             <div class="col-2">
                 <fieldLabel>@L["NotifyEmail"]</fieldLabel>
             </div>
             <div class="col-10">
                 <div class="col-12">
                     <Blazored.TextEditor.BlazoredTextEditor @ref="@NotifyEmailHtml">
                         <ToolbarContent>
                             <select class="ql-header">
                                 <option selected=""></option>
                                 <option value="1"></option>
                                 <option value="2"></option>
                                 <option value="3"></option>
                                 <option value="4"></option>
                                 <option value="5"></option>
                             </select>
                             <span class="ql-formats">
                                 <button class="ql-bold"></button>
                                 <button class="ql-italic"></button>
                                 <button class="ql-underline"></button>
                                 <button class="ql-strike"></button>
                             </span>
                             <span class="ql-formats">
                                 <select class="ql-color"></select>
                                 <select class="ql-background"></select>
                             </span>
                             <span class="ql-formats">
                                 <button class="ql-list" value="ordered"></button>
                                 <button class="ql-list" value="bullet"></button>
                             </span>
                             <span class="ql-formats">
                                 <button class="ql-link"></button>
                             </span>
                             <span class="ql-formats">
                                 <button class="ql-image"></button>
                             </span>
                             <span class="ql-formats">
                                 <button class="ql-video"></button>
                             </span>
                         </ToolbarContent>
                     </Blazored.TextEditor.BlazoredTextEditor>
                 </div>
             </div>
        </div>
    </CardBody>
    
</Card>
<div class="row">
    <div class="col-12 text-lg-end">
        <Button Type="@ButtonType.Button" class="btn btn-danger" Clicked="CloseGroupBuyEdit">@L["Cancel"]</Button>
        <Button Type="@ButtonType.Button" class="btn btn-primary" Clicked="UpdateEntityAsync"><i class="fa fa-check"></i> @L["Save"]</Button>
    </div>
</div>

 @code {
}





