@page "/GroupBuyManagement/GroupBuyList/Edit/{id}"

@using Kooco.Pikachu.EnumValues;
@using Kooco.Pikachu.GroupBuys;
@using Pikachu.Items;
@using Pikachu.Localization;
@using Microsoft.Extensions.Localization;
@using Volo.Abp.AspNetCore.Components.Web
@using System.ComponentModel


@inject IGroupBuyAppService AppService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<PikachuResource> L
@inject IMessageService _message
<script src="interop.js"></script>
<style>
    .row {
        margin-top: 10px;
    }

    .site-tag-plus {
        background: #fff;
        border-style: dashed;
    }
    /* you can make up upload button and sample style by using stylesheets */
    .ant-upload-select-picture-card i {
        color: #999;
        font-size: 32px;
    }
     .ant-upload-select-picture-card i {
        color: #999;
        font-size: 32px;
    }

    .ant-upload-select-picture-card .ant-upload-text {
        margin-top: 8px;
        color: #666;
    }

    .anticon {
        vertical-align: 0.1em !important
    }

</style>
  <h3>@L["EditGroupBuy"]</h3>
<Card >
   
 <CardBody>
        <div class="card-body">
        <div class="col-12"><h4>Sales URL</h4>  </div>
        <div class=" col-12 row">
             <div class="col-1"></div>
            <div class="col-2">
                <label>@L["SalesURL1"]</label>
            </div>
            <div class="col-7">
                <TextEdit @bind-Text="@editGroupBuyDto.EntryURL" />
            </div>
           
            
        </div>
         <div class=" col-12 row">
              <div class="col-1"></div>
          <div class="col-2">
                <label>@L["SalesURL2"]</label>
            </div>
            <div class="col-7">
                <TextEdit @bind-Text="@editGroupBuyDto.EntryURL2" />
            </div>
            </div>
            </div>
        <Divider></Divider>
         <div class=" col-12 row">
           
            <div class="col-2">
                <label>@L["GroupBuyName"]</label>
            </div>
            <div class="col-9">
                <TextEdit  MaxLength="@maxtextCount" @bind-Text="@editGroupBuyDto.GroupBuyName" />
            </div>
            <div class="col-1">
                        <span>
                            @(string.IsNullOrWhiteSpace(editGroupBuyDto.GroupBuyName) ? 60 : (maxtextCount - editGroupBuyDto.GroupBuyName.Count()))/@maxtextCount
                        </span>
                    </div>
            
        </div>
         <div class=" col-12 row">
          <div class="col-2">
                <label>@L["Subject"]</label>
            </div>
            <div class="col-9">
                <TextEdit  MaxLength="@maxtextCount" @bind-Text="@editGroupBuyDto.SubjectLine" />
            </div>
             <div class="col-1">
                        <span>
                            @(string.IsNullOrWhiteSpace(editGroupBuyDto.SubjectLine) ? 60 : (maxtextCount - editGroupBuyDto.SubjectLine.Count()))/@maxtextCount
                        </span>
                    </div>
            </div>
            <div class=" col-12 row">
          <div class="col-2">
                <label>@L["GroupBuyShortName"]</label>
            </div>
            <div class="col-9">
                <TextEdit  MaxLength="@maxtextCount" @bind-Text="@editGroupBuyDto.ShortName" />
            </div>
             <div class="col-1">
                        <span>
                            @(string.IsNullOrWhiteSpace(editGroupBuyDto.ShortName) ? 60 : (maxtextCount - editGroupBuyDto.ShortName.Count()))/@maxtextCount
                        </span>
                    </div>
            </div>
             <div class="col-12 row">
            <div class="col-2">
                <label>@L["GroupBuyLogo"]*</label>
            </div>
            <div class="col-10 row">
                
      <Field>
                            <FilePicker @ref="LogoPickerCustom"
                                       
                                        Changed="OnLogoUploadAsync"
                                        ShowMode="FilePickerShowMode.List"
                                        Accept=".jpg, .png, .svg">
                                <FileTemplate>
                                    <Div Flex="Flex.JustifyContent.Between">
                                        <Div>
                                            <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
                                            <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                        </Div>
                                        <Div Class="ps-2">
                                            <Div>
                                                 @if (context.File.Status == FileEntryStatus.Ready)
                                                {
                                                    <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
                                                }
                                                else if (context.File.Status == FileEntryStatus.Uploading)
                                                {
                                                    <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
                                                }
                                                else if (context.File.Status == FileEntryStatus.Uploaded)
                                                {
                                                    <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
                                                }
                                                else if (context.File.Status == FileEntryStatus.Error)
                                                {
                                                    <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
                                                }
                                            </Div>
                                            <Div>
                                                <Icon TextColor="TextColor.Danger" Name="IconName.Delete" class="cursor-pointer" Clicked="context.RemoveFile" />
                                            </Div>
                                        </Div>
                                    </Div>
                                </FileTemplate>
                                <ButtonsTemplate>
                                    <Progress Value="@LogoPickerCustom.GetProgressPercentage()" />
                                    @* <Buttons Class="mt-2 d-flex justify-content-end">
                                        <Button Clicked="@context.Clear" Color="Color.Warning"><Icon Name="IconName.Clear" /></Button>
                                        <Button Clicked="@context.Upload" Color="Color.Primary"><Icon Name="IconName.FileUpload" /></Button>
                                    </Buttons> *@
                                </ButtonsTemplate>
                            </FilePicker>
                        </Field>

            </div>
                @if(editGroupBuyDto.LogoURL!=null)
                {
                    <div Class="col-12 row">
                        <div class="col-2"></div>
                        <div class="col-10">
                            <div class="image-list-container">
                               
                                    <div class="image-container">
                                        <Image class="blur-image" Source="@editGroupBuyDto.LogoURL" Text="Logo Image" Fluid />
                                        <button class="delete-button" @onclick="() => DeleteLogoAsync(editGroupBuyDto.BannerURL)">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                    </div>
                             
                            </div>
                        </div>
                    </div>
                }
        </div>
             <div class="col-12 row">
            <div class="col-2">
                <label>@L["GroupBuyBanner"]</label>
            </div>
            <div class="col-10 row">
    <Field>
                            <FilePicker @ref="BannerPickerCustom"
                                       
                                        Changed="OnBannerUploadAsync"
                                        ShowMode="FilePickerShowMode.List"
                                        Accept=".jpg, .png, .svg">
                                <FileTemplate>
                                    <Div Flex="Flex.JustifyContent.Between">
                                        <Div>
                                            <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
                                            <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                        </Div>
                                        <Div Class="ps-2">
                                            <Div>
                                                 @if (context.File.Status == FileEntryStatus.Ready)
                                                {
                                                    <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
                                                }
                                                else if (context.File.Status == FileEntryStatus.Uploading)
                                                {
                                                    <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
                                                }
                                                else if (context.File.Status == FileEntryStatus.Uploaded)
                                                {
                                                    <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
                                                }
                                                else if (context.File.Status == FileEntryStatus.Error)
                                                {
                                                    <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
                                                }
                                            </Div>
                                            <Div>
                                                <Icon TextColor="TextColor.Danger" Name="IconName.Delete" class="cursor-pointer" Clicked="context.RemoveFile" />
                                            </Div>
                                        </Div>
                                    </Div>
                                </FileTemplate>
                                <ButtonsTemplate>
                                    <Progress Value="@BannerPickerCustom.GetProgressPercentage()" />
                                    @* <Buttons Class="mt-2 d-flex justify-content-end">
                                        <Button Clicked="@context.Clear" Color="Color.Warning"><Icon Name="IconName.Clear" /></Button>
                                        <Button Clicked="@context.Upload" Color="Color.Primary"><Icon Name="IconName.FileUpload" /></Button>
                                    </Buttons> *@
                                </ButtonsTemplate>
                            </FilePicker>
                        </Field>

            </div>
                @if(editGroupBuyDto.BannerURL!=null)
                {
                    <div Class="col-12 row">
                        <div class="col-2"></div>
                        <div class="col-10">
                            <div class="image-list-container">
                               
                                    <div class="image-container">
                                        <Image class="blur-image" Source="@editGroupBuyDto.BannerURL" Text="Logo Image" Fluid />
                                        <button class="delete-button" @onclick="() => DeleteBannerAsync(editGroupBuyDto.BannerURL)">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                    </div>
                             
                            </div>
                        </div>
                    </div>
                }

           
        </div>
          <div class="col-12 row ">
            <div class="col-2">
                <label>@L["CarouselImages"]<Span><Tooltip Text="Upload upto 5 images">
    
<Icon class="fa-question-circle "></Icon></Tooltip></Span></label>
            </div>
            <div class="col-10 ">
     <Field>
                            <FilePicker @ref="CarouselPickerCustom"
                                        Multiple
                                        Changed="OnCarouselUploadAsync"
                                        ShowMode="FilePickerShowMode.List"
                                        Accept=".jpg, .png, .svg">
                                <FileTemplate>
                                    <Div Flex="Flex.JustifyContent.Between">
                                        <Div>
                                            <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
                                            <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                        </Div>
                                        <Div Class="ps-2">
                                            <Div>
                                                 @if (context.File.Status == FileEntryStatus.Ready)
                                                {
                                                    <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
                                                }
                                                else if (context.File.Status == FileEntryStatus.Uploading)
                                                {
                                                    <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
                                                }
                                                else if (context.File.Status == FileEntryStatus.Uploaded)
                                                {
                                                    <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
                                                }
                                                else if (context.File.Status == FileEntryStatus.Error)
                                                {
                                                    <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
                                                }
                                            </Div>
                                            <Div>
                                                <Icon TextColor="TextColor.Danger" Name="IconName.Delete" class="cursor-pointer" Clicked="context.RemoveFile" />
                                            </Div>
                                        </Div>
                                    </Div>
                                </FileTemplate>
                                <ButtonsTemplate>
                                    <Progress Value="@CarouselPickerCustom.GetProgressPercentage()" />
                                    @* <Buttons Class="mt-2 d-flex justify-content-end">
                                        <Button Clicked="@context.Clear" Color="Color.Warning"><Icon Name="IconName.Clear" /></Button>
                                        <Button Clicked="@context.Upload" Color="Color.Primary"><Icon Name="IconName.FileUpload" /></Button>
                                    </Buttons> *@
                                </ButtonsTemplate>
                            </FilePicker>
                        </Field>

            </div>
                  @if(CarouselImages.Count > 0)
                {
                    <div Class="col-12 row">
                        <div class="col-2"></div>
                        <div class="col-10">
                            <div class="image-list-container">
                                @foreach (var image in CarouselImages)
                                {
                                    <div class="image-container">
                                        <Image class="blur-image" Source="@image.ImageUrl" Text="Carousel Image" Fluid />
                                        <button class="delete-button" @onclick="() => DeleteImageAsync(image.BlobImageName)">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
        </div>

           <Divider></Divider>
            <div class=" col-12 row">
                <div class="col-2">@L["GroupBuyTime"]</div>
                <div class="col-4">
                 
    
        <DateEdit  Class="form-control" @bind-Date=editGroupBuyDto.StartTime  Placeholder="@L["StartDate"].ToString()" TValue="DateTime?"/>
   
    </div>
                 <div class="col-4">
                 
                     <DateEdit   Class="form-control"  @bind-Date=editGroupBuyDto.EndTime  Placeholder="@L["EndDate"].ToString()" TValue="DateTime"  />
  
   
                 </div>
            </div>
             <div class=" col-12 row">
                <div class="col-1">@L["Logistic"]</div>
                 <div class="col-2">@L["FreeShipping"]</div>
            
                 <div class="col-4"> <Switch TValue="bool" @bind-Checked="@editGroupBuyDto.FreeShipping"></Switch></div>
            </div>
            <div class="col-12 row">
                <div class="col-1"></div>
               <div class="col-2">
                @L["ExcludeShippingMethod"]
            </div>
            <div class="col-8">
               
                            <div class="col-7 form-control"  style="background-color:white">
          @foreach (var item in itemTags)
                            {
                                <Badge class="item-tags" CloseClicked="@(() => HandleItemTagDelete(item))">@item</Badge>
                            }

                            <div class="input-container">
                                <input type="text" id="tag-input" class="tag-input" placeholder="New Tag"
                                @bind-value="TagInputValue"
                                @onkeyup="HandleItemTagInputKeyUp" />
                                <i class="tag-input-placeholder-icon fa fa-plus"></i>
                            </div>
            </div>
         
            </div>
            
            </div>
                <div class=" col-12 row">
                <div class="col-1"></div>
                 <div class="col-2">@L["AllowShipToOuterIsland"]</div>
            
                 <div class="col-4"> <Switch TValue="bool" @bind-Checked="@editGroupBuyDto.allowShipToOuterTaiwan"></Switch></div>
            </div>
                <div class=" col-12 row">
                <div class="col-1"></div>
                 <div class="col-2">@L["AllowShipToOverSea"]</div>
            
                 <div class="col-4"> <Switch TValue="bool" @bind-Checked="@editGroupBuyDto.allowShipOversea"></Switch></div>
            </div>
               <div class=" col-12 row">
                   <div class="col-1"></div>
                <div class="col-2">@L["ExpectDeliveryDate"]</div>
                <div class="col-4"><DateEdit TValue="DateTime?" Class="form-control" @bind-Date=editGroupBuyDto.ExpectShippingDateTo  Placeholder="@L["StartDate"].ToString()" /></div>
                 <div class="col-4"><DateEdit TValue="DateTime?"  Class="form-control" @bind-Date=editGroupBuyDto.ExpectShippingDateFrom  Placeholder="@L["EndDate"].ToString()" /></div>
            </div>
          
              <div class="col-12 row">
                <div class="col-1">@L["GateWay"]</div>
                 <div class="col-2">@L["PaymentMethod"]</div>
            
                 <div class="col-4">  <Radio TValue="bool" Group="Payment" Value=editGroupBuyDto.IsDefaultPaymentGateWay>
        @L["DefaultPaymentGateWay"]
    </Radio>
       </div>
            </div>
                   <div class="col-12 row">
                <div class="col-1"></div>
                 <div class="col-2"></div>
            
                 <div class="col-1">    <Radio TValue="bool" Group="Payment" Value="@paymentMethodCheck" > </Radio></div>
                 <div class="col-7">
                     <div class="col-7 form-control"  style="background-color:white">
               @foreach (var item in paymentMethodTags)
                            {
                                <Badge class="item-tags" CloseClicked="@(() => HandlePaymentTagDelete(item))">@item</Badge>
                            }

                            <div class="input-container">
                                <input type="text" id="tag-input" class="tag-input" placeholder="New Tag"
                                @bind-value="PaymentTagInputValue"
                                @onkeyup="HandlePaymentTagInputKeyUp" />
                                <i class="tag-input-placeholder-icon fa fa-plus"></i>
                            </div>
            </div>
                 </div>         
       
            </div>
             <div class=" col-12 row">
                <div class="col-1">@L["Invoice"]</div>
                 <div class="col-2">@L["IssueInvoice"]</div>
            
                 <div class="col-4"> <Switch TValue="bool" @bind-Checked="@editGroupBuyDto.issueInvoice"></Switch></div>
            </div>
           <div class=" col-12 row">
                <div class="col-1"></div>
                 <div class="col-2 form-label">@L["AutoIssueTriplicateInvoice"]</div>
            
                 <div class="col-4"> <Switch TValue="bool" @bind-Checked="@editGroupBuyDto.AutoIssueTriplicateInvoice"></Switch></div>
            </div>
             <div class=" col-12 row">
                <div class="col-1"></div>
                 <div class="col-2 form-label">@L["InvoiceComment"]</div>
            
                 <div class="col-8"> <InputTextArea class="form-control"   maxlength="200" @bind-Value="@editGroupBuyDto.InvoiceNote"></InputTextArea></div>
            </div>
            <Divider></Divider>
             <div class=" col-12 row">
                <div class="col-1 mx-1">@L["AdvanceSetting"]</div>
                 <div class="col-2 form-label">@L["HideCredention"]</div>
            
                 <div class="col-4"> <Switch TValue="bool" @bind-Checked="@editGroupBuyDto.ProtectPrivacyData"></Switch></div>
            </div>
                <div class=" col-12 row">
           <div class="col-1"></div>
            <div class="col-2">
                <label>@L["InviteCode"]</label>
            </div>
            <div class="col-5">
                <TextEdit  @bind-Text="@editGroupBuyDto.InviteCode" />
            </div>
           
            
        </div>
         <div class=" col-12 row">
              <div class="col-1"></div>
             <div class="col-2">
                <label>@L["ProfitShare"]</label>
            </div>
            <div class="col-5">
                <InputNumber class="form-control"   @bind-Value="@editGroupBuyDto.ProfitShare" />
            </div>
            </div>
             <div class=" col-12 row">
              <div class="col-1"></div>
             <div class="col-2">
                <label>@L["FaceBookPixelID"]</label>
            </div>
            <div class="col-5">
                <InputNumber class="form-control"   @bind-Value="@editGroupBuyDto.MetaPixelNo" />
            </div>
            </div>
             <div class=" col-12 row">
              <div class="col-1"></div>
             <div class="col-2">
                <label>@L["FaceBookID"]</label>
            </div>
            <div class="col-5">
                <TextEdit    @bind-Text="@editGroupBuyDto.FBID" />
            </div>
            </div>
             <div class=" col-12 row">
              <div class="col-1"></div>
             <div class="col-2">
                <label>@L["IGID"]</label>
            </div>
            <div class="col-5">
                <TextEdit  @bind-Text="@editGroupBuyDto.IGID" />
            </div>
            </div>
             <div class=" col-12 row">
              <div class="col-1"></div>
             <div class="col-2">
                <label>@L["LINEID"]</label>
            </div>
            <div class="col-5">
                <TextEdit  @bind-Text="@editGroupBuyDto.LineID" />
            </div>
            </div>
             <div class=" col-12 row">
              <div class="col-1"></div>
             <div class="col-2">
                <label>@L["GAID"]</label>
            </div>
            <div class="col-5">
                <TextEdit  @bind-Text="@editGroupBuyDto.GAID" />
            </div>
            </div>
             <div class=" col-12 row">
              <div class="col-1"></div>
             <div class="col-2">
                <label>@L["GTM"]</label>
            </div>
            <div class="col-5">
                <TextEdit  @bind-Text="@editGroupBuyDto.GTM" />
            </div>
            </div>
    <Divider></Divider>
          <div class=" col-12 row">
              <div class="col-2"><label>@L["ChooseModule"]</label></div>
          
            <div class="col-3">
                <Dropdown>
    <DropdownToggle Color="Color.Primary">
        Dropdown
    </DropdownToggle>
    <DropdownMenu>
        <DropdownItem Clicked='@(()=>addProductItem("Product Image"))'>
      
         Product Picture</DropdownItem>
        <DropdownDivider />
        <DropdownItem Clicked='@(()=>addProductItem("Product Description"))'>
       
            Product Description</DropdownItem>
    </DropdownMenu>
</Dropdown>
              
            </div>
            </div>
            @foreach (var module in collapseItem)
{<div class=" col-12 row">
    <div class="col-2"></div>
    <div class="col-8">
        <Accordion>
   <Collapse  >
            <CollapseHeader>
            <Heading Size="HeadingSize.Is5">
                  <AccordionToggle>@module.Title</AccordionToggle>
                </Heading>
</CollapseHeader>
<CollapseBody>
     <div class="row">
               <div class="col-3">
                                   
    </div>
    <div class="col-8 mt-5">
        <TextEdit MaxLength="60" ShowCount @bind-Text="@productDescription" />
    </div>
    </div>
     <Divider></Divider>
      @foreach(var item in module.ItemDetails){
 <div class="row col-12 ">
    
   <div class="col-4">
           <Image  Source=""></Image> 
        
   </div>
   <div class="col-7">
       <p> @item.ItemDescription</p>
   </div>
   <div class="col-1"> <Button  class="close" Clicked="@(()=>RemoveProductItem(@item,@module.Index))"><span aria-hidden="true" >&times;</span></Button></div>
   </div>
   <Divider></Divider>
  
      }
       <Divider></Divider>
   
        <Button Clicked="@(()=>HandelClick(module.Index))" Type="@ButtonType.Button"><span class="fa fas-plus"></span>Add Item</Button>
        </CollapseBody>
  
    

   
</Collapse>
</Accordion>
</div>
</div>
}
    <Divider></Divider>
    <div class=" col-12 row">
   
    <div class="col-2">
        <fieldLabel>@L["GroupBuyPolicy"]</fieldLabel>
    </div>
    <div class="col-9">
        <div class="col-12">
            <FieldLabel></FieldLabel>
            <TextEdit Placeholder="@L["GroupBuyCondition"]" @bind-Text="editGroupBuyDto.GroupBuyCondition" MaxLength="60"  />
        </div>
        <div class=" col-12">
            <Blazored.TextEditor.BlazoredTextEditor @ref="@quillHtml">
                <ToolbarContent>
                    <select class="ql-header">
                        <option selected=""></option>
                        <option value="1"></option>
                        <option value="2"></option>
                        <option value="3"></option>
                        <option value="4"></option>
                        <option value="5"></option>
                    </select>
                    <span class="ql-formats">
                        <button class="ql-bold"></button>
                        <button class="ql-italic"></button>
                        <button class="ql-underline"></button>
                        <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                        <select class="ql-color"></select>
                        <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-link"></button>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-image"></button>
                    </span>
                     <span class="ql-formats">
                        <button class="ql-video"></button>
                    </span>
                </ToolbarContent>
            </Blazored.TextEditor.BlazoredTextEditor>
        </div>
    </div>
    <div class="col-1">
        <span>
           
        </span>
    </div>
</div>
 <div class=" col-12 row">
    
     <div class="col-2">
         <fieldLabel></fieldLabel>
     </div>
     <div class="col-9">
         <div class="col-12">
             <fieldLabel></fieldLabel>
             <TextEdit Placeholder="@L["CustomerInformation"]" @bind-Text="@editGroupBuyDto.CustomerInformation" MaxLength="60"  />
         </div>
         <div class=" col-12">
             <Blazored.TextEditor.BlazoredTextEditor @ref="@quillHtml">
                 <ToolbarContent>
                     <select class="ql-header">
                         <option selected=""></option>
                         <option value="1"></option>
                         <option value="2"></option>
                         <option value="3"></option>
                         <option value="4"></option>
                         <option value="5"></option>
                     </select>
                     <span class="ql-formats">
                         <button class="ql-bold"></button>
                         <button class="ql-italic"></button>
                         <button class="ql-underline"></button>
                         <button class="ql-strike"></button>
                     </span>
                     <span class="ql-formats">
                         <select class="ql-color"></select>
                         <select class="ql-background"></select>
                     </span>
                     <span class="ql-formats">
                         <button class="ql-list" value="ordered"></button>
                         <button class="ql-list" value="bullet"></button>
                     </span>
                     <span class="ql-formats">
                         <button class="ql-link"></button>
                     </span>
                     <span class="ql-formats">
                         <button class="ql-image"></button>
                     </span>
                      <span class="ql-formats">
                         <button class="ql-video"></button>
                     </span>
                 </ToolbarContent>
             </Blazored.TextEditor.BlazoredTextEditor>
         </div>
     </div>
     <div class="col-1">
         <span>
            
         </span>
     </div>
 </div>
     <div class=" col-12 row">
    
     <div class="col-2">
         <fieldLabel></fieldLabel>
     </div>
     <div class="col-9">
         <div class="col-12">
             <fieldLabel></fieldLabel>
             <TextEdit Placeholder="@L["ExchangePolicy"]" @bind-Text="@editGroupBuyDto.ExchangePolicy" MaxLength="60" ShowCount />
         </div>
         <div class=" col-12">
             <Blazored.TextEditor.BlazoredTextEditor  @ref="@quillHtml">
                 <ToolbarContent>
                     <select class="ql-header">
                         <option selected=""></option>
                         <option value="1"></option>
                         <option value="2"></option>
                         <option value="3"></option>
                         <option value="4"></option>
                         <option value="5"></option>
                     </select>
                     <span class="ql-formats">
                         <button class="ql-bold"></button>
                         <button class="ql-italic"></button>
                         <button class="ql-underline"></button>
                         <button class="ql-strike"></button>
                     </span>
                     <span class="ql-formats">
                         <select class="ql-color"></select>
                         <select class="ql-background"></select>
                     </span>
                     <span class="ql-formats">
                         <button class="ql-list" value="ordered"></button>
                         <button class="ql-list" value="bullet"></button>
                     </span>
                     <span class="ql-formats">
                         <button class="ql-link"></button>
                     </span>
                     <span class="ql-formats">
                         <button class="ql-image"></button>
                     </span>
                      <span class="ql-formats">
                         <button class="ql-video"></button>
                     </span>
                 </ToolbarContent>
             </Blazored.TextEditor.BlazoredTextEditor>
         </div>
     </div>
     <div class="col-1">
         <span>
            
         </span>
     </div>
 </div>
     <div class=" col-12 row">

         <div class="col-2">
             <fieldLabel>@L["NotifyEmail"]</fieldLabel>
         </div>
         <div class="col-9">
             <div class="col-12">
                 <fieldLabel></fieldLabel>

             </div>
             <div class=" col-12">
                 <Blazored.TextEditor.BlazoredTextEditor @ref="@quillHtml">
                     <ToolbarContent>
                         <select class="ql-header">
                             <option selected=""></option>
                             <option value="1"></option>
                             <option value="2"></option>
                             <option value="3"></option>
                             <option value="4"></option>
                             <option value="5"></option>
                         </select>
                         <span class="ql-formats">
                             <button class="ql-bold"></button>
                             <button class="ql-italic"></button>
                             <button class="ql-underline"></button>
                             <button class="ql-strike"></button>
                         </span>
                         <span class="ql-formats">
                             <select class="ql-color"></select>
                             <select class="ql-background"></select>
                         </span>
                         <span class="ql-formats">
                             <button class="ql-list" value="ordered"></button>
                             <button class="ql-list" value="bullet"></button>
                         </span>
                         <span class="ql-formats">
                             <button class="ql-link"></button>
                         </span>
                         <span class="ql-formats">
                             <button class="ql-image"></button>
                         </span>
                         <span class="ql-formats">
                             <button class="ql-video"></button>
                         </span>
                     </ToolbarContent>
                 </Blazored.TextEditor.BlazoredTextEditor>
             </div>
         </div>
         <div class="col-1">
             <span>

             </span>
         </div>
     </div>
     <div class="row mb-3"></div>

        <div style="text-align: center; margin-top:5px ;">
            <Button Danger Type="@ButtonType.Button" Style="margin-right:5px">@L["Cancel"]</Button>
            <Button Type="@ButtonType.Button" class="btn btn-primary me-1" Clicked="CreateEntityAsync">@L["Save"]</Button>
            <Button Type="@ButtonType.Button" Style="margin-right:5px; background-color:skyblue">@L["Preview"]</Button>

        </div>
    </CardBody>
    </Card>
    
    <Modal Title="@title"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
          
</Modal>


 @code {

    string title = "BasicModal";
    string customerInformation;
     string groupBuyCondition;
    string productDescription = "";
    bool _visible = false;
    int selectedIndex = 0;
    private void HandelClick(int i)
    {
        int selectedIndex = i;
        if (collapseItem.Where(x => x.Index == i).FirstOrDefault().ItemDetails.Count <= 3)
        {
            ProductPictureItem item = new ProductPictureItem();
            // item.ImageDetail = productPicture;
            item.ItemDescription = productDescription;

            collapseItem.Where(x => x.Index == i).FirstOrDefault().ItemDetails.Add(item);
            productDescription="";
            // productPicture = new UploadFileItem();
        }
    }

    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
        selectedIndex = 0;
    }
       private void RemoveProductItem(ProductPictureItem item,int index)
    {
    collapseItem.Where(x=>x.Index==index).FirstOrDefault().ItemDetails.Remove(item);
    }
    }





