@page "/GroupBuyManagement/GroupBuyList/New"
@using Kooco.Pikachu.EnumValues;
@using Kooco.Pikachu.GroupBuys;
@using Kooco.Pikachu.Items.Dtos;
@using Microsoft.Extensions.Configuration;
@using Pikachu.Items;
@using Pikachu.Localization;
@using Microsoft.Extensions.Localization;
@using System.ComponentModel;
@using Blazorise.Components;


@inject IGroupBuyAppService AppService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<PikachuResource> L
@inject IMessageService _message
@inject IConfiguration _configuration

<style>
    .row {
        margin-top: 10px;
    }
</style>
<h3>@L["NewGroupBuy"]</h3>
<Card>
    <CardBody>
        <div class="row">
            <div class="col-12">
                <h4>@L["SalesURL"]</h4>  
            </div>
            <div class="row">
                <div class="col-1"></div>
                <div class="col-2">
                    <label>@L["SalesURL1"]</label>
                </div>
                <div class="col-7">
                    <TextEdit @bind-Text="@CreateGroupBuyDto.EntryURL" ReadOnly />
                </div>
            </div>
            <div class="row">
                <div class="col-1"></div>
                <div class="col-2">
                    <label>@L["SalesURL2"]</label>
                </div>
                <div class="col-7">
                    <TextEdit @bind-Text="@CreateGroupBuyDto.EntryURL2" />
                </div>
            </div>
        </div>
        <Divider></Divider>
        <div class="row">
            <div class="col-2">
                <label>@L["GroupBuyName"]</label>
            </div>
            <div class="col-9">
                <TextEdit MaxLength="@maxtextCount" @bind-Text="@CreateGroupBuyDto.GroupBuyName" />
            </div>
            <div class="col-1">
                <span>
                    @(string.IsNullOrWhiteSpace(CreateGroupBuyDto.GroupBuyName) ? 60 : (maxtextCount - CreateGroupBuyDto.GroupBuyName.Count()))/@maxtextCount
                </span>
            </div>
        </div>
          <div class="row">
            <div class="col-2">
                <label>@L["ShortCode"]</label>
            </div>
            <div class="col-9">
                <Validation UsePattern>
                    <TextEdit Pattern="^[A-Za-z0-9]{8}$"  MaxLength="8" @bind-Text="@CreateGroupBuyDto.ShortCode">
                        <Feedback>
                            <ValidationError>Pattern does not match!</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            </div>
            <div class="col-1">
                <span>
                    @((string.IsNullOrWhiteSpace(CreateGroupBuyDto.ShortCode) ? 0 : (0 + CreateGroupBuyDto.ShortCode.Count())))/@(8)
                </span>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                <label>@L["Subject"]</label>
            </div>
            <div class="col-9">
                <TextEdit MaxLength="@maxtextCount" @bind-Text="@CreateGroupBuyDto.SubjectLine" />
            </div>
            <div class="col-1">
                <span>
                    @(string.IsNullOrWhiteSpace(CreateGroupBuyDto.SubjectLine) ? 60 : (maxtextCount - CreateGroupBuyDto.SubjectLine.Count()))/@maxtextCount
                </span>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                <label>@L["GroupBuyShortName"]</label>
            </div>
            <div class="col-9">
                <TextEdit MaxLength="@maxtextCount" @bind-Text="@CreateGroupBuyDto.ShortName" />
            </div>
            <div class="col-1">
                <span>
                    @(string.IsNullOrWhiteSpace(CreateGroupBuyDto.ShortName) ? 60 : (maxtextCount - CreateGroupBuyDto.ShortName.Count()))/@maxtextCount
                </span>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                <label>@L["GroupBuyLogo"]
                    <span class="text-danger"> *</span>
                </label>
            </div>
            <div class="col-10">
                <Field>
                    <FilePicker @ref="LogoPickerCustom"
                                Changed="OnLogoUploadAsync"
                                ShowMode="FilePickerShowMode.List"
                                Accept=".jpg, .png, .svg ,.jpeg,.webp">
                        <FileTemplate>
                            <Div Flex="Flex.JustifyContent.Between">
                                <Div>
                                    <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
                                    <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                </Div>
                                <Div Class="ps-2">
                                    <Div>
                                        @if (context.File.Status == FileEntryStatus.Ready)
                                        {
                                            <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Uploading)
                                        {
                                            <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Uploaded)
                                        {
                                            <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Error)
                                        {
                                            <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
                                        }
                                    </Div>
                                    <Div>
                                        <Icon TextColor="TextColor.Danger" Name="IconName.Delete" class="cursor-pointer" Clicked="context.RemoveFile" />
                                    </Div>
                                </Div>
                            </Div>
                        </FileTemplate>
                        <ButtonsTemplate>
                            <Progress Value="@LogoPickerCustom.GetProgressPercentage()" />
                        </ButtonsTemplate>
                    </FilePicker>
                </Field>

            </div>
            @if (CreateGroupBuyDto.LogoURL != null)
            {
                <div Class="row">
                    <div class="col-2"></div>
                    <div class="col-10">
                        <div class="image-list-container">

                            <div class="image-container">
                                <Image class="blur-image" Source="@CreateGroupBuyDto.LogoURL" Text="Logo Image" Fluid />
                                 <button class="delete-button" @onclick="() => DeleteLogoAsync(logoBlobName)">
                                     <i class="fa fa-trash"></i>
                                 </button>
                             </div>

                         </div>
                     </div>
                 </div>
            }
        </div>
        <div class="row">
            <div class="col-2">
                <label>@L["GroupBuyBanner"]</label>
            </div>
            <div class="col-10">
                <Field>
                    <FilePicker @ref="BannerPickerCustom"
                                Changed="OnBannerUploadAsync"
                                ShowMode="FilePickerShowMode.List"
                                Accept=".jpg, .png, .svg, .jpeg, .webp">
                        <FileTemplate>
                            <Div Flex="Flex.JustifyContent.Between">
                                <Div>
                                    <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
                                    <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                </Div>
                                <Div Class="ps-2">
                                    <Div>
                                        @if (context.File.Status == FileEntryStatus.Ready)
                                        {
                                            <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Uploading)
                                        {
                                            <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Uploaded)
                                        {
                                            <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Error)
                                        {
                                            <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
                                        }
                                    </Div>
                                    <Div>
                                        <Icon TextColor="TextColor.Danger" Name="IconName.Delete" class="cursor-pointer" Clicked="context.RemoveFile" />
                                    </Div>
                                </Div>
                            </Div>
                        </FileTemplate>
                        <ButtonsTemplate>
                            <Progress Value="@BannerPickerCustom.GetProgressPercentage()" />
                        </ButtonsTemplate>
                    </FilePicker>
                </Field>

            </div>
            @if (CreateGroupBuyDto.BannerURL != null)
            {
                <div Class="row">
                    <div class="col-2"></div>
                    <div class="col-10">
                        <div class="image-list-container">

                            <div class="image-container">
                                <Image class="blur-image" Source="@CreateGroupBuyDto.BannerURL" Text="Logo Image" Fluid />
                                 <button class="delete-button" @onclick="() => DeleteBannerAsync(bannerBlobName)">
                                     <i class="fa fa-trash"></i>
                                 </button>
                             </div>

                         </div>
                     </div>
                 </div>
            }
        </div>
        <div class="row">
            <div class="col-2">
                <label>
                    @L["CarouselImages"]<Span>
                        <Tooltip Text="@L["uploadUpto5Images"]">

                            <Icon class="fa-question-circle "></Icon>
                        </Tooltip>
                    </Span>
                </label>
            </div>
            <div class="col-10 ">
                <Field>
                    <FilePicker @ref="CarouselPickerCustom"
                                        Multiple
                                 Changed="OnCarouselUploadAsync"
                                 ShowMode="FilePickerShowMode.List"
                                 Accept=".jpg, .png, .svg, .jpeg, .webp">
                         <FileTemplate>
                             <Div Flex="Flex.JustifyContent.Between">
                                 <Div>
                                     <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
                                     <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                 </Div>
                                 <Div Class="ps-2">
                                     <Div>
                                         @if (context.File.Status == FileEntryStatus.Ready)
                                        {
                                            <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Uploading)
                                        {
                                            <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Uploaded)
                                        {
                                            <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
                                        }
                                        else if (context.File.Status == FileEntryStatus.Error)
                                        {
                                            <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
                                        }
                                    </Div>
                                    <Div>
                                        <Icon TextColor="TextColor.Danger" Name="IconName.Delete" class="cursor-pointer" Clicked="context.RemoveFile" />
                                    </Div>
                                </Div>
                            </Div>
                        </FileTemplate>
                        <ButtonsTemplate>
                            <Progress Value="@CarouselPickerCustom.GetProgressPercentage()" />
                        </ButtonsTemplate>
                    </FilePicker>
                </Field>

            </div>
            @if (CarouselImages.Count > 0)
            {
                <div Class="row">
                    <div class="col-2"></div>
                    <div class="col-10">
                        <div class="image-list-container">
                            @foreach (var image in CarouselImages)
                            {
                                <div class="image-container">
                                    <Image class="blur-image" Source="@image.ImageUrl" Text="Carousel Image" Fluid />
                                     <button class="delete-button" @onclick="() => DeleteImageAsync(image.BlobImageName)">
                                         <i class="fa fa-trash"></i>
                                     </button>
                                 </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <Divider></Divider>
        <div class="row">
            <div class="col-2">@L["GroupBuyTime"]</div>
            <div class="col-4">
                <DateEdit Class="form-control" @bind-Date=CreateGroupBuyDto.StartTime Placeholder="@L["StartDate"].ToString()" TValue="DateTime?" />
            </div>
            <div class="col-4">
                <DateEdit Class="form-control" @bind-Date=CreateGroupBuyDto.EndTime Placeholder="@L["EndDate"].ToString()" TValue="DateTime?" />
            </div>
        </div>
        <div class="row">
            <div class="col-2">@L["Logistic"]</div>
            <div class="col-2">@L["FreeShipping"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@CreateGroupBuyDto.FreeShipping"></Switch></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                @L["ExcludeShippingMethod"]
            </div>
            <div class="col-8">
                <div class="col-7 form-control" style="background-color:white">
                    @foreach (var item in ItemTags)
                    {
                        <Badge class="item-tags" CloseClicked="@(() => HandleItemTagDelete(item))">@item</Badge>
                    }
                    <div class="input-container">
                        <input type="text" id="tag-input" class="tag-input" placeholder="New Tag"
                        @bind-value="TagInputValue"
                        @onkeyup="HandleItemTagInputKeyUp" />
                        <i class="tag-input-placeholder-icon fa fa-plus"></i>
                    </div>
                </div>

            </div>

        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">@L["AllowShipToOuterIsland"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@CreateGroupBuyDto.AllowShipToOuterTaiwan"></Switch></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">@L["AllowShipToOverSea"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@CreateGroupBuyDto.AllowShipOversea"></Switch></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">@L["ExpectDeliveryDate"]</div>
            <div class="col-4"><DateEdit TValue="DateTime?" Class="form-control" @bind-Date=CreateGroupBuyDto.ExpectShippingDateTo Placeholder="@L["StartDate"].ToString()" /></div>
            <div class="col-4"><DateEdit TValue="DateTime?" Class="form-control" @bind-Date=CreateGroupBuyDto.ExpectShippingDateFrom Placeholder="@L["EndDate"].ToString()" /></div>
        </div>

        <div class="row">
            <div class="col-2">@L["Gateway"]</div>
            <div class="col-2">@L["PaymentMethod"]</div>
            <div class="col-4">
                <div class="form-check">
                    <input type="radio" class="form-check-input" name="PaymentGateway" id="payment-gateway-1" checked="@CreateGroupBuyDto.IsDefaultPaymentGateWay" @onclick="() => CreateGroupBuyDto.IsDefaultPaymentGateWay = true" />
                    <label class="form-check-label" for="payment-gateway-1">
                        @L["DefaultPaymentGateWay"]
                    </label>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2"></div>
            <div class="col-1">  
                <div class="form-check">
                    <input type="radio" class="form-check-input" name="PaymentGateway" id="payment-gateway-2" checked="@(!CreateGroupBuyDto.IsDefaultPaymentGateWay)" @onclick="() => CreateGroupBuyDto.IsDefaultPaymentGateWay = false" />
                </div>
            </div>
            <div class="col-7">
                <div class="col-7 form-control" style="background-color:white">
                    @foreach (var item in PaymentMethodTags)
                    {
                        <Badge class="item-tags" CloseClicked="@(() => HandlePaymentTagDelete(item))">@item</Badge>
                    }
                    <div class="input-container">
                        <input type="text" id="tag-input" class="tag-input" placeholder="New Tag"
                        @bind-value="PaymentTagInputValue"
                        @onkeyup="HandlePaymentTagInputKeyUp" />
                        <i class="tag-input-placeholder-icon fa fa-plus"></i>
                    </div>
                </div>
                <span class="text-danger">@PaymentMethodError</span>
            </div>
        </div>
        <div class="row">
            <div class="col-2">@L["Invoice"]</div>
            <div class="col-2">@L["IssueInvoice"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@CreateGroupBuyDto.IssueInvoice"></Switch></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2 form-label">@L["AutoIssueTriplicateInvoice"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@CreateGroupBuyDto.AutoIssueTriplicateInvoice"></Switch></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2 form-label">
                @L["InvoiceComment"]
            </div>
            <div class="col-8"> 
                <InputTextArea class="form-control" maxlength="200" @bind-Value="@CreateGroupBuyDto.InvoiceNote"></InputTextArea>
            </div>
        </div>
        <Divider></Divider>
        <div class="row">
            <div class="col-2">@L["AdvanceSetting"]</div>
            <div class="col-2 form-label">@L["HideCredention"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@CreateGroupBuyDto.ProtectPrivacyData"></Switch></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["InviteCode"]</label>
            </div>
            <div class="col-5">
                <TextEdit @bind-Text="@CreateGroupBuyDto.InviteCode" />
            </div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["ProfitShare"]</label>
            </div>
            <div class="col-5">
                <InputNumber class="form-control" @bind-Value="@CreateGroupBuyDto.ProfitShare" />
            </div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["FaceBookPixelID"]</label>
            </div>
            <div class="col-5">
                <InputNumber class="form-control" @bind-Value="@CreateGroupBuyDto.MetaPixelNo" />
            </div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["FaceBookID"]</label>
            </div>
            <div class="col-5">
                <TextEdit @bind-Text="@CreateGroupBuyDto.FBID" />
            </div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["IGID"]</label>
            </div>
            <div class="col-5">
                <TextEdit @bind-Text="@CreateGroupBuyDto.IGID" />
            </div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["LINEID"]</label>
            </div>
            <div class="col-5">
                <TextEdit @bind-Text="@CreateGroupBuyDto.LineID" />
            </div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["GAID"]</label>
            </div>
            <div class="col-5">
                <TextEdit @bind-Text="@CreateGroupBuyDto.GAID" />
            </div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["GTM"]</label>
            </div>
            <div class="col-5">
                <TextEdit @bind-Text="@CreateGroupBuyDto.GTM" />
            </div>
        </div>
        <Divider></Divider>
        <div class="row">
            <div class="col-2"><label>@L["AddModule"]</label></div>
            <div class="col-10">
                 @if (CollapseItem.Count < 20)
                {
                    <Dropdown>
                        <DropdownToggle Color="Color.Primary">
                            @L["SelectModule"]
                        </DropdownToggle>
                        <DropdownMenu>
                            @foreach (GroupBuyModuleType groupBuyDropdownValue in Enum.GetValues(typeof(GroupBuyModuleType)))
                            {
                                <DropdownItem Clicked='@(()=>AddProductItem(@groupBuyDropdownValue))'>
                                    @L[groupBuyDropdownValue.ToString()]
                                </DropdownItem>
                            }
                        </DropdownMenu>
                </Dropdown>
                }
            </div>
        </div>
        @foreach (var module in CollapseItem)
        {
            <div class="row">
                <div class="col-12">
                    <Accordion>
                        <Collapse>
                            <CollapseHeader>
                                <AccordionToggle>
                                    <i class="fa fa-trash text-danger me-2" @onclick="@(()=>RemoveCollapseItem(@module.Index))"></i>
                                    @L[module.GroupBuyModuleType.ToString()]
                                </AccordionToggle>
                            </CollapseHeader>
                            <CollapseBody>
                                @if(module.GroupBuyModuleType == GroupBuyModuleType.ProductGroupModule)
                                    {
                                        <div class="d-flex justify-content-end">
                                            <div style="width: 60px;">
                                                <select class="form-control form-control-sm" @onchange="(e) => OnProductGroupValueChange(e, module)">
                                                    <option value="3">3</option>
                                                    <option value="4">4</option>
                                                </select>
                                            </div>
                                        </div>
                                    }
                                <div class="row mt-2">
                                    @foreach(var selectedItem in module.Selected)
                                    {
                                        <div class="col-@(12 / module.Selected.Count)">
                                            <Autocomplete 
                                                        TItem="ItemWithItemTypeDto"
                                                        TValue="Guid?"
                                                        Data="@ItemsList"
                                                        TextField="@(( item ) => item.Name)"
                                                        ValueField="@(( item ) => item.Id)"
                                                        Placeholder="Search..."
                                                        Filter="AutocompleteFilter.StartsWith"
                                                        CustomFilter="@(( item, searchValue ) => item.Name.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )"
                                                        HighlightSearch
                                                        Immediate="true"
                                                        SelectedValue="selectedItem.Id"
                                                        SelectedValueChanged="(id) => OnSelectedValueChanged(id, module, selectedItem)">
                                                    <NotFoundContent> @L["NotFound"] </NotFoundContent>
                                            </Autocomplete>
                                            @if (selectedItem.Id != null)
                                            {
                                                string? firstImage;
                                                if (selectedItem.ItemType == ItemType.Item)
                                                {
                                                     firstImage = selectedItem.Item?.Images?.FirstOrDefault()?.ImageUrl;
                                                }
                                                else
                                                {
                                                     firstImage = selectedItem.SetItem?.Images?.FirstOrDefault()?.ImageUrl;
                                                }
                                                <div class="d-flex mt-3">
                                                    @if(firstImage != null)
                                                    {
                                                        <div>
                                                            <img src="@firstImage" class="img-fluid" />
                                                            @if(module.GroupBuyModuleType == GroupBuyModuleType.ProductGroupModule)
                                                            {
                                                                <div class="row mt-2">
                                                                    <h4 class="text-center mt-2">
                                                                        <strong>@selectedItem.Name</strong>
                                                                    </h4>
                                                                    @if (selectedItem.Item != null)
                                                                    {
                                                                        @if (!selectedItem.Item.Attribute1Name.IsNullOrEmpty() && selectedItem.Item.ItemDetails != null)
                                                                        {
                                                                            <div class="mt-2">
                                                                                <select class="form-control dropdown">
                                                                                    @foreach (var item in selectedItem.Item?.ItemDetails.DistinctBy(i => i.Attribute1Value))
                                                                                    {
                                                                                        <option>
                                                                                            @item.Attribute1Value
                                                                                        </option>
                                                                                    }
                                                                                </select class="form-control dropdown">
                                                                            </div>
                                                                        }
                                                                        @if (!selectedItem.Item.Attribute2Name.IsNullOrEmpty() && selectedItem.Item.ItemDetails != null)
                                                                        {
                                                                            <div class="mt-2">
                                                                                <select class="form-control dropdown">
                                                                                    @foreach (var item in selectedItem.Item?.ItemDetails.DistinctBy(i => i.Attribute2Value))
                                                                                    {
                                                                                        <option>
                                                                                            @item.Attribute2Value
                                                                                        </option>
                                                                                    }
                                                                                </select class="form-control dropdown">
                                                                            </div>
                                                                        }
                                                                        @if (!selectedItem.Item.Attribute3Name.IsNullOrEmpty() && selectedItem.Item.ItemDetails != null)
                                                                        {
                                                                            <div class="mt-2">
                                                                                <select class="form-control dropdown">
                                                                                    @foreach (var item in selectedItem.Item?.ItemDetails.DistinctBy(i => i.Attribute3Value))
                                                                                    {
                                                                                        <option>
                                                                                            @item.Attribute3Value
                                                                                        </option>
                                                                                    }
                                                                                </select>
                                                                            </div>
                                                                        }
                                                                    } 
                                                                </div>
                                                            }
                                                        </div>
                                                    }
                                                    @if (module.GroupBuyModuleType == GroupBuyModuleType.ProductDescriptionModule)
                                                    {
                                                        string? ItemDescription;
                                                        if (selectedItem.ItemType == ItemType.Item)
                                                        {
                                                             ItemDescription = selectedItem.Item?.ItemDescription;
                                                        }
                                                        else
                                                        {
                                                             ItemDescription = selectedItem.SetItem?.Description;
                                                        }
                                                        <div class="ps-3">
                                                            <p> @((MarkupString)ItemDescription) </p>
                                                        </div>
                                                    }
                                                </div> 
                                            }
                                        </div>
                                    }
                                </div>
                            </CollapseBody>
                        </Collapse>
                    </Accordion>
                </div>
            </div>
        }
        <Divider></Divider>
        <div class="row">
            <div class="col-2">
                <fieldLabel>@L["GroupBuyPolicy"]</fieldLabel>
            </div>
            <div class="col-10">
                <div class="col-12">
                    <TextEdit Placeholder="@L["GroupBuyCondition"]" @bind-Text="CreateGroupBuyDto.GroupBuyCondition" MaxLength="60" />
                </div>
                <div class="col-12">
                    <Blazored.TextEditor.BlazoredTextEditor @ref="@GroupBuyHtml">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-image"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-video"></button>
                            </span>
                        </ToolbarContent>
                    </Blazored.TextEditor.BlazoredTextEditor>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
            </div>
            <div class="col-10">
                <div class="col-12">
                    <TextEdit Placeholder="@L["CustomerInformation"]" @bind-Text="@CreateGroupBuyDto.CustomerInformation" MaxLength="60" />
                </div>
                <div class="col-12">
                    <Blazored.TextEditor.BlazoredTextEditor @ref="@CustomerInformationHtml">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-image"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-video"></button>
                            </span>
                        </ToolbarContent>
                    </Blazored.TextEditor.BlazoredTextEditor>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
            </div>
            <div class="col-10">
                <div class="col-12">
                    <TextEdit Placeholder="@L["ExchangePolicy"]" @bind-Text="@CreateGroupBuyDto.ExchangePolicy" MaxLength="60" ShowCount />
                </div>
                <div class="col-12">
                    <Blazored.TextEditor.BlazoredTextEditor @ref="@ExchangePolicyHtml">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-image"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-video"></button>
                            </span>
                        </ToolbarContent>
                    </Blazored.TextEditor.BlazoredTextEditor>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                <fieldLabel>@L["NotifyEmail"]</fieldLabel>
            </div>
            <div class="col-10">
                <div class="col-12">
                    <Blazored.TextEditor.BlazoredTextEditor @ref="@NotifyEmailHtml">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-image"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-video"></button>
                            </span>
                        </ToolbarContent>
                    </Blazored.TextEditor.BlazoredTextEditor>
                </div>
            </div>
        </div>
    </CardBody>
</Card>
<div class="row">
    <div class="col-12 text-lg-end">
        <Button Type="@ButtonType.Button" class="btn btn-danger" Clicked="BackToGroupBuyList">@L["Cancel"]</Button>
        <Button Type="@ButtonType.Button" class="btn btn-primary" Clicked="CreateEntityAsync"> <i class="fa fa-check"></i> @L["Save"]</Button>
    </div>
</div>
@code {

}




