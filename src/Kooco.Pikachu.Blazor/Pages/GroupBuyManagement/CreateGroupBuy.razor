@page "/GroupBuyManagement/GroupBuyList/New"
@using Kooco.Pikachu.Blazor.Pages.Components.Icons
@using Kooco.Pikachu.EnumValues;
@using Kooco.Pikachu.GroupBuyOrderInstructions
@using Kooco.Pikachu.GroupBuys;
@using Kooco.Pikachu.GroupPurchaseOverviews
@using Kooco.Pikachu.ImageCompressors
@using Kooco.Pikachu.Images
@using Kooco.Pikachu.Items.Dtos;
@using Kooco.Pikachu.Tenants
@using Microsoft.Extensions.Configuration;
@using Pikachu.Items;
@using Pikachu.Localization;
@using Microsoft.Extensions.Localization;
@using System.ComponentModel;
@using Blazorise.Components;
@using Blazorise.LoadingIndicator;
@using Kooco.Pikachu.Blazor.Helpers;
@inherits PikachuComponentBase
@inject IMyTenantAppService MyTenantAppService
@inject IGroupBuyAppService AppService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<PikachuResource> L
@inject IMessageService _message
@inject IConfiguration _configuration
@inject IJSRuntime JSRuntime
@inject IImageCompressorService ImageCompressorService
@attribute [Authorize]

<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script src="https://cdn.rawgit.com/harvesthq/chosen/gh-pages/chosen.jquery.min.js"></script>
<link href="https://cdn.rawgit.com/harvesthq/chosen/gh-pages/chosen.min.css" rel="stylesheet" />
<style>
    .row {
        margin-top: 10px;
    }

    .drag-drop-span {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        max-height: 55px !important;
    }

        .drag-drop-span i {
            cursor: pointer;
        }

    .color-scheme > .b-input-color-picker-preview {
        height: 9.55rem;
    }
</style>

       <Heading Size="HeadingSize.Is3" @onclick="NavigateToGroupBuyList" style="cursor: pointer;">
       
        @L["NewGroupBuy"]
    </Heading>
<LoadingIndicator @ref="Loading" FullScreen FadeIn></LoadingIndicator>
<Card>
    <CardBody>
        <div class="col-12">
            <h4>@L["SalesURL"]</h4>
        </div>
        <div class="row">
            <div class="col-2">
                <label>@L["SalesURL1"]</label>
            </div>
            <div class="col-10">
                <TextEdit @bind-Text="@CreateGroupBuyDto.EntryURL" ReadOnly />
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                <label>@L["SalesURL2"]</label>
            </div>
            <div class="col-10">
                <TextEdit @bind-Text="@CreateGroupBuyDto.EntryURL2" />
            </div>
        </div>

        <div class="row">
            <div class="col-2">
                <label>
                    @L["ShortCode"]
                    <span class="text-danger"> *</span>
                </label>
            </div>
            <div class="col-10">
                <Validations @ref="@EditValidationsRef" Model="@CreateGroupBuyDto" ValidateOnLoad="false">
                    <Validation UsePattern>
                        <Addons>
                            <Addon AddonType="AddonType.Start">
                                <AddonLabel Style="background-color: #f5f5f7">
                                    @((string.IsNullOrWhiteSpace(CreateGroupBuyDto.ShortCode) ? 0 : (CreateGroupBuyDto.ShortCode.Count())))/@(12)
                                </AddonLabel>
                            </Addon>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit Pattern="^[A-Za-z0-9]{4,12}$" MaxLength="12" @bind-Text="@CreateGroupBuyDto.ShortCode">
                                    <Feedback>
                                        <ValidationError>@L["ShortCodePatternDoesnotMatch"]</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Addon>
                        </Addons>
                    </Validation>
                </Validations>
            </div>
        </div>
        <Divider></Divider>
        <div class="row">
            <div class="col-2">
                <label>@L["GroupBuyName"] <span class="text-danger"> *</span></label>
            </div>
            <div class="col-10">
                <Addons>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit MaxLength="@maxtextCount" @bind-Text="@CreateGroupBuyDto.GroupBuyName" />
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <AddonLabel Style="background-color: #f5f5f7">
                            @(string.IsNullOrWhiteSpace(CreateGroupBuyDto.GroupBuyName) ? 0 : (CreateGroupBuyDto.GroupBuyName.Count()))/@maxtextCount
                        </AddonLabel>
                    </Addon>
                </Addons>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                  <label>@L["SEODescription"]
                <Span>
                                                            <Tooltip Text="@L["SEODescriptionInfo"]">
                                                                <Icon class="fa-question-circle" />
                                                            </Tooltip>
                                                        </Span>
                </label>
            </div>
            <div class="col-10">
                <Addons>
                    <Addon AddonType="AddonType.Body">
                        <MemoEdit MaxLength="@maxtextCount" @bind-Text="@CreateGroupBuyDto.SubjectLine" Rows="5" />
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <AddonLabel Style="background-color: #f5f5f7">
                            @(string.IsNullOrWhiteSpace(CreateGroupBuyDto.SubjectLine) ? 0 : (CreateGroupBuyDto.SubjectLine.Count()))/@maxtextCount
                        </AddonLabel>
                    </Addon>
                </Addons>
            </div>
        </div>
        <div class="row">
            <div class="col-2">@L["GroupBuyTime"]</div>
            <div class="col-5">
                <DatePicker TValue="DateTime?" @bind-Date="CreateGroupBuyDto.StartTime" TimeAs24hr InputMode="DateInputMode.DateTime" Placeholder="@L["StartTime"]" />
            </div>
            <div class="col-5">
                <DatePicker TValue="DateTime?" @bind-Date="CreateGroupBuyDto.EndTime" TimeAs24hr InputMode="DateInputMode.DateTime" Placeholder="@L["EndTime"]" />
            </div>
        </div>

        <div class="row">
            <div class="col-2">
                <label>
                    @L["NotificationBar"]
                </label>
            </div>
            <div class="col-10">
                <TextEdit @bind-Text="@CreateGroupBuyDto.NotificationBar" />
            </div>
        </div>

        @* <div class="row">
        <div class="col-2">
        <label>@L["GroupBuyShortName"]</label>
        </div>
        <div class="col-10">
        <Addons>
        <Addon AddonType="AddonType.Body">
        <TextEdit MaxLength="@maxtextCount" @bind-Text="@CreateGroupBuyDto.ShortName" />
        </Addon>
        <Addon AddonType="AddonType.End">
        <AddonLabel Style="background-color: #f5f5f7">
        @(string.IsNullOrWhiteSpace(CreateGroupBuyDto.ShortName) ? 60 : (maxtextCount - CreateGroupBuyDto.ShortName.Count()))/@maxtextCount
        </AddonLabel>
        </Addon>
        </Addons>
        </div>
        </div> *@
        @* <Div Class="row">
        <Div Class="col-2">
        <label>@L["Facebook"]</label>
        </Div>
        <Div Class="col-10">
        <TextEdit @bind-Text="@CreateGroupBuyDto.FacebookLink" />
        </Div>
        </Div>
        <Div Class="row">
        <Div Class="col-2">
        <label>@L["Instagram"]</label>
        </Div>
        <Div Class="col-10">
        <TextEdit @bind-Text="@CreateGroupBuyDto.InstagramLink" />
        </Div>
        </Div>
        <Div Class="row">
        <Div Class="col-2">
        <label>@L["LINE"]</label>
        </Div>
        <Div Class="col-10">
        <TextEdit @bind-Text="@CreateGroupBuyDto.LINELink" />
        </Div>
        </Div> *@
        <div class="row">
            <div class="col-2">
                <label>
                    @L["GroupBuyLogo"]
                    <span class="text-danger"> *</span>
                </label>
            </div>
            <div class="col-10">
                <Div Class="@((CreateGroupBuyDto.LogoURL != null ? "has-images" : "") + " container-less-filepicker filepicker-sm")">
                    <Field>
                        <FilePicker FilePickerLocalizer="(key, args) => LocalizeFilePicker(key, args)"
                                    @ref="LogoPickerCustom"
                                    Changed="OnLogoUploadAsync"
                                    ShowMode="FilePickerShowMode.List"
                                    Accept="@(string.Join(", ", Constant.ValidImageExtensions))">
                        </FilePicker>
                    </Field>
                </Div>
            </div>
            @if (CreateGroupBuyDto.LogoURL != null)
            {
                <div class="col-2"></div>
                <div class="col-10">
                    <div class="image-list-container">
                        <div>
                            <div class="image-container">
                                <Image class="blur-image" Source="@CreateGroupBuyDto.LogoURL" Text="Logo Image" Fluid />
                                <button class="delete-button" @onclick="() => DeleteLogoAsync(logoBlobName)">
                                    <i class="fa fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        @* <div class="row">
        <div class="col-2">
        <label>@L["GroupBuyBanner"]</label>
        </div>
        <div class="col-10">
        <Field>
        <FilePicker @ref="BannerPickerCustom"
        Changed="OnBannerUploadAsync"
        ShowMode="FilePickerShowMode.List"
        Accept=".jpg, .png, .svg, .jpeg, .webp">
        <FileTemplate>
        <Div Flex="Flex.JustifyContent.Between">
        <Div>
        <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
        <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
        </Div>
        <Div Class="ps-2">
        <Div>
        @if (context.File.Status == FileEntryStatus.Ready)
        {
        <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
        }
        else if (context.File.Status == FileEntryStatus.Uploading)
        {
        <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
        }
        else if (context.File.Status == FileEntryStatus.Uploaded)
        {
        <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
        }
        else if (context.File.Status == FileEntryStatus.Error)
        {
        <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
        }
        </Div>
        <Div>
        <Icon TextColor="TextColor.Danger" Name="IconName.Delete" class="cursor-pointer" Clicked="context.RemoveFile" />
        </Div>
        </Div>
        </Div>
        </FileTemplate>
        <ButtonsTemplate>
        <Progress Value="@BannerPickerCustom.GetProgressPercentage()" />
        </ButtonsTemplate>
        </FilePicker>
        </Field>

        </div>
        @if (CreateGroupBuyDto.BannerURL != null)
        {
        <div Class="row">
        <div class="col-2"></div>
        <div class="col-10">
        <div class="image-list-container">

        <div class="image-container">
        <Image class="blur-image" Source="@CreateGroupBuyDto.BannerURL" Text="Logo Image" Fluid />
        <button class="delete-button" @onclick="() => DeleteBannerAsync(bannerBlobName)">
        <i class="fa fa-trash"></i>
        </button>
        </div>

        </div>
        </div>
        </div>
        }
        </div> *@

        <Divider></Divider>
        <div class="row">
            <div class="col-2">@L["Logistic"]</div>
            <div class="col-2">@L["FreeShipping"]</div>
            <div class="col-2"> <Switch TValue="bool" @bind-Checked="@CreateGroupBuyDto.FreeShipping"></Switch></div>
            <div class="col-1">@L["Threshold"]</div>
            <div class="col-2">  <InputNumber id="h-threshold" class="form-control" min="0" @bind-Value="CreateGroupBuyDto.FreeShippingThreshold" DisplayName="Free Shipping Threshold"></InputNumber></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">@L["AllowShipToOuterIsland"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="AllowShipToOuterTaiwanProxy"></Switch></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">@L["AllowShipToOverSea"]</div>
            <div class="col-4"><Switch TValue="bool" @bind-Checked="AllowShipOverseaProxy"></Switch></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                @L["ShippingMethod"]
                <span class="text-danger"> *</span>
            </div>
            <div class="col-8">
                @if (HasNormalMethods())
{
                <label class="form-label">@L["Normal"]</label><br />

                @if (CreateGroupBuyDto.AllowShipToOuterTaiwan && !CreateGroupBuyDto.AllowShipOversea)
                {
                    @foreach (string item in OrderedDeliveryMethods)
                    {
                        if (item == Enum.GetName(DeliveryMethod.BlackCat1) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliveryNormal) ||
                        item == Enum.GetName(DeliveryMethod.SevenToElevenC2C) ||
                        item == Enum.GetName(DeliveryMethod.SevenToEleven1))
                        {

                            <label for="@item" class="form-label me-2">
                                <input type="checkbox"
                                class="form-check-input"
                                id="@item"
                                disabled="@(((CreateGroupBuyDto.ExcludeShippingMethod != null) && (CreateGroupBuyDto.ExcludeShippingMethod.Contains("DeliveredByStore")) && item != "DeliveredByStore")||CheckForShippingMethodData(item)||CreateGroupBuyDto.IsEnterprise||!IsShippingMethodEnabled(item)||HasDifferentItemTemperatures)"
                                checked="@((CreateGroupBuyDto.ExcludeShippingMethod != null) && (CreateGroupBuyDto.ExcludeShippingMethod.Contains(item)))"
                                @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                @L[EnumHelper.GetDescription(Enum.Parse<DeliveryMethod>(item))]
                            </label>

                            @if (item == Enum.GetName(DeliveryMethod.FamilyMartC2C)
                         || item == Enum.GetName(DeliveryMethod.BlackCat1))
                            {
                                <br />
                                <Div Class="mt-1"></Div>
                            }
                        }
                    }
                }
                else
                {
                    @foreach (string item in OrderedDeliveryMethods)
                    {
                        if (item == Enum.GetName(DeliveryMethod.PostOffice) ||
                        item == Enum.GetName(DeliveryMethod.BlackCat1) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliveryNormal) ||
                        item == Enum.GetName(DeliveryMethod.SevenToEleven1) ||
                        item == Enum.GetName(DeliveryMethod.SevenToElevenC2C) ||
                        item == Enum.GetName(DeliveryMethod.FamilyMart1) ||
                        item == Enum.GetName(DeliveryMethod.FamilyMartC2C) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliverySevenElevenNormal))
                        {

                            <label for="@item" class="form-label me-2">
                                <input type="checkbox"
                                class="form-check-input"
                                id="@item"
                                disabled="@(((CreateGroupBuyDto.ExcludeShippingMethod != null) && (CreateGroupBuyDto.ExcludeShippingMethod.Contains("DeliveredByStore"))&&item!="DeliveredByStore")||CheckForShippingMethodData(item)||CreateGroupBuyDto.IsEnterprise||!IsShippingMethodEnabled(item)||HasDifferentItemTemperatures)"
                                checked="@((CreateGroupBuyDto.ExcludeShippingMethod != null) && (CreateGroupBuyDto.ExcludeShippingMethod.Contains(item)))"
                                @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                @L[EnumHelper.GetDescription(Enum.Parse<DeliveryMethod>(item))]
                            </label>

                            @if (item == Enum.GetName(DeliveryMethod.FamilyMartC2C)
                         || item == Enum.GetName(DeliveryMethod.BlackCat1))
                            {
                                <br />
                                <Div Class="mt-1"></Div>
                            }
                        }
                    }
                }
                <br />
                }
                @if (HasFreezeMethods())
{
                <Div Class="mt-2"></Div>
                <label class="form-label">@L["Freeze"]</label><br />
                @if (CreateGroupBuyDto.AllowShipToOuterTaiwan && !CreateGroupBuyDto.AllowShipOversea)
                {
                    @foreach (string item in OrderedDeliveryMethods)
                    {
                        if (item == Enum.GetName(DeliveryMethod.BlackCatFreeze) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliveryFreeze))
                        {

                            <label for="@item" class="form-label me-2">
                                <input type="checkbox"
                                class="form-check-input"
                                id="@item"
                                disabled="@(((CreateGroupBuyDto.ExcludeShippingMethod != null) && (CreateGroupBuyDto.ExcludeShippingMethod.Contains("DeliveredByStore")) && item != "DeliveredByStore")||CheckForShippingMethodData(item)||CreateGroupBuyDto.IsEnterprise||!IsShippingMethodEnabled(item)||HasDifferentItemTemperatures)"
                                checked="@((CreateGroupBuyDto.ExcludeShippingMethod != null) && (CreateGroupBuyDto.ExcludeShippingMethod.Contains(item)))"
                                @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                @L[EnumHelper.GetDescription(Enum.Parse<DeliveryMethod>(item))]
                            </label>

                        }
                    }
                }
                else
                {
                    @foreach (string item in OrderedDeliveryMethods)
                    {
                        if (item == Enum.GetName(DeliveryMethod.BlackCatFreeze) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliveryFreeze) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliverySevenElevenFreeze))
                        {

                            <label for="@item" class="form-label me-2">
                                <input type="checkbox"
                                class="form-check-input"
                                id="@item"
                                disabled="@(((CreateGroupBuyDto.ExcludeShippingMethod != null) && (CreateGroupBuyDto.ExcludeShippingMethod.Contains("DeliveredByStore"))&&item!="DeliveredByStore")||CheckForShippingMethodData(item)||CreateGroupBuyDto.IsEnterprise||!IsShippingMethodEnabled(item)||HasDifferentItemTemperatures)"
                                checked="@((CreateGroupBuyDto.ExcludeShippingMethod != null) && (CreateGroupBuyDto.ExcludeShippingMethod.Contains(item)))"
                                @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                @L[EnumHelper.GetDescription(Enum.Parse<DeliveryMethod>(item))]
                            </label>

                        }
                    }
                }
                <br />
                }
                @if (HasFrozenMethods())
{
                <Div Class="mt-2"></Div>
                <label class="form-label">@L["Frozen"]</label><br />
                @if (CreateGroupBuyDto.AllowShipToOuterTaiwan && !CreateGroupBuyDto.AllowShipOversea)
                {
                    @foreach (string item in OrderedDeliveryMethods)
                    {
                        if (item == Enum.GetName(DeliveryMethod.BlackCatFrozen) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliveryFrozen))
                        {

                            <label for="@item" class="form-label me-2">
                                <input type="checkbox"
                                class="form-check-input"
                                id="@item"
                                disabled="@(((CreateGroupBuyDto.ExcludeShippingMethod != null) && (CreateGroupBuyDto.ExcludeShippingMethod.Contains("DeliveredByStore")) && item != "DeliveredByStore")||CheckForShippingMethodData(item)||CreateGroupBuyDto.IsEnterprise||!IsShippingMethodEnabled(item)||HasDifferentItemTemperatures)"
                                checked="@((CreateGroupBuyDto.ExcludeShippingMethod != null) && (CreateGroupBuyDto.ExcludeShippingMethod.Contains(item)))"
                                @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                @L[EnumHelper.GetDescription(Enum.Parse<DeliveryMethod>(item))]
                            </label>

                        }
                    }
                }
                else
                {
                    @foreach (string item in OrderedDeliveryMethods)
                    {
                        if (item == Enum.GetName(DeliveryMethod.BlackCatFrozen) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliveryFrozen) ||
                        item == Enum.GetName(DeliveryMethod.SevenToElevenFrozen) ||
                        item == Enum.GetName(DeliveryMethod.TCatDeliverySevenElevenFrozen))
                        {

                            <label for="@item" class="form-label me-2">
                                <input type="checkbox"
                                class="form-check-input"
                                id="@item"
                                disabled="@(((CreateGroupBuyDto.ExcludeShippingMethod != null) && (CreateGroupBuyDto.ExcludeShippingMethod.Contains("DeliveredByStore"))&&item!="DeliveredByStore")||CheckForShippingMethodData(item)||CreateGroupBuyDto.IsEnterprise||!IsShippingMethodEnabled(item)||HasDifferentItemTemperatures)"
                                checked="@((CreateGroupBuyDto.ExcludeShippingMethod != null) && (CreateGroupBuyDto.ExcludeShippingMethod.Contains(item)))"
                                @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                                @L[EnumHelper.GetDescription(Enum.Parse<DeliveryMethod>(item))]
                            </label>

                        }
                    }
                }
                <br />
                }
                <Div Class="mt-2"></Div>
                <label class="form-label">@L["DeliveryTypeOthers"]</label><br />
                @foreach (string item in OrderedDeliveryMethods)
                {
                    if (item == Enum.GetName(DeliveryMethod.HomeDelivery))
                    {

                        <label for="@item" class="form-label me-2">
                            <input type="checkbox"
                            class="form-check-input"
                            id="@item"
                            
                            checked="@((CreateGroupBuyDto.ExcludeShippingMethod != null) && (CreateGroupBuyDto.ExcludeShippingMethod.Contains(item)))"
                            @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                            @L[EnumHelper.GetDescription(Enum.Parse<DeliveryMethod>(item))]
                        </label>

                    }

                    if (item == Enum.GetName(DeliveryMethod.DeliveredByStore) ||
                    item == Enum.GetName(DeliveryMethod.SelfPickup))
                    {
                        <label for="@item" class="form-label me-2">
                            <input type="checkbox"
                            class="form-check-input"
                            id="@item"
                           
                            checked="@(((CreateGroupBuyDto.ExcludeShippingMethod != null) && (CreateGroupBuyDto.ExcludeShippingMethod.Contains(item))||( item == Enum.GetName(DeliveryMethod.SelfPickup) &&CreateGroupBuyDto.IsEnterprise)))"
                            @onchange="(value) => OnShippingMethodCheckedChange(item, value)" />
                            @L[EnumHelper.GetDescription(Enum.Parse<DeliveryMethod>(item))]
                        </label>
                    }
                }
            </div>
        </div>

        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">@L["DeliveryTimePreferance"]</div>
            <div class="col-8">
                @if (CreateGroupBuyDto.ExcludeShippingMethod != null && CreateGroupBuyDto.ExcludeShippingMethod.Contains("BlackCat1"))
                {

                    <label class="form-label">@L["EcpayBlackCat"] / @L[PikachuResource.TCatDelivery]<span class="text-danger"> </span></label>
                }
                else if (CreateGroupBuyDto.ExcludeShippingMethod != null && CreateGroupBuyDto.ExcludeShippingMethod.Contains("BlackCatFreeze"))
                {

                    <label class="form-label">@L["BlackCatFreeze"] / @L[PikachuResource.TCatDelivery]<span class="text-danger"> </span></label>
                }
                else if (CreateGroupBuyDto.ExcludeShippingMethod != null && CreateGroupBuyDto.ExcludeShippingMethod.Contains("BlackCatFrozen"))
                {

                    <label class="form-label">@L["BlackCatFrozen"] / @L[PikachuResource.TCatDelivery]<span class="text-danger"> </span></label>
                }
                else
                {
                    <label class="form-label">@L["EcpayBlackCat"]<span class="text-danger"> </span></label>
                }
            </div>
            <div class="col-2"></div>
            <div class="col-2"></div>
            <div class="col-8">
                @if (DeliveryTimeConts.BlackCat != null)
                {
                    @foreach (string island in DeliveryTimeConts.BlackCat)
                    {
                        @if ((CreateGroupBuyDto.ExcludeShippingMethod is not null) &&
                     ((CreateGroupBuyDto.ExcludeShippingMethod.Contains("BlackCat1")) ||
                     (CreateGroupBuyDto.ExcludeShippingMethod.Contains("BlackCatFreeze")) ||
                     (CreateGroupBuyDto.ExcludeShippingMethod.Contains("BlackCatFrozen")) ||
                     (CreateGroupBuyDto.ExcludeShippingMethod.Contains("TCatDeliveryNormal")) ||
                     (CreateGroupBuyDto.ExcludeShippingMethod.Contains("TCatDeliveryFreeze")) ||
                     (CreateGroupBuyDto.ExcludeShippingMethod.Contains("TCatDeliveryFrozen")) ||
                     (CreateGroupBuyDto.ExcludeShippingMethod.Contains("TCatDeliverySevenElevenNormal")) ||
                     (CreateGroupBuyDto.ExcludeShippingMethod.Contains("TCatDeliverySevenElevenFreeze")) ||
                     (CreateGroupBuyDto.ExcludeShippingMethod.Contains("TCatDeliverySevenElevenFrozen"))))
                        {

                            if (CreateGroupBuyDto.BlackCatDeliveryTime.IsNullOrWhiteSpace() || CreateGroupBuyDto.BlackCatDeliveryTime == "[]") BlackCatDeliveryTimeCheckedChange("Inapplicable", new ChangeEventArgs { Value = true });


                            <label for="@island" class="form-label me-2">
                                <input type="checkbox"
                                class="form-check-input"
                                id="@island"
                                checked="@(CreateGroupBuyDto.BlackCatDeliveryTime != null && CreateGroupBuyDto.BlackCatDeliveryTime.Contains(island))"
                                disabled="@((CreateGroupBuyDto.BlackCatDeliveryTime.Contains("UnableToSpecifyDuringPeakPeriods")&& island!="UnableToSpecifyDuringPeakPeriods"))"
                                @onchange="(value) => BlackCatDeliveryTimeCheckedChange(island, value)" />
                                @L[island]
                            </label>
                        }
                        else
                        {


                            <label for="@island" class="form-label me-2">
                                <input disabled
                                type="checkbox"
                                class="form-check-input"
                                id="@island"
                               
                                checked="@(CreateGroupBuyDto.BlackCatDeliveryTime != null && CreateGroupBuyDto.BlackCatDeliveryTime.Contains(island))"
                                @onchange="(value) => BlackCatDeliveryTimeCheckedChange(island, value)" />
                                @L[island]
                            </label>
                        }
                    }
                }
            </div>
            <div class="col-2"></div>
            <div class="col-2"></div>
            <div class="col-8">
                <Div Class="mt-2"></Div>
                <label class="form-label">@L["HomeDelivery"]<span class="text-danger"> </span></label>
            </div>
            <div class="col-2"></div>
            <div class="col-2"></div>
            <div class="col-8">
                @if (DeliveryTimeConts.HomeDelivery != null)
                {
                    @foreach (string island in DeliveryTimeConts.HomeDelivery)
                    {
                        @if ((CreateGroupBuyDto.ExcludeShippingMethod is not null) &&
                     (CreateGroupBuyDto.ExcludeShippingMethod.Contains("HomeDelivery")))
                        {
                            if (CreateGroupBuyDto.HomeDeliveryDeliveryTime.IsNullOrWhiteSpace() || CreateGroupBuyDto.HomeDeliveryDeliveryTime == "[]") CreateGroupBuyDto.HomeDeliveryDeliveryTime = "[\"Inapplicable\"]";
                            <label for="@(island)_HomeDelivery" class="form-label me-2">
                                <input type="checkbox"
                                class="form-check-input"
                                id="@island"
                                disabled="@(island is not PikachuResource.UnableToSpecifyDuringPeakPeriods ?
                                                    IsUnableToSpecifyDuringPeakPeriodsForHomeDelivery :
                                                    false)"
                                checked="@(CreateGroupBuyDto.HomeDeliveryDeliveryTime is not null &&
                                                  CreateGroupBuyDto.HomeDeliveryDeliveryTime.Contains(island))"
                                @onchange="(value) => HomeDeliveryTimeCheckedChange(island, value)" />
                                @L[island]
                            </label>
                        }
                        else
                        {
                            CreateGroupBuyDto.HomeDeliveryDeliveryTime = null;
                            <label for="@(island)_HomeDelivery" class="form-label me-2">
                                <input disabled
                                type="checkbox"
                                class="form-check-input"
                                id="@island"
                                checked="@(CreateGroupBuyDto.HomeDeliveryDeliveryTime is not null &&
                                                  CreateGroupBuyDto.HomeDeliveryDeliveryTime.Contains(island))"
                                @onchange="(value) => HomeDeliveryTimeCheckedChange(island, value)" />
                                @L[island]
                            </label>
                        }
                    }
                }
            </div>
            <div class="col-2"></div>
            <div class="col-2"></div>

            <div class="col-8">
                <Div Class="mt-2"></Div>
                <label class="form-label">@L["SelfPickup"]<span class="text-danger"> </span></label>
            </div>
            <div class="col-2"></div>
            <div class="col-2"></div>
            <div class="col-8">
                @if (DeliveryTimeConts.SelfPickUp != null)
                {
                    @foreach (string island in DeliveryTimeConts.SelfPickUp)
                    {
                        @if ((CreateGroupBuyDto.ExcludeShippingMethod is not null) &&
                     (CreateGroupBuyDto.ExcludeShippingMethod.Contains("SelfPickup")))
                        {
                            if (CreateGroupBuyDto.SelfPickupDeliveryTime.IsNullOrWhiteSpace() || CreateGroupBuyDto.SelfPickupDeliveryTime == "[]") CreateGroupBuyDto.SelfPickupDeliveryTime = "[\"Inapplicable\"]";
                            <label for="@(island)_SelfPickUp" class="form-label me-2">
                                <input type="checkbox"
                                class="form-check-input"
                                id="@island"
                                checked="@(CreateGroupBuyDto.SelfPickupDeliveryTime is not null &&
                                                      CreateGroupBuyDto.SelfPickupDeliveryTime.Contains(island))"
                                @onchange="(value) => SelfPickupDeliveryTimeCheckedChange(island, value)" />
                                @L[island]
                            </label>
                        }
                        else
                        {
                            CreateGroupBuyDto.SelfPickupDeliveryTime = null;
                            <label for="@(island)_SelfPickUp" class="form-label me-2">
                                <input disabled
                                type="checkbox"
                                class="form-check-input"
                                id="@island"
                                checked="@(CreateGroupBuyDto.SelfPickupDeliveryTime is not null &&
                                                      CreateGroupBuyDto.SelfPickupDeliveryTime.Contains(island))"
                                @onchange="(value) => SelfPickupDeliveryTimeCheckedChange(island, value)" />
                                @L[island]
                            </label>
                        }
                    }
                }
            </div>
            <div class="col-2"></div>
            <div class="col-2"></div>
            <div class="col-8">
                <Div Class="mt-2"></Div>
                <label class="form-label">@L["DeliveredByStore"]<span class="text-danger"> </span></label>
            </div>
            <div class="col-2"></div>
            <div class="col-2"></div>
            <div class="col-8">
                @if (DeliveryTimeConts.DeliveredByStore != null)
                {
                    @foreach (string island in DeliveryTimeConts.DeliveredByStore)
                    {
                        @if ((CreateGroupBuyDto.ExcludeShippingMethod is not null) &&
                     (CreateGroupBuyDto.ExcludeShippingMethod.Contains("DeliveredByStore")))
                        {
                            if (CreateGroupBuyDto.DeliveredByStoreDeliveryTime.IsNullOrWhiteSpace() || CreateGroupBuyDto.DeliveredByStoreDeliveryTime == "[]") CreateGroupBuyDto.DeliveredByStoreDeliveryTime = "[\"Inapplicable\"]";
                            <label for="@(island)_DeliveredByStore" class="form-label me-2">
                                <input type="checkbox"
                                class="form-check-input"
                                id="@island"
                                disabled="@(island is not PikachuResource.UnableToSpecifyDuringPeakPeriods ?
                                                    IsUnableToSpecifyDuringPeakPeriodsForDeliveredByStore :
                                                    false)"
                                checked="@(CreateGroupBuyDto.DeliveredByStoreDeliveryTime is not null &&
                                                  CreateGroupBuyDto.DeliveredByStoreDeliveryTime.Contains(island))"
                                @onchange="(value) => DeliverdByStoreDeliveryTimeCheckedChange(island, value)" />
                                @L[island]
                            </label>
                        }
                        else
                        {
                            CreateGroupBuyDto.DeliveredByStoreDeliveryTime = null;
                            <label for="@(island)_DeliveredByStore" class="form-label me-2">
                                <input disabled
                                type="checkbox"
                                class="form-check-input"
                                id="@island"
                                checked="@(CreateGroupBuyDto.DeliveredByStoreDeliveryTime is not null &&
                                                 CreateGroupBuyDto.DeliveredByStoreDeliveryTime.Contains(island))"
                                @onchange="(value) => DeliverdByStoreDeliveryTimeCheckedChange(island, value)" />
                                @L[island]
                            </label>
                        }
                    }
                }
            </div>
        </div>

        <Div Class="row">
            <Div Class="col-2"></Div>
            <Div Class="col-2">@L[PikachuResource.ProductType] <span class="text-danger"> *</span></Div>
            <Div Class="col-8">
                <select class="form-select"
                @onchange=OnProductTypeChange>
                    <option></option>
                    @foreach (ProductType value in Enum.GetValues<ProductType>())
                    {
                        <option value="@value">@L[value.ToString() ?? string.Empty]</option>
                    }
                </select>
            </Div>
        </Div>

       @if (ShowSelfPickupInfo)
{
    <div class="row mt-3">
        <div class="col-2">
            
        </div>
        <div class="col-2">
            <div class="col-md-12"><label class="form-label fw-bold text-danger">@L["SelfPickUpInfo"]</label></div>
            </div>
        <div class="col-8">
            <div class="row">
            
                <div class="col-md-6">
                    <label class="form-label">@L["ZipCode"] <span class="text-danger">*</span></label>
                    <TextEdit @bind-Text="CreateGroupBuyDto.SelfPickupZipCode"
                              Placeholder="@L["InputZipCode"]"
                              Style="background-color: #f7f8fa;" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">@L["City"] <span class="text-danger">*</span></label>
                    <TextEdit @bind-Text="CreateGroupBuyDto.SelfPickupCity"
                              Placeholder="@L["InputCityName"]"
                              Style="background-color: #f7f8fa;" />
                </div>
                <div class="col-md-12">
                    <label class="form-label">@L["Address"] <span class="text-danger">*</span></label>
                    <TextEdit @bind-Text="CreateGroupBuyDto.SelfPickupAddress"
                              Placeholder="@L["InputAddress"]"
                              Style="background-color: #f7f8fa;" />
                </div>
            </div>
        </div>
    </div>
}


        <Divider></Divider>
        <div class="row">
            <div class="col-2">@L["Gateway"]</div>
            <div class="col-2">@L["PaymentMethod"] <span class="text-danger"> *</span></div>
            <div class="col-8">

                @*   <input type="radio" class="form-check-input" name="PaymentGateway" id="payment-gateway-1" checked="@CreateGroupBuyDto.IsDefaultPaymentGateWay" @onclick="() => CreateGroupBuyDto.IsDefaultPaymentGateWay = true" />
                <label class="form-check-label" for="payment-gateway-1">
                @L["DefaultPaymentGateWay"]
                </label> *@
                <Check TValue="bool" Disabled=@(CreateGroupBuyDto.IsEnterprise||isPaymentMethodEnabled())
                Checked="@CreditCard"
                CheckedChanged="OnCreditCardCheckedChange">
                    @L["CreditCard"]
                </Check>
                <div class="row justify-content-center mb-2">
                    <div class="col-12">
                        @foreach (var period in Constant.InstallmentPeriods)
                        {
                            <Check Inline TValue="bool" Checked="@CreateGroupBuyDto.InstallmentPeriods.Contains(period)"
                            CheckedChanged="(e) => OnInstallmentPeriodChange(e, period)"
                            Disabled="IsInstallmentPeriodEnabled(period)">
                                @L["InstallmentPeriods." + period]
                            </Check>
                        }
                    </div>
                </div>
                <Check TValue="bool" Disabled=@(CreateGroupBuyDto.IsEnterprise||isPaymentMethodEnabled()) @bind-Checked="@EcPayVirtualBankTransfer">@L["EcPayVirtualBankTransfer"]</Check>
                <Check TValue="bool" Disabled=@(CreateGroupBuyDto.IsEnterprise || isManualBankTransferEnabled()) @bind-Checked="@ManualBankTransfer">@L["ManualBankTransfer"]</Check>
                <Check TValue="bool" Disabled=@(CreateGroupBuyDto.IsEnterprise||isLinePayPaymentMethodEnabled()) @bind-Checked="@IsLinePay">@L["LinePay"]</Check>
                <Check TValue="bool"
                @bind-Checked="@IsCashOnDelivery">
                    @L[PikachuResource.CashOnDelivery]
                </Check>
                @*              <Radio Inline TValue="string" CheckedChanged="@OnCreditCardChecked"   Value="@("CreditCard")">@L["CreditCard"]</Radio>
                <Radio Inline TValue="string"  CheckedChanged="@OnTransferChecked"  Value="@("Transfer")">@L["Transfer"]</Radio> *@


            </div>
        </div>
        @*    <div class="row">
        <div class="col-2"></div>
        <div class="col-2"></div>
        <div class="col-8">
        <div class="form-check">
        <input type="radio" class="form-check-input" name="PaymentGateway" id="payment-gateway-2" checked="@(!CreateGroupBuyDto.IsDefaultPaymentGateWay)" @onclick="() => CreateGroupBuyDto.IsDefaultPaymentGateWay = false" />
        </div>
        </div>
        @*    <div class="col-7">
        <div class="col-7 form-control" style="background-color:white">
        @foreach (var item in PaymentMethodTags)
        {
        <Badge class="item-tags" CloseClicked="@(() => HandlePaymentTagDelete(item))">@item</Badge>
        }
        <div class="input-container">
        <input type="text" id="tag-input" class="tag-input" placeholder="New Tag"
        @bind-value="PaymentTagInputValue"
        @onkeyup="HandlePaymentTagInputKeyUp" />
        <i class="tag-input-placeholder-icon fa fa-plus"></i>
        </div>
        </div>
        <span class="text-danger">@PaymentMethodError</span>
        </div> *@
        @*  </div> *@
        <div class="row">
            <div class="col-2">@L["Invoice"]</div>
            <div class="col-2">@L["IssueInvoice"]</div>
            <div class="col-4"> <Switch TValue="bool" Disabled="@IsInvoiceEnable()" @bind-Checked="@CreateGroupBuyDto.IssueInvoice"></Switch></div>
        </div>
        @* <div class="row">
        <div class="col-2"></div>
        <div class="col-2 form-label">@L["AutoIssueTriplicateInvoice"]</div>
        <div class="col-4"> <Switch TValue="bool" @bind-Checked="@CreateGroupBuyDto.AutoIssueTriplicateInvoice"></Switch></div>
        </div> *@
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2 form-label">
                @L["InvoiceComment"]
            </div>
            <div class="col-8">
                <InputTextArea class="form-control" maxlength="200" @bind-Value="@CreateGroupBuyDto.InvoiceNote"></InputTextArea>
            </div>
        </div>
       @*  <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["TaxType"]</label>
            </div>
            <div class="col-5">
                <Select TValue="TaxType" Class="form-select"
                @bind-SelectedValue="@CreateGroupBuyDto.TaxType">
                    @foreach (var enumValue in Enum.GetValues(typeof(TaxType)))
                    {
                        <SelectItem Value="@enumValue">@L[enumValue.ToString()]</SelectItem>
                    }
                </Select>
            </div>
        </div> *@
        <Divider></Divider>
     @*    <div class="row">

            <div class="col-2 form-label">@L["AddOnProducts"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@CreateGroupBuyDto.AddOnProduct"></Switch></div>
        </div> *@
        <div class="row">
                       <div class="col-2">@L["AdvanceSetting"]</div>
            <div class="col-2 form-label">@L["HideCredention"]</div>
            <div class="col-4"> <Switch TValue="bool" @bind-Checked="@CreateGroupBuyDto.ProtectPrivacyData"></Switch></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2 form-label">@L["EnterprisePurchase"]</div>
            <div class="col-4">
                <Switch TValue="bool"
                Checked="@CreateGroupBuyDto.IsEnterprise"
                CheckedChanged="OnEnterPriseChange"
                CheckedExpression="@(() => CreateGroupBuyDto.IsEnterprise)" />
            </div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["InviteCode"]</label>
            </div>
            <div class="col-5">
                <TextEdit @bind-Text="@CreateGroupBuyDto.InviteCode" />
            </div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["ProfitShare"] %</label>
            </div>
            <div class="col-5">
                <InputNumber class="form-control" @bind-Value="@CreateGroupBuyDto.ProfitShare" max="100" />
            </div>
        </div>

        @*  <div class="row">
            <div class="col-2"></div>
             <div class="col-2">
            <label>@L["FaceBookPixelID"]</label>
            </div>
            <div class="col-5">
            <TextEdit class="form-control" @bind-Value="@CreateGroupBuyDto.FBID" />
            </div>
        </div> *@
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["FaceBookPixelID"]</label>
            </div>
            <div class="col-5">
                <TextEdit @bind-Text="@CreateGroupBuyDto.FBID" />
            </div>
        </div>


        <div class="row">
            <div class="col-2"></div>
            <div class="col-2">
                <label>@L["GAID"]</label>
            </div>
            <div class="col-5">
                <TextEdit @bind-Text="@CreateGroupBuyDto.GAID" />
            </div>
        </div>

        <Divider></Divider>
        <Div Class="row">
            <Div Class="col-2">@L["ColorSchemes"]</Div>
            <Div Class="col-2">
                @L["SelectColorTheme"]
                <Span Class="text-danger"> *</Span>
            </Div>
            <Div Class="col-8">
                <select class="form-select"
                @onchange=OnColorSchemeChange>
                    <option value="" selected>@L["ChooseColorTheme"]</option>
                    @foreach (ColorScheme value in Enum.GetValues<ColorScheme>())
                    {
                        <option value="@value">@L["Enum:ColorScheme." + (int)value]</option>
                    }
                </select>
            </Div>
        </Div>

        @if (IsColorPickerOpen)
        {
            <Div Class="row d-flex justify-content-center">
                <Div Class="col-2">
                    <label class="form-label">@L["Primary"]</label>
                    <ColorPicker Class="color-scheme" @bind-Color="@CreateGroupBuyDto.PrimaryColor" />
                    <TextEdit Disabled @bind-text="CreateGroupBuyDto.PrimaryColor" class="form-control mt-2" />
                </Div>

                <Div Class="col-2">
                    <label class="form-label">@L["Secondary"]</label>
                    <ColorPicker Class="color-scheme" @bind-Color="@CreateGroupBuyDto.SecondaryColor" />
                    <TextEdit Disabled @bind-text="CreateGroupBuyDto.SecondaryColor" class="form-control mt-2" />
                </Div>

                <Div Class="col-2">
                    <label class="form-label">@L["Background"]</label>
                    <ColorPicker Class="color-scheme" @bind-Color="@CreateGroupBuyDto.BackgroundColor" />
                    <TextEdit Disabled @bind-text="CreateGroupBuyDto.BackgroundColor" class="form-control mt-2" />
                </Div>

                <Div Class="col-2">
                    <label class="form-label d-none d-xl-block">@L["SecondaryBackground"]</label>
                    <label class="form-label d-block d-xl-none">@L["SecondaryBg"]</label>
                    <ColorPicker Class="color-scheme" @bind-Color="@CreateGroupBuyDto.SecondaryBackgroundColor" />
                    <TextEdit Disabled @bind-text="CreateGroupBuyDto.SecondaryBackgroundColor" class="form-control mt-2" />
                </Div>

                <Div Class="col-2">
                    <label class="form-label">@L["Alert"]</label>
                    <ColorPicker Class="color-scheme" @bind-Color="@CreateGroupBuyDto.AlertColor" />
                    <TextEdit Disabled @bind-text="CreateGroupBuyDto.AlertColor" class="form-control mt-2" />
                </Div>

                <Div Class="col-2">
                    <label class="form-label">@L["Block"]</label>
                    <ColorPicker Class="color-scheme" @bind-Color="@CreateGroupBuyDto.BlockColor" />
                    <TextEdit Disabled @bind-text="CreateGroupBuyDto.BlockColor" class="form-control mt-2" />
                </Div>
            </Div>
        }

        <Divider></Divider>

        <Div Class="row">
            <Div Class="col-2">@L["DisplayMethodForProductDetails"]<span class="text-danger"> *</span></Div>
            <Div Class="col-8">
                <select class="form-select"
                @onchange=OnProductDetailsDisplayMethodChange>
                    <option value="0" selected>@L["ChooseMethod"]</option>
                    @foreach (ProductDetailsDisplayMethod value in Enum.GetValues<ProductDetailsDisplayMethod>())
                    {
                        <option value="@value">@L[value.ToString()]</option>
                    }
                </select>
            </Div>
        </Div>

        <Divider></Divider>
        <div class="row">
            <div class="col-2"><label>@L["AddModule"]</label></div>
            <div class="col-3 d-flex gap-2">
                @if (CollapseItem.Count < 20)
                {
                    <Select TValue="GroupBuyTemplateType?"
                    SelectedValue="CreateGroupBuyDto.TemplateType"
                    @onchange="@((e) => SelectTemplate(e))"
                    Style="min-width: 300px;">
                        <option value="0" selected>@L["SelectTemplate"]</option>
                        @* <option value="@GroupBuyTemplateType.PikachuOne">@L["PikachuOne"]</option> *@
                        <option value="@GroupBuyTemplateType.PikachuTwo">@L["PikachuTwo"]</option>
                    </Select>
                    <Dropdown Disabled=@(CreateGroupBuyDto.TemplateType is null)>
                        <DropdownToggle Color="Color.Primary">
                            @L["SelectModule"]
                        </DropdownToggle>
                        <DropdownMenu>
                            @if (SelectedTemplate is GroupBuyTemplateType.PikachuOne)
                            {
                                @foreach (GroupBuyModuleType module in GetPikachuOneList())
                                {
                                    <DropdownItem Clicked='@(() => AddProductItem(module))'>
                                        @L[module.ToString()]
                                    </DropdownItem>
                                }
                            }
                            else if (SelectedTemplate is GroupBuyTemplateType.PikachuTwo)
                            {
                                @foreach (GroupBuyModuleType module in GetPikachuTwoList())
                                {
                                    <DropdownItem Clicked='@(() => AddProductItem(module))'>
                                        @L[module.ToString()]
                                    </DropdownItem>
                                }
                            }
                        </DropdownMenu>
                    </Dropdown>
                }
            </div>
        </div>

        <div ondragover="event.preventDefault();">
            @foreach (var module in CollapseItem)
            {
                <div class="d-flex">
                    <div class="p-2 flex-grow-1">
                        <Accordion>
                            <Collapse>
                                <CollapseHeader>
                                    <AccordionToggle Clicked="CollapseToggled">
                                        <i class="fa fa-trash text-danger me-2" @onclick="@(()=>RemoveCollapseItem(@module.Index))"></i>
                                        @L[module.GroupBuyModuleType.ToString()]

                                        @if (module.IsWarnedForInCompatible)
                                        {
                                            <Tooltip Text="@($"Incompatible Module for {L[SelectedTemplate.ToString()]}")"
                                            TriggerTargetId="tooltip-custom-target"
                                            Inline
                                            Style="margin-left: 5px;">
                                                <Badge Color="Color.Warning">
                                                    <i class="fas fa-circle-info" />
                                                </Badge>
                                            </Tooltip>
                                        }

                                    </AccordionToggle>
                                </CollapseHeader>
                                <CollapseBody>
                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.ProductGroupModule)
                                    {
                                        <div class="d-flex justify-content-end">
                                            <div style="width: 60px;">
                                                <select class="form-control form-control-sm" @onchange="(e) => OnProductGroupValueChange(e, module)">
                                                    <option value="3">3</option>
                                                    <option value="4">4</option>
                                                </select>
                                            </div>
                                        </div>
                                    }

                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.CarouselImages)
                                    {
                                        List<List<CreateImageDto>> carouselModules = CarouselModules.Select(s => s.Where(w => w.ModuleNumber == module.ModuleNumber).ToList()).Where(w => w.Count > 0).ToList();

                                        @foreach (List<CreateImageDto> carouselImages in carouselModules)
                                        {
                                            <div class="row">
                                                <div class="col-2">
                                                    <label>
                                                        @L["CarouselImages"]
                                                        <Span>
                                                            <Tooltip Display="Display.InlineBlock" Text="@(L["uploadUpto5Images"] + L["CarouselImagesSuggestedSize"])">
                                                                <Icon class="fa-question-circle" />
                                                            </Tooltip>
                                                        </Span>
                                                    </label>
                                                </div>
                                                <div class="col-10 ">
                                                    <Div Class="@(((carouselImages.Count > 0 && carouselImages.Any(a => !a.ImageUrl.IsNullOrEmpty())) ? "has-images" : "") + " container-less-filepicker")">
                                                        <Field>
                                                            <FilePicker @ref="CarouselFilePickers[carouselImages.GroupBy(g => g.ModuleNumber).FirstOrDefault().Key!.Value - 1]"
                                                            Disabled="carouselImages.Count >= 5"
                                                            Multiple
                                                            Changed="@(async (e) => await OnImageModuleUploadAsync(e,
                                                                                                                           carouselImages,
                                                                                                                           carouselImages.GroupBy(g => g.ModuleNumber).FirstOrDefault().Key!.Value,
                                                                                                                           CarouselFilePickers[carouselImages.GroupBy(g => g.ModuleNumber).FirstOrDefault().Key!.Value - 1],
                                                                                                                           ImageType.GroupBuyCarouselImage))"
                                                            ShowMode="FilePickerShowMode.List"
                                                            Accept="@(string.Join(", ", Constant.ValidImageExtensions))">
                                                            </FilePicker>
                                                        </Field>
                                                    </Div>
                                                </div>
                                                @if (carouselImages.Count > 0 && carouselImages.Any(a => !a.ImageUrl.IsNullOrEmpty()))
                                                {
                                                    <Div Class="col-2"></Div>
                                                    <Div Class="col-10">
                                                        <Div Class="image-list-container">
                                                            @foreach (CreateImageDto image in carouselImages.Where(w => !w.ImageUrl.IsNullOrEmpty()).ToList())
                                                            {
                                                                <Div Class="d-flex flex-column align-items-center justify-content-center">
                                                                    <Div Class="image-container">
                                                                        <Image class="blur-image" Source="@image.ImageUrl" Text="Carousel Image"
                                                                        Fluid />
                                                                        <button class="delete-button" @onclick="() => DeleteImageAsync(image.BlobImageName, carouselImages, ImageType.GroupBuyCarouselImage)">
                                                                            <i class="fa fa-trash"></i>
                                                                        </button>
                                                                    </Div>
                                                                    <button type="button"
                                                                    class="btn btn-sm btn-primary mt-1"
                                                                    @onclick="() => OpenAddLinkModal(image)">
                                                                        @L["AddLink"]
                                                                    </button>
                                                                </Div>
                                                            }
                                                        </Div>
                                                    </Div>
                                                }
                                                <Div class="col-2 pt-2 pb-4">
                                                    <label>@L["Style"] <Span Class="text-danger">*</Span></label>
                                                </Div>
                                                <Div class="col-10 pt-2 pb-4">
                                                    <select class="form-select form-select"
                                                    @onchange=@((e) => OnStyleCarouselChange(e, carouselImages, carouselImages.GroupBy(g => g.ModuleNumber).FirstOrDefault().Key!.Value))>
                                                        <option>Select Style</option>
                                                        @foreach (object? enumValue in Enum.GetValues(typeof(StyleForCarouselImages)))
                                                        {
                                                            if (enumValue is not null && carouselImages.Any(a => a.CarouselStyle == (StyleForCarouselImages)enumValue))
                                                            {
                                                                <option value="@enumValue" selected>@L[enumValue.ToString()]</option>
                                                            }

                                                            else
                                                            {
                                                                <option value="@enumValue">@L[enumValue.ToString()]</option>
                                                            }
                                                        }
                                                    </select>
                                                </Div>
                                            </div>
                                        }
                                    }

                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.BannerImages)
                                    {
                                        List<List<CreateImageDto>> bannerModules = BannerModules.Select(s => s.Where(w => w.ModuleNumber == module.ModuleNumber).ToList()).Where(w => w.Count > 0).ToList();

                                        foreach (List<CreateImageDto> bannerImages in bannerModules)
                                        {
                                            <div class="row">
                                                <div class="col-2">
                                                    <label>
                                                        @L["BannerImages"]
                                                        <Span>
                                                            <Tooltip Display="Display.InlineBlock" Text="@(L["BannerImagesSuggestedSize"])">
                                                                <Icon class="fa-question-circle" />
                                                            </Tooltip>
                                                        </Span>
                                                    </label>
                                                </div>
                                                <div class="col-10 ">
                                                    <Div Class="@(((bannerImages.Count > 0 && bannerImages.Any(a => !a.ImageUrl.IsNullOrEmpty())) ? "has-images" : "") + " container-less-filepicker")">
                                                        <Field>
                                                            <FilePicker @ref="BannerFilePickers[bannerImages.GroupBy(g => g.ModuleNumber).FirstOrDefault().Key!.Value - 1]"
                                                            Changed="@(async (e) => await OnBannerImageModuleUploadAsync(e,
                                                                                                                           bannerImages,
                                                                                                                           bannerImages.GroupBy(g => g.ModuleNumber).FirstOrDefault().Key!.Value,
                                                                                                                           BannerFilePickers[bannerImages.GroupBy(g => g.ModuleNumber).FirstOrDefault().Key!.Value - 1],
                                                                                                                           ImageType.GroupBuyBannerImage))"
                                                            ShowMode="FilePickerShowMode.List"
                                                            Accept="@(string.Join(", ", Constant.ValidImageExtensions))">
                                                            </FilePicker>
                                                        </Field>
                                                    </Div>
                                                </div>
                                                @if (bannerImages.Count > 0 && bannerImages.Any(a => !a.ImageUrl.IsNullOrEmpty()))
                                                {
                                                    <Div Class="col-2"></Div>
                                                    <Div Class="col-10">
                                                        <Div Class="image-list-container">
                                                            @foreach (CreateImageDto image in bannerImages.Where(w => !w.ImageUrl.IsNullOrEmpty()).ToList())
                                                            {
                                                                <Div Class="d-flex flex-column align-items-center justify-content-center">
                                                                    <Div Class="image-container">
                                                                        <Image class="blur-image" Source="@image.ImageUrl" Text="Carousel Image" Fluid />
                                                                        <button class="delete-button" @onclick="() => DeleteImageAsync(image.BlobImageName,
                                                                                                                                            bannerImages,
                                                                                                                                            ImageType.GroupBuyBannerImage)">
                                                                            <i class="fa fa-trash"></i>
                                                                        </button>
                                                                    </Div>
                                                                    <button type="button"
                                                                    class="btn btn-sm btn-primary mt-1"
                                                                    @onclick="() => OpenAddLinkModal(image)">
                                                                        @L["Add Link"]
                                                                    </button>
                                                                </Div>
                                                            }
                                                        </Div>
                                                    </Div>
                                                }
                                            </div>
                                        }
                                    }

                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.GroupPurchaseOverview)
                                    {
                                        List<GroupPurchaseOverviewDto> purchaseOverviewModules = GroupPurchaseOverviewModules.Where(x => x.ModuleNumber == module.ModuleNumber).ToList();
                                        foreach (GroupPurchaseOverviewDto module in purchaseOverviewModules)
                                        {
                                            <Div Class="row d-flex">
                                                <Div Class="col-6 pb-1">
                                                    <Div Class="col-2 pb-1">
                                                        <Label>@L["Image"] <Span Class="text-danger">*</Span>
                                                            <Span>
                                                                <Tooltip Display="Display.InlineBlock" Text="@(L["GroupPurchaseOverviewSuggestedSize"])">
                                                                    <Icon class="fa-question-circle" />
                                                                </Tooltip>
                                                            </Span>
                                                        </Label>
                                                    </Div>
                                                    <Div Class="@((!module.Image.IsNullOrEmpty() ? "has-images" : "") + " container-less-filepicker filepicker-sm")">
                                                        <Field>
                                                            <FilePicker @ref="GroupPurchaseOverviewFilePickers[GroupPurchaseOverviewModules.IndexOf(module)]"
                                                            FilePickerLocalizer="(key, args) => LocalizeFilePicker(key, args)"
                                                            Changed="@(async (e) => await OnImageUploadAsync(e, module, GroupPurchaseOverviewFilePickers[GroupPurchaseOverviewModules.IndexOf(module)]))"
                                                            ShowMode="FilePickerShowMode.List"
                                                            Accept="@(string.Join(", ", Constant.ValidImageExtensions))">
                                                            </FilePicker>
                                                        </Field>
                                                    </Div>
                                                    @if (!module.Image.IsNullOrEmpty())
                                                    {
                                                        <Div Class="row">
                                                            <Div Class="col-2"></Div>
                                                            <Div Class="col-12">
                                                                <Div Class="image-list-container">
                                                                    <Div Class="image-container">
                                                                        <Image Class="blur-image" Source="@module.Image" Text="Logo Image" Fluid />
                                                                        <button class="delete-button"
                                                                        @onclick="@(async (e) => await DeleteImageAsync(e, module))">
                                                                            <i class="fa fa-trash" />
                                                                        </button>
                                                                    </Div>
                                                                </Div>
                                                            </Div>
                                                        </Div>
                                                    }
                                                </Div>
                                                <Div Class="col-6">
                                                    <Div Class="col-2 pb-1">
                                                        <Label>@L["Title"] <Span Class="text-danger">*</Span></Label>
                                                    </Div>
                                                    <Div Class="col-12 pb-1">
                                                        <TinyMCEEditor Style="min-height: 500px;"@bind-Value="@module.Title" />
                                                    </Div>
                                                    <Div Class="col-2 pb-1">
                                                        <Label>@L["SubTitle"]</Label>
                                                    </Div>
                                                    <Div Class="col-12 pb-1">
                                                        <TinyMCEEditor Style="min-height: 500px;"@bind-Value="@module.SubTitle" />
                                                    </Div>
                                                    <Div Class="col-2 pb-1">
                                                        <Label>@L["BodyText"]</Label>
                                                    </Div>
                                                    <Div Class="col-12 pb-1">
                                                        <TinyMCEEditor Style="min-height: 500px;"@bind-Value="@module.BodyText" />
                                                    </Div>
                                                    <Div Class="col-12 pb-1"></Div>
                                                    <Div Class="col-12 pb-1">
                                                        <Switch TValue="bool"
                                                        @bind-Checked="@module.IsButtonEnable" />
                                                    </Div>

                                                    @if (module.IsButtonEnable)
                                                    {
                                                        <Div Class="col-12 pb-1">
                                                            <Label>@L["ButtonText"] <Span Class="text-danger">*</Span></Label>
                                                        </Div>
                                                        <Div Class="col-12 pb-1">
                                                            <TextEdit @bind-Text="@module.ButtonText" />
                                                        </Div>
                                                        <Div Class="col-12 pb-1">
                                                            <Label>@L["ButtonLink"] <Span Class="text-danger">*</Span></Label>
                                                        </Div>
                                                        <Div Class="col-12 pb-1">
                                                            <TextEdit @bind-Text="@module.ButtonLink" />
                                                        </Div>
                                                    }
                                                </Div>
                                            </Div>
                                        }
                                    }

                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.OrderInstruction)
                                    {
                                        List<GroupBuyOrderInstructionDto> orderInstructionModules = GroupBuyOrderInstructionModules.Where(x => x.ModuleNumber == module.ModuleNumber).ToList();
                                        foreach (GroupBuyOrderInstructionDto module in orderInstructionModules)
                                        {
                                            <Div Class="row d-flex">
                                                <Div Class="col-6 pb-1">
                                                    <Div Class="col-2 pb-1">
                                                        <Label>@L["Image"] <Span Class="text-danger">*</Span>
                                                            <Span>
                                                                <Tooltip Display="Display.InlineBlock" Text="@(L["OrderInstructionsSuggestedSize"])">
                                                                    <Icon class="fa-question-circle" />
                                                                </Tooltip>
                                                            </Span>
                                                        </Label>
                                                    </Div>
                                                    <Div Class="@((!module.Image.IsNullOrEmpty() ? "has-images" : "") + " container-less-filepicker filepicker-sm")">
                                                        <Field>
                                                            <FilePicker @ref="GroupBuyOrderInstructionPickers[GroupBuyOrderInstructionModules.IndexOf(module)]"
                                                            Changed="@(async (e) => await OnImageUploadAsync(e,
                                                                                                                         module,
                                                                                                                         GroupBuyOrderInstructionPickers[GroupBuyOrderInstructionModules.IndexOf(module)]))"
                                                            ShowMode="FilePickerShowMode.List"
                                                            Accept="@(string.Join(", ", Constant.ValidImageExtensions))">
                                                            </FilePicker>
                                                        </Field>
                                                    </Div>
                                                    @if (!module.Image.IsNullOrEmpty())
                                                    {
                                                        <Div Class="row">
                                                            <Div Class="col-2"></Div>
                                                            <Div Class="col-12">
                                                                <Div Class="image-list-container">
                                                                    <Div Class="image-container">
                                                                        <Image Class="blur-image" Source="@module.Image" Text="Logo Image" Fluid />
                                                                        <button class="delete-button"
                                                                        @onclick="@(async (e) => await DeleteImageAsync(e, module))">
                                                                            <i class="fa fa-trash" />
                                                                        </button>
                                                                    </Div>
                                                                </Div>
                                                            </Div>
                                                        </Div>
                                                    }
                                                </Div>
                                                <Div Class="col-6">
                                                    <Div Class="col-2 pb-1">
                                                        <Label>@L["Title"] <Span Class="text-danger">*</Span></Label>
                                                    </Div>
                                                    <Div Class="col-12 pb-1">
                                                        <TextEdit @bind-Text="module.Title" />
                                                    </Div>
                                                    <Div Class="col-2 pb-1">
                                                        <Label>@L["BodyText"]</Label>
                                                    </Div>
                                                    <Div Class="col-12 pb-1">
                                                        <TextEdit @bind-Text="@module.BodyText" />
                                                    </Div>
                                                </Div>
                                            </Div>
                                        }
                                    }

                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.CountdownTimer)
                                    {
                                        <Div Class="col-12 mb-2">
                                            <InputText class="form-control" @bind-Value="module.AdditionalInfo" />
                                        </Div>
                                    }

                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.ProductRankingCarouselModule)
                                    {
                                        List<ProductRankingCarouselModule> productModules = ProductRankingCarouselModules.Where(x => x.ModuleNumber == module.ModuleNumber).ToList();
                                        foreach (ProductRankingCarouselModule productModule in productModules)
                                        {
                                            <Div Class="col-12 d-flex">
                                                <Div Class="col-5">
                                                    <Div Class="row mt-2">
                                                        @foreach (ItemWithItemTypeDto selectedItem in productModule.Selected)
                                                        {
                                                            <div class="row-cols-12 mt-@(productModule.Selected.IndexOf(selectedItem) > 0 ? "5" : "2")"
                                                            style="@(productModule.Selected.IndexOf(selectedItem) > 0 ? "margin-top: 75px !important" : "")">
                                                                <label>@L["Products"]</label>
                                                                <Autocomplete TItem="ItemWithItemTypeDto"
                                                                TValue="Guid?"
                                                                Data="@ItemsList"
                                                                TextField="@(( item ) => item.Name)"
                                                                ValueField="@(( item ) => item.Id)"
                                                                Placeholder="Search..."
                                                                Filter="AutocompleteFilter.StartsWith"
                                                                CustomFilter="@(( item, searchValue ) => item.Name.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )"
                                                                HighlightSearch
                                                                Immediate="true"
                                                                SelectedValue="selectedItem.Id"
                                                                SelectedValueChanged="(id) => OnSelectedValueChanged(id, productModule, selectedItem)">
                                                                    <NotFoundContent> @L["NotFound"] </NotFoundContent>
                                                                </Autocomplete>
                                                            </div>

                                                            @if (selectedItem.Id != Guid.Empty)
                                                            {
                                                                string? firstImage;
                                                                if (selectedItem.ItemType == ItemType.Item)
                                                                {
                                                                    firstImage = selectedItem.Item?.Images?.FirstOrDefault()?.ImageUrl;
                                                                }
                                                                else
                                                                {
                                                                    firstImage = selectedItem.SetItem?.Images?.FirstOrDefault()?.ImageUrl;
                                                                }
                                                                <div class="d-flex mt-3">
                                                                    @if (firstImage != null)
                                                                    {
                                                                        <div class="w-100 text-center">
                                                                            <img src="@firstImage" class="img-fluid" />
                                                                            @if (module.GroupBuyModuleType is GroupBuyModuleType.ProductRankingCarouselModule)
                                                                            {
                                                                                <div class="row mt-2">
                                                                                    <h4 class="text-center mt-2">
                                                                                        <strong>@selectedItem.Name</strong>
                                                                                    </h4>
                                                                                    @if (selectedItem.Item != null)
                                                                                    {
                                                                                        var itemDetails = selectedItem.Item?.ItemDetails;
                                                                                        @if (itemDetails != null && itemDetails.Where(x => x.Attribute1Value != null).Count() > 0)
                                                                                        {
                                                                                            <div class="mt-2">
                                                                                                <select class="form-control dropdown" @bind="selectedItem.SelectedItemAttribute">
                                                                                                    @foreach (var item in itemDetails)
                                                                                                    {
                                                                                                        var label = item.Attribute1Value;

                                                                                                        if (!string.IsNullOrWhiteSpace(item.Attribute2Value))
                                                                                                        {
                                                                                                            label += " / " + item.Attribute2Value;
                                                                                                        }

                                                                                                        if (!string.IsNullOrWhiteSpace(item.Attribute3Value))
                                                                                                        {
                                                                                                            label += " / " + item.Attribute3Value;
                                                                                                        }

                                                                                                        <option value="@item.Id">@label</option>
                                                                                                    }
                                                                                                </select>
                                                                                            </div>



                                                                                        }
                                                                                      @if(itemDetails!=null && itemDetails.Where(x => x.Attribute1Value == null).Count()==1)
                                                                                        {
                                                                                            selectedItem.SelectedItemAttribute = itemDetails.Where(x => x.Attribute1Value == null).Select(x => x.Id).FirstOrDefault();
                                                                                        }
                                                                                    }
                                                                                </div>
                                                                            }
                                                                        </div>
                                                                    }
                                                                </div>
                                                            }
                                                        }
                                                    </Div>
                                                </Div>
                                                <Div Class="col-1" />
                                                <Div Class="col-6">
                                                    <Div Class="row">
                                                        <Div Class="col-12">
                                                            <Div Class="col-12 pb-1">
                                                                <Label>@L["Carousel"] <Span Class="text-danger">*</Span>
                                                                    <Span>
                                                                        <Tooltip Display="Display.InlineBlock" Text="@(L["uploadUpto5Images"] + L["ProductRankingCarouselSuggestedSize"])">
                                                                            <Icon class="fa-question-circle" />
                                                                        </Tooltip>
                                                                    </Span>
                                                                </Label>
                                                            </Div>
                                                            <Div Class="@((productModule.Images.Count > 0 ? "has-images" : "") + " container-less-filepicker filepicker-sm")">
                                                                <Field>
                                                                    <FilePicker @ref="ProductRankingCarouselPickers[ProductRankingCarouselModules.IndexOf(productModule)]"
                                                                    Disabled="productModule.Images.Count >= 5"
                                                                    Multiple
                                                                    Changed="@(async (e) => await OnImageModuleUploadAsync(e,
                                                                                                                               productModule.Images,
                                                                                                                               ProductRankingCarouselModules.IndexOf(productModule) + 1,
                                                                                                                               ProductRankingCarouselPickers[ProductRankingCarouselModules.IndexOf(productModule)],
                                                                                                                               ImageType.GroupBuyProductRankingCarousel))"
                                                                    ShowMode="FilePickerShowMode.List"
                                                                    Accept="@(string.Join(", ", Constant.ValidImageExtensions))">
                                                                    </FilePicker>
                                                                </Field>
                                                            </Div>
                                                            @if (productModule.Images.Count > 0)
                                                            {
                                                                <Div Class="row">
                                                                    <Div Class="col-12">
                                                                        <Div Class="image-list-container">
                                                                            @foreach (CreateImageDto image in productModule.Images)
                                                                            {
                                                                                <Div Class="d-flex flex-wrap">
                                                                                    <Div Class="image-container">
                                                                                        <Image class="blur-image" Source="@image.ImageUrl" Text="Carousel Image" Fluid />
                                                                                        <button class="delete-button" @onclick="() => DeleteImageAsync(image.BlobImageName,
                                                                                                                                                   productModule.Images,
                                                                                                                                                   ImageType.GroupBuyProductRankingCarousel)">
                                                                                            <i class="fa fa-trash"></i>
                                                                                        </button>
                                                                                    </Div>
                                                                                </Div>
                                                                            }
                                                                        </Div>
                                                                    </Div>
                                                                </Div>
                                                            }
                                                        </Div>
                                                        <Div Class="col-12 mt-2">
                                                            <Div Class="col-2 pb-1">
                                                                <Label>@L["Title"] <Span Class="text-danger">*</Span></Label>
                                                            </Div>
                                                            <Div Class="col-12 pb-1">
                                                                <TinyMCEEditor @bind-Value="@productModule.Title" Style="min-height: 500px;" />
                                                            </Div>
                                                            <Div Class="col-2 pb-1">
                                                                <Label>@L["SubTitle"] <Span Class="text-danger">*</Span></Label>
                                                            </Div>
                                                            <Div Class="col-12 pb-1">
                                                                <TinyMCEEditor @bind-Value="@productModule.SubTitle" Style="min-height: 500px;" />
                                                            </Div>
                                                            <Div Class="col-2 pb-1">
                                                                <Label>@L["BodyText"]</Label>
                                                            </Div>
                                                            <Div Class="col-12 pb-1">
                                                                <TinyMCEEditor @bind-Value="@productModule.Content" Style="min-height: 500px;" />
                                                            </Div>
                                                        </Div>
                                                    </Div>
                                                </Div>
                                            </Div>
                                        }
                                    }

                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.CustomTextModule)
                                    {
                                        <Div Class="row">
                                            <Div Class="col-2 pb-1">
                                                <Label>@L["Title"]</Label>
                                            </Div>
                                            <Div Class="col-12 pb-1">
                                                <TextEdit @bind-Text="module.Title" />
                                            </Div>
                                            <Div Class="col-2 pb-1">
                                                <Label>@L["Text"]</Label>
                                            </Div>
                                            <Div Class="col-12 pb-1">
                                                <TinyMCEEditor @bind-Value="@module.Text"
                                                               Style="min-height: 500px;" />
                                            </Div>
                                        </Div>
                                    }

                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.VideoUpload)
                                    {
                                        <Div Class="row mb-2">
                                            <Div Class="col-2">
                                                <Label>@L["Title"]</Label>
                                            </Div>
                                            <Div Class="col-12">
                                                <TinyMCEEditor @bind-Value="@module.Title" Style="min-height: 500px;" />
                                            </Div>
                                        </Div>
                                        <Div Class="row mb-2">
                                            <Div Class="col-2">
                                                <Label>@L["Description"]</Label>
                                            </Div>
                                            <Div Class="col-12">
                                                <TinyMCEEditor @bind-Value="@module.Text" Style="min-height: 500px;" />
                                            </Div>
                                        </Div>
                                        <Div Class="row mb-2">
                                            <Div Class="col-2">
                                                <Label>@L["VideoUrl"]</Label>
                                            </Div>
                                            <Div Class="col-12">
                                                <TextEdit @bind-Text="@module.Url" />
                                            </Div>
                                        </Div>
                                    }

                                    @if (module.GroupBuyModuleType is GroupBuyModuleType.PartnershipModule)
                                    {
                                        <Div Class="row">
                                            <Div Class="col-2 pb-1">
                                                <Label>@L["Title"]</Label>
                                            </Div>
                                            <Div Class="col-12 pb-1">
                                                <TextEdit @bind-Text="module.Title" />
                                            </Div>
                                        </Div>
                                        @foreach (var imageModule in module.ImageModules)
                                        {
                                            <Div Class="mt-2">
                                                <Label>
                                                    @L["Row"] @(module.ImageModules.IndexOf(imageModule) + 1)
                                                    <Span>
                                                        <Tooltip Text="@L["Upto5ImagesAllowed"]" Display="Display.InlineBlock">
                                                            <Icon Name="IconName.InfoCircle" />
                                                        </Tooltip>
                                                    </Span>
                                                </Label>
                                                <Div Class="@((imageModule.Images.Count > 0 ? "has-images" : "") + " container-less-filepicker filepicker-sm")">
                                                    <Field>
                                                        <FilePicker @ref="imageModule.FilePicker"
                                                                    Disabled="imageModule.Images.Count >= 5"
                                                                    Multiple
                                                                    ShowMode="FilePickerShowMode.List"
                                                                    Accept="@(string.Join(", ", Constant.ValidImageExtensions))"
                                                                    Changed="(e) => OnPartnershipImageUploadAsync(e, imageModule)"
                                                                    MaxFileSize="MaxAllowedFileSize">
                                                        </FilePicker>
                                                    </Field>
                                                </Div>
                                                @if (imageModule.Images.Count > 0)
                                                {
                                                    <Div Class="row">
                                                        <Div Class="col-12">
                                                            <Div Class="image-list-container">
                                                                @foreach (var image in imageModule.Images)
                                                                {
                                                                    <Div Class="d-flex flex-wrap">
                                                                        <Div Class="image-container">
                                                                            <Image class="blur-image" Source="@image.Url" Text="Carousel Image" Fluid />
                                                                            <button class="delete-button" @onclick="(() => DeletePartnershipImage(imageModule, image))">
                                                                                <i class="fa fa-trash"></i>
                                                                            </button>
                                                                        </Div>
                                                                    </Div>
                                                                }
                                                            </Div>
                                                        </Div>
                                                    </Div>
                                                }
                                            </Div>
                                        }
                                    }

                                    <div class="row mt-2">
                                        @if (module.GroupBuyModuleType is GroupBuyModuleType.ProductGroupModule)
                                        {
                                            <Div Class="col-md-12 text-left mb-3">
                                                 <TinyMCEEditor @bind-Value="@module.ProductGroupModuleTitle" Style="min-height: 500px;" />
                                              @*   <InputText class="form-control" @bind-Value="module.ProductGroupModuleTitle" /> *@
                                            </Div>
                                          @*   <Div Class="col-md-6 text-right mb-3">
                                                <Select TValue="string" @onchange=@((e) => module.ProductGroupModuleImageSize = e.Value.ToString())>
                                                    <option value="">@L["SelectStyle"] </option>
                                                    <option value="SmallImage">@L["SmallImage"]</option>
                                                    <option value="LargeImage">@L["LargeImage"]</option>
                                                </Select>
                                            </Div> *@
                                        }
                                        @foreach (var selectedItem in module.Selected)
                                        {
                                            <div class="col-@(12 / module.Selected.Count)">
                                                @if (module.GroupBuyModuleType is GroupBuyModuleType.IndexAnchor)
                                                {
                                                    <Div Class="col-12 mb-2">
                                                        <InputText class="form-control" @bind-Value="selectedItem.Name"
                                                        @oninput="(e) => OnSelectedValueChanged(null, module, selectedItem)" />
                                                    </Div>
                                                }
                                                else
                                                {
                                                    <Autocomplete TItem="ItemWithItemTypeDto"
                                                    TValue="Guid?"
                                                    Data="@ItemsList"
                                                    TextField="@(( item ) => item.Name)"
                                                    ValueField="@(( item ) => item.Id)"
                                                    Placeholder="@L["Search..."]"
                                                    Filter="AutocompleteFilter.StartsWith"
                                                    CustomFilter="@(( item, searchValue ) => item.Name.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )"
                                                    HighlightSearch
                                                    Immediate="true"
                                                    SelectedValue="selectedItem.Id"
                                                    SelectedValueChanged="(id) => OnSelectedValueChanged(id, module, selectedItem)">
                                                        <NotFoundContent> @L["NotFound"] </NotFoundContent>
                                                    </Autocomplete>
                                                }
                                                @if (selectedItem.Id != Guid.Empty)
                                                {
                                                    string? firstImage;
                                                    if (selectedItem.ItemType == ItemType.Item)
                                                    {
                                                        firstImage = selectedItem.Item?.Images?.FirstOrDefault()?.ImageUrl;
                                                    }
                                                    else
                                                    {
                                                        firstImage = selectedItem.SetItem?.Images?.FirstOrDefault()?.ImageUrl;
                                                    }
                                                    <div class="d-flex mt-3">
                                                        @if (firstImage != null)
                                                        {
                                                            <div class="w-100 text-center">
                                                                <img src="@firstImage" class="img-fluid" />
                                                                @if (module.GroupBuyModuleType == GroupBuyModuleType.ProductGroupModule)
                                                                {
                                                                    <div class="row mt-2">
                                                                        <h4 class="text-center mt-2">
                                                                            <strong>@selectedItem.Name</strong>
                                                                        </h4>
                                                                        @if(selectedItem.ItemType == ItemType.SetItem)
                                                                        {
                                                                            <div class="mt-2">
                                                                                <Label>Price</Label>
                                                                                <NumericEdit class="form-control" @bind-Value="selectedItem.Price" />
                                                                            </div>
                                                                        }
                                                                        @if (selectedItem.Item != null)
                                                                        {
                                                                            var itemDetails = selectedItem.Item?.ItemDetails;
                                                                             var firstItem = itemDetails?.FirstOrDefault();
                                                                            @if (itemDetails != null && itemDetails.Where(x => x.Attribute1Value != null).Count() > 0)
                                                                            {
                                                                                <div class="mt-2">
                                                                                    <AntDesign.Select Mode="AntDesign.SelectMode.Multiple"
                                                                                    Placeholder="Please select"

                                                                                    OnSelectedItemsChanged="@(values => OnSelectedItemDetailsChanged(values, selectedItem))"

                                                                                    TItemValue="Guid"
                                                                                    TItem="Guid"
                                                                                    AllowClear>
                                                                                        <SelectOptions>
                                                                                            @foreach (var item in itemDetails)
                                                                                            {
                                                                                                var label = item.Attribute1Value;

                                                                                                if (!string.IsNullOrWhiteSpace(item.Attribute2Value))
                                                                                                {
                                                                                                    label += " / " + item.Attribute2Value;
                                                                                                }

                                                                                                if (!string.IsNullOrWhiteSpace(item.Attribute3Value))
                                                                                                {
                                                                                                    label += " / " + item.Attribute3Value;
                                                                                                }

                                                                                                <AntDesign.SelectOption TItemValue="Guid" TItem="Guid" Value=@item.Id Label=@label/>
                                                                                            }
                                                                                        </SelectOptions>
                                                                                    </AntDesign.Select>

                                                                                </div>
                                                                                @if (selectedItem.SelectedItemDetailIds != null)
                                                                                {
                                                                                    foreach (var detailId in selectedItem.SelectedItemDetailIds)
                                                                                    {
                                                                                        @if (selectedItem.ItemDetailsWithPrices.TryGetValue(detailId, out var detailInfo))
                                                                                        {
                                                                                            <div class="mt-2">
                                                                                                <label>@(detailInfo.Label + " Price")</label>
                                                                                                <input class="form-control"
                                                                                                type="number"
                                                                                                value="@detailInfo.Price"
                                                                                                @onchange="@(e => UpdatePrice(detailId, selectedItem, Convert.ToDouble(e.Value)))"

                                                                                                />
                                                                                            </div>
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }

@if (firstItem != null && firstItem.Attribute1Value.IsNullOrWhiteSpace())
{
    if (!selectedItem.SelectedItemDetailIds.Contains(firstItem.Id))
    {
        selectedItem.SelectedItemDetailIds.Add(firstItem.Id);
        selectedItem.ItemDetailsWithPrices[firstItem.Id] = ("", 0);
    }

    if (selectedItem.SelectedItemDetailIds != null)
    {
        foreach (var detailId in selectedItem.SelectedItemDetailIds)
        {
            if (selectedItem.ItemDetailsWithPrices.TryGetValue(detailId, out var detailInfo))
            {
                <div class="mt-2">
                    <label>Price</label>
                    <input class="form-control"
                           type="number"
                           value="@detailInfo.Price"
                           @onchange="@(e => UpdatePrice(detailId, selectedItem, Convert.ToDouble(e.Value)))" />
                </div>
            }
        }
    }
}
                                                                        
                                                                   }
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                        @if (module.GroupBuyModuleType == GroupBuyModuleType.ProductDescriptionModule)
                                                        {
                                                            string? ItemDescription;
                                                            if (selectedItem.ItemType == ItemType.Item)
                                                            {
                                                                ItemDescription = selectedItem.Item?.ItemDescription;
                                                            }
                                                            else
                                                            {
                                                                ItemDescription = selectedItem.SetItem?.Description;
                                                            }
                                                            <div class="ps-3">
                                                                <p> @((MarkupString)ItemDescription) </p>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                </CollapseBody>
                            </Collapse>
                        </Accordion>
                    </div>
                    <div class="py-2 draggable"
                         draggable="true"
                         @ondrop="@(()=> Drop(module))"
                         @ondrag="@(()=> StartDrag(module))">
                        <GripDotSvg Height="48" Width="48"></GripDotSvg>
                    </div>
                </div>
            }
        </div>
        <Divider></Divider>
        <div class="row">
            <div class="col-2">
                <fieldLabel>
                    @L["GroupBuyPolicy"]
                    <span class="text-danger"> *</span>
                </fieldLabel>
            </div>
            <div class="col-10">
                <div class="col-12">
                    <TextEdit Disabled Placeholder="@L["GroupBuyCondition"]" @bind-Text="CreateGroupBuyDto.GroupBuyCondition" MaxLength="60" />
                </div>
                <div class="col-12">
                    <Blazored.TextEditor.BlazoredTextEditor @ref="@GroupBuyConditionHtml" Placeholder="@L["Composeanepic"]">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-image"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-video"></button>
                            </span>
                        </ToolbarContent>
                    </Blazored.TextEditor.BlazoredTextEditor>
                </div>
            </div>
        </div>
        @* <div class="row">
            <div class="col-2">
            </div>
            <div class="col-10">
                <div class="col-12">
                    <TextEdit Placeholder="@L["CustomerInformation"]" Disabled @bind-Text="@CreateGroupBuyDto.CustomerInformation" MaxLength="60" />
                </div>
                <div class="col-12">
                    <Blazored.TextEditor.BlazoredTextEditor @ref="@CustomerInformationHtml">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-image"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-video"></button>
                            </span>
                        </ToolbarContent>
                    </Blazored.TextEditor.BlazoredTextEditor>
                </div>
            </div>
        </div> *@
        <div class="row">
            <div class="col-2">
            </div>
            <div class="col-10">
                <div class="col-12">
                    <TextEdit Disabled Placeholder="@L["ExchangePolicy"]" @bind-Text="@CreateGroupBuyDto.ExchangePolicy" MaxLength="60" ShowCount />
                </div>
                <div class="col-12">
                    <Blazored.TextEditor.BlazoredTextEditor @ref="@ExchangePolicyHtml" Placeholder="@L["Composeanepic"]">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-image"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-video"></button>
                            </span>
                        </ToolbarContent>
                    </Blazored.TextEditor.BlazoredTextEditor>
                </div>
            </div>
        </div>
        @* <Divider></Divider>
        <div class="row">
            <div class="col-2">
                <fieldLabel>@L["NotifyEmail"]</fieldLabel>
            </div>
            <div class="col-10">
                <div class="col-12">
                    <Blazored.TextEditor.BlazoredTextEditor @ref="@NotifyEmailHtml" Placeholder="@L["Composeanepic"]">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-image"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-video"></button>
                            </span>
                        </ToolbarContent>
                    </Blazored.TextEditor.BlazoredTextEditor>
                </div>
            </div>
        </div> *@
        @*     <Divider></Divider>
        <div class="row">
             <div class="col-2">
                <fieldLabel>@L["GA4 ID"]</fieldLabel>
            </div>
            <div class="col-10">
                <div class="col-12">
            <TextEdit></TextEdit>
            </div>
            </div>

        </div> *@
    </CardBody>
</Card>
<div class="row">
    <div class="col-12 text-lg-end">
        <Button Type="@ButtonType.Button" class="btn btn-danger" Clicked="BackToGroupBuyList">@L["Cancel"]</Button>
        <Button Type="@ButtonType.Button" class="btn btn-primary" Clicked="CreateEntityAsync"> <i class="fa fa-check"></i> @L["Save"]</Button>
    </div>
</div>

<Modal @ref="AddLinkModal" Closing="@OnModalClosing">
    <ModalContent IsCentered="true">
        <EditForm Model="@SelectedImageDto" OnValidSubmit="ApplyAddLinkAsync">
            <ModalHeader>
                <ModalTitle>@L["AddLink"]</ModalTitle>
                <CloseButton Clicked="CloseAddLinkModal" />
            </ModalHeader>
            <ModalBody>
                <DataAnnotationsValidator />
                <div class="row my-2">
                    <label class="form-label">@L["AddLink"]</label>
                    <div class="col-12 mb-2">
                        <InputText class="form-control" @bind-Value="@SelectedImageDto.Link" />
                    </div>
                </div>
            </ModalBody>
            <ModalFooter>
                <Button Type="ButtonType.Submit" Class="btn btn-primary">
                    <i class="fa fa-check"></i>
                    @L["Save"]
                </Button>
            </ModalFooter>
        </EditForm>
    </ModalContent>
</Modal>
<Modal @ref="CropperModal">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@L["LogoCropper"]</ModalTitle>
            <CloseButton Clicked="@CloseCropModal" />
        </ModalHeader>
        <ModalBody>
            <Row>
                <Column ColumnSize="ColumnSize.Is6">
                    <Cropper @ref="LogoCropper"
                             Source="@imageToCrop"
                             Style="aspect-ratio: 16 / 9;"
                             SelectionChanged="@OnSelectionChanged"
                             ShowBackground="true" />
                </Column>
                <Column ColumnSize="ColumnSize.Is6">
                    <Div Margin="Margin.Is2.FromBottom">
                        <Button Color="Color.Primary" Clicked="@GetCroppedImage" Disabled="@cropButtonDisabled">Get Cropped Image</Button>
                        <Button Color="Color.Secondary" Clicked="@ResetSelection" Disabled="@cropButtonDisabled">Reset Selection</Button>
                    </Div>
                    <Image Source="@croppedImage" Border="Border.Is1" Style="width: 300px; height: 300px;" />

                </Column>
            </Row>

        </ModalBody>
        <ModalFooter>

            <Button Color="Color.Secondary" Clicked="@CloseCropModal">@L["Cancel"]</Button>
            <Button Color="Color.Primary"  Clicked="@CropImageAsync">@L["Save"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@* <Modal @ref="CarouselCropperModal">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@L["CarouselCropper"]</ModalTitle>
            <CloseButton Clicked="@CloseCropModal" />
        </ModalHeader>
        <ModalBody>
            <Row>
                <Column ColumnSize="ColumnSize.Is6">
                    <Cropper @ref="CarouselCropper"
                             Source="@imageToCrop"
                             Style="aspect-ratio: 16 / 9;"
                             SelectionChanged="@OnSelectionChanged"
                             ShowBackground="true" />
                </Column>
                <Column ColumnSize="ColumnSize.Is6">
                    <Div Margin="Margin.Is2.FromBottom">
                        <Button Color="Color.Primary" Clicked="@GetCarouselCroppedImage" Disabled="@cropButtonDisabled">Get Cropped Image</Button>
                        <Button Color="Color.Secondary" Clicked="@ResetCarouselSelection" Disabled="@cropButtonDisabled">Reset Selection</Button>
                    </Div>
                    <Image Source="@croppedImage" Border="Border.Is1" Style="width: 300px; height: 300px;" />

                </Column>
            </Row>

        </ModalBody>
        <ModalFooter>

            <Button Color="Color.Secondary" Clicked="@CloseCropModal">@L["Cancel"]</Button>
            <Button Color="Color.Primary" Disabled="@croppedImage.IsNullOrWhiteSpace()" Clicked="()=>CropImageAsync(uploadedCarouselImages,CarouselModuleNumber,CarouselPicker,ImageType)">@L["Save"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<Modal @ref="BannerCropperModal">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@L["BannerCropper"]</ModalTitle>
            <CloseButton Clicked="@CloseBannerCropModal" />
        </ModalHeader>
        <ModalBody>
            <Row>
                <Column ColumnSize="ColumnSize.Is6">
                    <Cropper @ref="BannerCropper"
                             Source="@imageToCrop"
                             Style="aspect-ratio: 16 / 9;"
                             SelectionChanged="@OnBannerSelectionChanged"
                             ShowBackground="true" />
                </Column>
                <Column ColumnSize="ColumnSize.Is6">
                    <Div Margin="Margin.Is2.FromBottom">
                        <Button Color="Color.Primary" Clicked="GetBannerCroppedImage" Disabled="@cropButtonDisabled">Get Cropped Image</Button>
                        <Button Color="Color.Secondary" Clicked="@ResetBannerSelection" Disabled="@cropButtonDisabled">Reset Selection</Button>
                    </Div>
                    <Image Source="@croppedImage" Border="Border.Is1" Style="width: 300px; height: 300px;" />

                </Column>
            </Row>

        </ModalBody>
        <ModalFooter>

            <Button Color="Color.Secondary" Clicked="@CloseBannerCropModal">@L["Cancel"]</Button>
            <Button Color="Color.Primary" Disabled="@croppedImage.IsNullOrWhiteSpace()" Clicked="()=>CropBannerImageAsync(uploadBannerImages,BannerModuleNumber,BannerPicker,ImageType)">@L["Save"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<Modal @ref="PurchaseOverviewCropperModal">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@L["PurchaseOverviewCropper"]</ModalTitle>
            <CloseButton Clicked="@ClosePurchaseOverviewCropModal" />
        </ModalHeader>
        <ModalBody>
            <Row>
                <Column ColumnSize="ColumnSize.Is6">
                    <Cropper @ref="PurchaseOverviewCropper"
                             Source="@imageToCrop"
                             Style="aspect-ratio: 16 / 9;"
                             SelectionChanged="@OnPurchaseOverviewSelectionChanged"
                             ShowBackground="true" />
                </Column>
                <Column ColumnSize="ColumnSize.Is6">
                    <Div Margin="Margin.Is2.FromBottom">
                        <Button Color="Color.Primary" Clicked="GetPurchaseOverviewCroppedImage" Disabled="@cropButtonDisabled">Get Cropped Image</Button>
                        <Button Color="Color.Secondary" Clicked="@ResetPurchaseOverviewSelection" Disabled="@cropButtonDisabled">Reset Selection</Button>
                    </Div>
                    <Image Source="@croppedImage" Border="Border.Is1" Style="width: 300px; height: 300px;" />

                </Column>
            </Row>

        </ModalBody>
        <ModalFooter>

            <Button Color="Color.Secondary" Clicked="@ClosePurchaseOverviewCropModal">@L["Cancel"]</Button>
            <Button Color="Color.Primary" Disabled="@croppedImage.IsNullOrWhiteSpace()" Clicked="()=>CropPurchaseOverviewImageAsync(GroupPurchaseOverviewModule,PurchaseOverviewPicker)">@L["Save"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<Modal @ref="OrderInstructionCropperModal">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@L["OrderInstructionCropper"]</ModalTitle>
            <CloseButton Clicked="@CloseOrderInstructionCropModal" />
        </ModalHeader>
        <ModalBody>
            <Row>
                <Column ColumnSize="ColumnSize.Is6">
                    <Cropper @ref="OrderInstructionCropper"
                             Source="@imageToCrop"
                             Style="aspect-ratio: 16 / 9;"
                             SelectionChanged="@OnOrderInstructionSelectionChanged"
                             ShowBackground="true" />
                </Column>
                <Column ColumnSize="ColumnSize.Is6">
                    <Div Margin="Margin.Is2.FromBottom">
                        <Button Color="Color.Primary" Clicked="GetOrderInstructionCroppedImage" Disabled="@cropButtonDisabled">Get Cropped Image</Button>
                        <Button Color="Color.Secondary" Clicked="@ResetOrderInstructionSelection" Disabled="@cropButtonDisabled">Reset Selection</Button>
                    </Div>
                    <Image Source="@croppedImage" Border="Border.Is1" Style="width: 300px; height: 300px;" />

                </Column>
            </Row>

        </ModalBody>
        <ModalFooter>

            <Button Color="Color.Secondary" Clicked="@CloseOrderInstructionCropModal">@L["Cancel"]</Button>
            <Button Color="Color.Primary" Disabled="@croppedImage.IsNullOrWhiteSpace()" Clicked="()=>CropOrderInstructionImageAsync(GroupOrderInstructionModule,OrderInstructionPicker)">@L["Save"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<Modal @ref="PatnerShipCropperModal">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@L["PatnershipCropper"]</ModalTitle>
            <CloseButton Clicked="@ClosePatnershipCropModal" />
        </ModalHeader>
        <ModalBody>
            <Row>
                <Column ColumnSize="ColumnSize.Is6">
                    <Cropper @ref="PatnerShipCropper"
                             Source="@imageToCrop"
                             Style="aspect-ratio: 16 / 9;"
                             SelectionChanged="@OnPartnershipImageSelectionChanged"
                             ShowBackground="true" />
                </Column>
                <Column ColumnSize="ColumnSize.Is6">
                    <Div Margin="Margin.Is2.FromBottom">
                        <Button Color="Color.Primary" Clicked="GetPartnershipImageCroppedImage" Disabled="@cropButtonDisabled">Get Cropped Image</Button>
                        <Button Color="Color.Secondary" Clicked="@ResetPartnershipImageSelection" Disabled="@cropButtonDisabled">Reset Selection</Button>
                    </Div>
                    <Image Source="@croppedImage" Border="Border.Is1" Style="width: 300px; height: 300px;" />

                </Column>
            </Row>

        </ModalBody>
        <ModalFooter>

            <Button Color="Color.Secondary" Clicked="@ClosePatnershipCropModal">@L["Cancel"]</Button>
            <Button Color="Color.Primary" Disabled="@croppedImage.IsNullOrWhiteSpace()" Clicked="()=>CropPartnershipImageAsync(PatnershipModule)">@L["Save"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal> *@
@code {

}