@using Kooco.Pikachu.InboxManagement
@inherits PikachuComponentBase

<Div Class="actions-container">
    <div class="inbox-actions">
        <div class="inbox-filter-actions">
            @foreach (var button in Enum.GetValues<NotificationFilter>())
            {
                <PikachuButton Class="@ButtonClass(button)"
                               Clicked="@(() => OnClick(button))"
                               Disabled="Loading">
                    @L["Enum:NotificationFilter." + (int)button]
                </PikachuButton>
            }
        </div>
        <div class="inbox-actions-right">
            <PikachuButton Class="pk-btn-sm"
                           IconClass="fas fa-refresh"
                           Clicked="() => OnRefresh.InvokeAsync(SelectedFilter)"
                           Disabled="Loading">
                @L["Refresh"]
            </PikachuButton>
            <PikachuButton Class="pk-btn-sm pk-btn-primary"
                           IconClass="fas fa-check"
                           Clicked="() => OnMarkAllRead.InvokeAsync()"
                           Disabled="Loading">
                @L["MarkAllRead"]
            </PikachuButton>
        </div>
    </div>
</Div>

@code {
    [Parameter] public bool Loading { get; set; }
    [Parameter] public EventCallback OnMarkAllRead { get; set; }
    [Parameter] public EventCallback<NotificationFilter> OnRefresh { get; set; }
    private NotificationFilter SelectedFilter { get; set; }

    string ButtonClass(NotificationFilter button)
    {
        string btnClass = "pk-btn-sm" + " ";
        return btnClass + (SelectedFilter == button
            ? "pk-btn-secondary"
            : "pk-btn-outline-secondary");
    }

    async Task OnClick(NotificationFilter button)
    {
        if (Loading) return;
        SelectedFilter = button;
        await OnRefresh.InvokeAsync(SelectedFilter);
    }
}
