@page "/Website-Basic-Settings"
@using Kooco.Pikachu.EnumValues
@using Kooco.Pikachu.ImageCompressors
@using Kooco.Pikachu.Images
@using Kooco.Pikachu.Localization
@using Kooco.Pikachu.Permissions
@using Kooco.Pikachu.WebsiteManagement
@using Kooco.Pikachu.WebsiteManagement.WebsiteBasicSettings
@using Volo.Abp.AspNetCore.Components.Notifications
@using Volo.Abp.AspNetCore.Components.Web
@attribute [Authorize(PikachuPermissions.WebsiteManagement.WebsiteBasicSettings)]
@inherits PikachuComponentBase
@inject IWebsiteBasicSettingAppService WebsiteBasicSettingAppService
@inject IImageAppService ImageAppService
@inject AbpBlazorMessageLocalizerHelper<PikachuResource> LH
@inject IJSRuntime JSRuntime
@inject IImageCompressorService ImageCompressorService

<h3 class="text-dark text-center">@L["WebsiteBasicSettings"]</h3>

<Div Class="rounded-cards">
    <Card>
        <CardBody>
            <Validations @ref="@ValidationsRef" Model="@Entity" ValidateOnLoad="false">
                <Row>
                    <Column ColumnSize="ColumnSize.Is12.Is3.OnDesktop">
                        <h4>
                            @L["BasicSettings"]
                        </h4>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is12.Is9.OnDesktop">
                        <Field>
                            <Switch TValue="bool" @bind-Checked="Entity.IsEnabled"><FieldLabel Class="text-dark">@L["Enable/Disable"]</FieldLabel></Switch>
                        </Field>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is12">
                                <Validation MessageLocalizer="@LH.Localize">
                                    <Field>
                                        <FieldLabel>@L["StoreTitle"] *</FieldLabel>
                                        <TextEdit @bind-Text="@Entity.StoreTitle">
                                            <Feedback>
                                                <ValidationError />
                                            </Feedback>
                                        </TextEdit>
                                    </Field>
                                </Validation>
                            </Column>
                            <Column ColumnSize="ColumnSize.Is12">
                                <Validation MessageLocalizer="@LH.Localize">
                                    <Field>
                                        <FieldLabel>@L["TitleDisplayOption"] *</FieldLabel>
                                        <Select TValue="WebsiteTitleDisplayOptions?" @bind-SelectedValue="@Entity.TitleDisplayOption">
                                            <Feedback>
                                                <ValidationError />
                                            </Feedback>
                                            <ChildContent>
                                                <SelectItem Value="(WebsiteTitleDisplayOptions?)null"></SelectItem>
                                                @foreach (WebsiteTitleDisplayOptions option in Enum.GetValues(typeof(WebsiteTitleDisplayOptions)))
                                                {
                                                    <SelectItem Value="option">@L["Enum:WebsiteTitleDisplayOptions." + (int)option]</SelectItem>
                                                }
                                            </ChildContent>
                                        </Select>
                                    </Field>
                                </Validation>
                            </Column>
                        </Row>
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["Description"] *</FieldLabel>
                                <MemoEdit @bind-Text="@Entity.Description" Rows="6">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </MemoEdit>
                            </Field>
                        </Validation>
                    </Column>
                </Row>
                <Divider></Divider>
                <Row>
                    <Column ColumnSize="ColumnSize.Is12.Is3.OnDesktop">
                        <h4>@L["Logo"]</h4>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is12.Is9.OnDesktop">
                        <Div Class="@((!string.IsNullOrEmpty(LogoBase64) || !string.IsNullOrEmpty(Entity.LogoUrl) ? "has-images" : "") + " container-less-filepicker filepicker-sm")">
                            <Field>
                                <FilePicker Changed="@OnFileUploadAsync"
                                            ShowMode="FilePickerShowMode.List"
                                            Accept="@(string.Join(", ", Constant.ValidImageExtensions))">
                                </FilePicker>
                                <Validation MessageLocalizer="@LH.Localize">
                                    <TextEdit @bind-Text="@Entity.LogoName" Class="invisible-input">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </Validation>
                            </Field>
                        </Div>
                        <div class="image-list-container">
                            <div>
                                <div class="image-container">
                                    <Image class="blur-image" Source="@(LogoBase64 != null ? "data:image/png;base64," + LogoBase64 : Entity.LogoUrl)" Text="Logo Image" Fluid />
                                </div>
                            </div>
                        </div>
                    </Column>
                </Row>
                <Divider></Divider>
                <Row>
                    <Column ColumnSize="ColumnSize.Is12.Is3.OnDesktop">
                        <h4>@L["Template"]</h4>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is12.Is9.OnDesktop">
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <Select TValue="GroupBuyTemplateType?" @bind-SelectedValue="Entity.TemplateType">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                    <ChildContent>
                                        <SelectItem Value="(GroupBuyTemplateType?)null"></SelectItem>
                                        @foreach (GroupBuyTemplateType value in Enum.GetValues<GroupBuyTemplateType>().Where(x => x == GroupBuyTemplateType.PikachuTwo))
                                        {
                                            <SelectItem Value="value">@L["Enum:GroupBuyTemplateType." + (int)value]</SelectItem>
                                        }
                                    </ChildContent>
                                </Select>
                            </Field>
                        </Validation>
                    </Column>
                </Row>
                <Divider></Divider>
                <Row>
                    <Column ColumnSize="ColumnSize.Is12.Is3.OnDesktop">
                        <h4>@L["ColorScheme"]</h4>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is12.Is9.OnDesktop">
                        <Field>
                            <Select TValue="ColorScheme?" SelectedValue="Entity.ColorScheme"
                                    SelectedValueChanged="(e) => OnColorSchemeChange(e)">
                                <SelectItem Value="(ColorScheme?)null"></SelectItem>
                                @foreach (ColorScheme value in Enum.GetValues<ColorScheme>())
                                {
                                    <SelectItem Value="@value">@L["Enum:ColorScheme." + (int)value]</SelectItem>
                                }
                            </Select>
                            <Validation MessageLocalizer="@LH.Localize">
                                <Select TValue="ColorScheme?" @bind-SelectedValue="Entity.ColorScheme" Class="invisible-input">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                    <ChildContent>
                                        <SelectItem Value="(ColorScheme?)null"></SelectItem>
                                        @foreach (ColorScheme value in Enum.GetValues<ColorScheme>())
                                        {
                                            <SelectItem Value="@value">@L["Enum:ColorScheme." + (int)value]</SelectItem>
                                        }
                                    </ChildContent>
                                </Select>
                            </Validation>
                        </Field>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is12">
                        @if (Entity.ColorScheme.HasValue)
                        {
                            <Row Class="d-flex justify-content-center">
                                <Column ColumnSize="ColumnSize.Is2" Class="text-center">
                                    <FieldLabel>@L["Primary"]</FieldLabel>
                                    <ColorPicker Class="color-scheme" @bind-Color="@Entity.PrimaryColor" />
                                    <TextEdit Class="mt-2" Disabled @bind-Text="Entity.PrimaryColor" />
                                </Column>
                                <Column ColumnSize="ColumnSize.Is2" Class="text-center">
                                    <FieldLabel>@L["Secondary"]</FieldLabel>
                                    <ColorPicker Class="color-scheme" @bind-Color="@Entity.SecondaryColor" />
                                    <TextEdit Class="mt-2" Disabled @bind-Text="Entity.SecondaryColor" />
                                </Column>
                                <Column ColumnSize="ColumnSize.Is2" Class="text-center">
                                    <FieldLabel>@L["Background"]</FieldLabel>
                                    <ColorPicker Class="color-scheme" @bind-Color="@Entity.BackgroundColor" />
                                    <TextEdit Class="mt-2" Disabled @bind-Text="Entity.BackgroundColor" />
                                </Column>
                                <Column ColumnSize="ColumnSize.Is2" Class="text-center">
                                    <FieldLabel Class="d-none d-xl-block">@L["SecondaryBackground"]</FieldLabel>
                                    <FieldLabel Class="d-block d-xl-none">@L["SecondaryBg"]</FieldLabel>
                                    <ColorPicker Class="color-scheme" @bind-Color="@Entity.SecondaryBackgroundColor" />
                                    <TextEdit Class="mt-2" Disabled @bind-Text="Entity.SecondaryBackgroundColor" />
                                </Column>
                                <Column ColumnSize="ColumnSize.Is2" Class="text-center">
                                    <FieldLabel>@L["Alert"]</FieldLabel>
                                    <ColorPicker Class="color-scheme" @bind-Color="@Entity.AlertColor" />
                                    <TextEdit Class="mt-2" Disabled @bind-text="Entity.AlertColor" />
                                </Column>
                                <Column ColumnSize="ColumnSize.Is2" Class="text-center">
                                    <FieldLabel>@L["Block"]</FieldLabel>
                                    <ColorPicker Class="color-scheme" @bind-Color="@Entity.BlockColor" />
                                    <TextEdit Class="mt-2" Disabled @bind-text="Entity.BlockColor" />
                                </Column>
                            </Row>
                        }

                    </Column>
                </Row>
            </Validations>
        </CardBody>
    </Card>
    <Div Class="text-end">
        <PikachuButton Class="pk-btn-transparent" Disabled="IsLoading" Loading="IsCancelling" Clicked="ResetAsync">
            @L["Cancel"]
        </PikachuButton>
        <PikachuButton Class="pk-btn-primary" Loading="IsLoading" Disabled="IsCancelling" Clicked="UpdateAsync">
            @L["Update"]
        </PikachuButton>
    </Div>
</Div>
