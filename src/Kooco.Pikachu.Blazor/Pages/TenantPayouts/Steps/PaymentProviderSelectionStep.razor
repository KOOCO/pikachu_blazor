@using Kooco.Pikachu.TenantPaymentFees
@using Kooco.Pikachu.TenantPayouts
@using Kooco.Pikachu.Extensions

@inherits PikachuComponentBase

@if (Loading)
{
    <p class="mt-3">
        <span class="spinner">
            <span class="spinner-border text-primary" style="height: 1.5rem; width: 1.5rem; border-width: 2px;"></span>
        </span>
        <span style="font-size: 1rem;">Loading...</span>
    </p>
}
else
{
    @foreach (var feeType in ActiveFeeTypes.OrEmptyIfNull())
    {
        var localized = L["Enum:TenantPaymentFee." + (int)feeType];

        <div class="list-card" @onclick="@(() => SelectFeeType(feeType))">
            <div class="list-card-left">
                <div class="list-card-icon provider">
                    @TenantPayoutUiHelper.GetInitials(localized)
                </div>
                <div class="list-card-info">
                    <div class="d-flex align-items-start justify-content-start gap-2">
                        <h3>@localized</h3>
                        <PikachuBadge Class="pk-badge-success pk-badge-sm">@L["TenantPayout:Active"]</PikachuBadge>
                    </div>
                    <div class="list-card-meta">@L["PrimaryPaymentProcessingProvider"]</div>
                </div>
            </div>
        </div>
    }

    @if (ActiveFeeTypes != null && ActiveFeeTypes.Count != 0)
    {
        <div class="list-card disabled">
            <div class="list-card-left">
                <div class="list-card-icon">
                    +
                </div>
                <div class="list-card-info">
                    <div class="d-flex align-items-start justify-content-start gap-2">
                        <h3>@L["AdditionalProviders"]</h3>
                        <PikachuBadge Class="pk-badge-sm bg-light">@L["ComingSoon"]</PikachuBadge>
                    </div>
                    <div class="list-card-meta">@L["MoreProvidersWillBeAvailableSoon"]</div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="list-card disabled">
            <div class="list-card-left">
                <div class="list-card-icon">
                    <i class="fas fa-cancel"></i>
                </div>
                <div class="list-card-info">
                    <div class="d-flex align-items-start justify-content-start gap-2">
                        <h3>@L["NoPayoutData"]</h3>
                    </div>
                    <div class="list-card-meta">@L["NoPayoutDataDescription"]</div>
                </div>
            </div>
        </div>
    }
}

@code {
    [CascadingParameter] public TenantPayoutContext Context { get; set; } = default!;
    [Parameter] public EventCallback<PaymentFeeType?> FeeTypeChanged { get; set; }

    private PaymentFeeType? FeeType { get; set; }
    private List<PaymentFeeType> ActiveFeeTypes { get; set; }
    private bool Loading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await GetData();
    }

    async Task GetData()
    {
        try
        {
            ActiveFeeTypes = Context.TenantId.HasValue
                ? await Context.Service.GetActivePaymentProvidersAsync(Context.TenantId.Value)
                : [];
        }
        catch (Exception ex) { await HandleErrorAsync(ex); }
        finally
        {
            Loading = false;
            StateHasChanged();
        }
    }

    async Task BackToTenants()
    {
        await SelectFeeType(null);
    }

    async Task SelectFeeType(PaymentFeeType? value)
    {
        if (FeeType != value)
        {
            FeeType = value;
            await FeeTypeChanged.InvokeAsync(value);
        }
    }
}