@using Kooco.Pikachu.TenantPayouts
@using Kooco.Pikachu.Extensions

@inherits PikachuComponentBase

@if (Loading)
{
    <p class="mt-3">
        <span class="spinner">
            <span class="spinner-border text-primary" style="height: 1.5rem; width: 1.5rem; border-width: 2px;"></span>
        </span>
        <span style="font-size: 1rem;">Loading...</span>
    </p>
}
else
{
    @foreach (var tenant in Tenants.OrEmptyIfNull())
    {
        <div class="list-card" @onclick="@(() => SelectTenant(tenant))">
            <div class="list-card-left">
                <div class="list-card-icon">
                    @TenantPayoutUiHelper.GetInitials(tenant.Name)
                </div>
                <div class="list-card-info">
                    <h3>@tenant.Name</h3>
                    <div class="list-card-meta">ID: @tenant.TenantId.ToString().ToUpper() • @L["TenantActiveSince", tenant.CreationTime.Year]</div>
                </div>
            </div>
            <div class="list-card-stats">
                <p class="tenant-fee">
                    @L["TenantPayoutTotalFees", $"${tenant.TotalFees:N2}"]
                </p>
                <p class="small">@L["NumberOfTransactionsThisMonth", tenant.TotalTransactions]</p>
            </div>
        </div>
    }

    @if (Tenants == null || Tenants.Count == 0)
    {
        <div class="list-card disabled">
            <div class="list-card-left">
                <div class="list-card-icon">
                    <i class="fas fa-cancel"></i>
                </div>
                <div class="list-card-info">
                    <div class="d-flex align-items-start justify-content-start gap-2">
                        <h3>@L["NoPayoutData"]</h3>
                    </div>
                    <div class="list-card-meta">@L["NoPayoutDataDescription"]</div>
                </div>
            </div>
        </div>
    }
}

@code {
    [CascadingParameter] public TenantPayoutContext Context { get; set; } = default!;
    [Parameter] public EventCallback<TenantPayoutSummaryDto?> TenantChanged { get; set; }

    private List<TenantPayoutSummaryDto> Tenants { get; set; } = new();
    private TenantPayoutSummaryDto? Tenant { get; set; }
    private bool Loading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await GetData();
    }

    async Task GetData()
    {
        try
        {
            Tenants = await Context.Service.GetTenantSummariesAsync();
        }
        catch (Exception ex) { await HandleErrorAsync(ex); }
        finally
        {
            Loading = false;
            StateHasChanged();
        }
    }

    private async Task SelectTenant(TenantPayoutSummaryDto? value)
    {
        if (Tenant != value)
        {
            Tenant = value;
            await TenantChanged.InvokeAsync(value);
        }
    }
}