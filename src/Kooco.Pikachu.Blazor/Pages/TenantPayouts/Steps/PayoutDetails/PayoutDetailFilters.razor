@using Kooco.Pikachu.TenantPaymentFees
@using Kooco.Pikachu.TenantPayouts
@using Kooco.Pikachu.EnumValues
@inherits PikachuComponentBase

@if (Filters != null)
{
    <div class="payout-options-container">
        <h5 class="text-dark">@L["PayoutDetails:Filters"]</h5>
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-5">
            <div class="col">
                <div class="form-group m-0">
                    <label class="form-label">@L["StartDate"]</label>
                    <DatePicker TValue="DateTime" @bind-Date="Filters.StartDate" Size="Size.Small" EnabledDates="EnabledDates" />
                    @if (InvalidStartDate)
                    {
                        <span class="error-message">@L["PayoutDetails:InvalidFilterYear", L["StartDate"], Context.Year]</span>
                    }
                </div>
            </div>
            <div class="col">
                <div class="form-group m-0">
                    <label class="form-label">@L["EndDate"]</label>
                    <DatePicker TValue="DateTime" @bind-Date="Filters.EndDate" Size="Size.Small" EnabledDates="EnabledDates" />
                    @if (InvalidEndDate)
                    {
                        <span class="error-message">@L["PayoutDetails:InvalidFilterYear", L["EndDate"], Context.Year]</span>
                    }
                </div>
            </div>
            <div class="col">
                <div class="form-group m-0">
                    <label class="form-label">@L["PaymentType"]</label>
                    <AntDesign.Select @bind-Value="@Filters.PaymentMethod"
                                      TItemValue="PaymentMethods?"
                                      TItem="PaymentMethods?"
                                      DropdownMatchSelectWidth="false"
                                      AllowClear>
                        <SelectOptions>
                            @foreach (PaymentMethods method in Enum.GetValues<PaymentMethods>())
                            {
                                <AntDesign.SelectOption TItem="PaymentMethods?" TItemValue="PaymentMethods?" Value="@method" Label="@L[method.ToString()]" />
                            }
                        </SelectOptions>
                    </AntDesign.Select>
                </div>
            </div>
            <div class="col">
                <div class="form-group m-0">
                    <label class="form-label">@L["OrderNumber"]</label>
                    <AntDesign.Input @bind-Value="@Filters.Filter" />
                </div>
            </div>
            <div class="col">
                <div class="form-group m-0">
                    <label class="form-label">@L["PaymentStatus"]</label>
                    <AntDesign.Select @bind-Value="@Filters.IsPaid"
                                      TItemValue="bool?"
                                      TItem="bool?"
                                      AllowClear>
                        <SelectOptions>
                            <AntDesign.SelectOption TItem="bool?" TItemValue="bool?" Value="@true" Label="@L["Paid"]" />
                            <AntDesign.SelectOption TItem="bool?" TItemValue="bool?" Value="@false" Label="@L["Unpaid"]" />
                        </SelectOptions>
                    </AntDesign.Select>
                </div>
            </div>

        </div>
        <div class="mt-2">
            <div class="d-flex align-items-end justify-content-end flex-wrap w-100">
                <button class="btn btn-sm btn-primary px-3 me-2"
                        style="border-radius: 0.3rem;"
                        disabled="@Loading"
                        @onclick="ApplyFilters">
                    @if (Context.Filtering)
                    {
                        <i class="fas fa-spinner fa-spin"></i>
                    }
                    else
                    {
                        @L["ApplyFilters"]
                    }
                </button>
                <button class="btn btn-sm btn-outline-danger px-3"
                        style="border-radius: 0.3rem;"
                        disabled="@Loading"
                        @onclick="Reset">
                    @if (Context.Resetting)
                    {
                        <i class="fas fa-spinner fa-spin"></i>
                    }
                    else
                    {
                        @L["Reset"]
                    }
                </button>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter] public TenantPayoutContext Context { get; set; }
    [Parameter] public GetTenantPayoutRecordListDto Filters { get; set; }
    [Parameter] public EventCallback<GetTenantPayoutRecordListDto> FiltersChanged { get; set; }
    [Parameter] public EventCallback<GetTenantPayoutRecordListDto> OnFilter { get; set; }

    private bool Loading => Context?.Filtering == true || Context?.Resetting == true;
    private bool InvalidStartDate => Filters?.StartDate.Year != Context.Year;
    private bool InvalidEndDate => Filters?.EndDate.Year != Context.Year;
    private IEnumerable<DateTime> EnabledDates { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Filters == null && Context != null)
        {
            await Reset();
        }
    }

    async Task ApplyFilters()
    {
        if (InvalidStartDate || InvalidEndDate) return;

        Context.Filtering = true;
        await InvokeAsync(StateHasChanged);

        await FiltersChanged.InvokeAsync(Filters);
        await OnFilter.InvokeAsync(Filters);
    }

    async Task Reset()
    {
        Context.Resetting = true;
        await InvokeAsync(StateHasChanged);

        Context.Year ??= DateTime.Now.Year;

        Filters = new()
        {
            TenantId = Context.TenantId!.Value,
            FeeType = Context.FeeType!.Value,
            Year = Context.Year!.Value,
            StartDate = new DateTime(Context.Year.Value, 1, 1),
            EndDate = new DateTime(Context.Year.Value, 12, 31)
        };

        EnabledDates = Enumerable.Range(0, (Filters.EndDate - Filters.StartDate).Days + 1)
            .Select(offset => Filters.StartDate.AddDays(offset))
            .ToArray();

        await FiltersChanged.InvokeAsync(Filters);
        await OnFilter.InvokeAsync(Filters);
    }
}
