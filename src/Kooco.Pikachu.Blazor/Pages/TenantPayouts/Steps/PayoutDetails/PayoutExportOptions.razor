@inherits PikachuComponentBase

<div class="payout-options-container">
    <h5 class="text-dark">@L["PayoutDetails:ExportOptions"]</h5>
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 justify-content-center g-2">
        <div class="col">
            <div class="payout-stats-card">
                <div class="payout-stats-icon purple">
                    <i class="fas fa-funnel-dollar"></i>
                </div>
                <div class="payout-stats-info">
                    <p class="mb-1">
                        @(L["PayoutDetails:SelectedRecords"]) @SelectedCountText
                    </p>
                    <div>
                        <button class="export-option-button"
                                disabled="@(!AnySelected || Context.Exporting)"
                                @onclick="() => ExportAsync(Csv, true, false)">
                            <i class="fas fa-file-csv"></i>
                            @L["CSV"]
                        </button>
                        <button class="export-option-button"
                                disabled="@(!AnySelected || Context.Exporting)"
                                @onclick="() => ExportAsync(Excel, true, false)">
                            <i class="fas fa-file-excel"></i>
                            @L["Excel"]
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="payout-stats-card">
                <div class="payout-stats-icon green">
                    <i class="fas fa-bullseye"></i>
                </div>
                <div class="payout-stats-info">
                    <p class="mb-1">@(L["PayoutDetails:CurrentFilter"])</p>
                    <div>
                        <button class="export-option-button"
                                disabled="@(CurrentFilterCount == 0 || Context.Exporting)"
                                @onclick="() => ExportAsync(Csv, false, true)">
                            <i class="fas fa-file-csv"></i>
                            @L["CSV"]
                        </button>
                        <button class="export-option-button"
                                disabled="@(CurrentFilterCount == 0 || Context.Exporting)"
                                @onclick="() => ExportAsync(Excel, false, true)">
                            <i class="fas fa-file-excel"></i>
                            @L["Excel"]
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="payout-stats-card">
                <div class="payout-stats-icon orange">
                    <i class="fas fa-database"></i>
                </div>
                <div class="payout-stats-info">
                    <p class="mb-1">@(L["PayoutDetails:AllData"])</p>
                    <div>
                        <button class="export-option-button"
                                disabled="@Context.Exporting"
                                @onclick="() => ExportAsync(Csv, false, false)">
                            <i class="fas fa-file-csv"></i>
                            @L["CSV"]
                        </button>
                        <button class="export-option-button"
                                disabled="@Context.Exporting"
                                @onclick="() => ExportAsync(Excel, false, false)">
                            <i class="fas fa-file-excel"></i>
                            @L["Excel"]
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public TenantPayoutContext Context { get; set; }
    [Parameter] public bool AnySelected { get; set; }
    [Parameter] public string SelectedCountText { get; set; }
    [Parameter] public int CurrentFilterCount { get; set; }
    [Parameter] public EventCallback<PayoutExportOptionsArgs> OnExport { get; set; }

    public const string Excel = "Excel";
    public const string Csv = "Csv";

    async Task ExportAsync(string exportType, bool exportSelected, bool exportCurrent)
    {
        if (exportSelected && !AnySelected) return;
        if (exportCurrent && CurrentFilterCount == 0) return;

        Context.Exporting = true;

        await InvokeAsync(StateHasChanged);

        await OnExport.InvokeAsync(new PayoutExportOptionsArgs
        {
            ExportType = exportType,
            ExportSelected = exportSelected,
            ExportCurrent = exportCurrent
        });
    }
}
