@using Kooco.Pikachu.InventoryManagement
@using Kooco.Pikachu.Items
@using Kooco.Pikachu.Items.Dtos
@inherits PikachuComponentBase
@inject IItemAppService ItemAppService

@if (Filters != null)
{
    <Card>
        <CardBody>
            <Row>
                <Column ColumnSize="ColumnSize.Is10">
                    <Div Class="input-group">
                        <TextEdit @bind-Text="Filters.Filter" Style="border-radius: 0.5rem 0 0 0.5rem;" />
                        <Button Color="Color.Primary" Clicked="Filter"
                                Style="border-radius: 0 0.5rem 0.5rem 0;">
                            <Icon Class="fas fa-search"></Icon>
                        </Button>
                    </Div>
                </Column>
                <Column ColumnSize="ColumnSize.Is2">
                    <Button Class="btn-outline-primary w-100" Clicked="(() => FiltersVisible = !FiltersVisible)">
                        @L["Filters"]
                        <i class="fas @(FiltersVisible ? "fa-angles-up" : "fa-angles-down") ms-1"></i>
                    </Button>
                </Column>
            </Row>
            @if (FiltersVisible)
            {
                <Row Margin="Margin.Is2.FromTop" VerticalGutter="10">
                    <Column ColumnSize="ColumnSize.Is3">
                        <FieldLabel>@L["MinCurrentStock"]</FieldLabel>
                        <AntDesign.InputNumber @bind-Value="Filters.MinCurrentStock" />
                    </Column>
                    <Column ColumnSize="ColumnSize.Is3">
                        <FieldLabel>@L["MaxCurrentStock"]</FieldLabel>
                        <AntDesign.InputNumber @bind-Value="Filters.MaxCurrentStock" />
                    </Column>
                    <Column ColumnSize="ColumnSize.Is3">
                        <FieldLabel>@L["MinAvailableStock"]</FieldLabel>
                        <AntDesign.InputNumber @bind-Value="Filters.MinAvailableStock" />
                    </Column>
                    <Column ColumnSize="ColumnSize.Is3">
                        <FieldLabel>@L["MaxAvailableStock"]</FieldLabel>
                        <AntDesign.InputNumber @bind-Value="Filters.MaxAvailableStock" />
                    </Column>
                    <Column ColumnSize="ColumnSize.Is3">
                        <FieldLabel>@L["Item"]</FieldLabel>
                        <AntDesign.Select TItem="Guid?"
                                          TItemValue="Guid?"
                                          EnableSearch
                                          AllowClear
                                          @bind-Value="Filters.ItemId">
                            <SelectOptions>
                                @foreach (var item in ItemOptions)
                                {
                                    <AntDesign.SelectOption TItem="Guid?" TItemValue="Guid?" Value="@item.Id" Label="@item.Name" />
                                }
                            </SelectOptions>
                        </AntDesign.Select>
                    </Column>
                    <Column ColumnSize="ColumnSize.IsAuto">
                        <Div Class="d-flex align-items-end gap-1 h-100">
                            <Button Class="btn-sm btn-outline-primary" Clicked="Reset">
                                <Icon Name="IconName.Undo"></Icon>
                                @L["Reset"]
                            </Button>
                            <Button Class="btn-sm btn-primary" Clicked="Filter">
                                <Icon Name="IconName.Filter"></Icon>
                                @L["Filter"]
                            </Button>
                        </Div>
                    </Column>
                </Row>
            }
        </CardBody>
    </Card>
}

@code {
    [Parameter] public GetInventoryDto Filters { get; set; }

    [Parameter] public EventCallback<GetInventoryDto> FiltersChanged { get; set; }

    [Parameter] public EventCallback<GetInventoryDto> OnFilter { get; set; }

    bool FiltersVisible { get; set; }

    IReadOnlyList<KeyValueDto> ItemOptions { get; set; } = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ItemOptions = await ItemAppService.GetAllItemsLookupAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task Filter()
    {
        await OnFilter.InvokeAsync(Filters);
    }

    async Task Reset()
    {
        Filters = new();
        await FiltersChanged.InvokeAsync(Filters);
        await Filter();
    }
}