@page "/Items"

@using Volo.Abp.Application.Dtos
@using Kooco.Pikachu.Items.Dtos
@using Kooco.Pikachu.Items
@using Kooco.Pikachu.Localization
@using Microsoft.Extensions.Localization
@using Volo.Abp
@using System.Text.Json;
@using System.ComponentModel
@using Blazorise.Components
@using Blazorise.LoadingIndicator;

@inject IStringLocalizer<PikachuResource> L
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime;

<LoadingIndicator @ref="Loading" FullScreen></LoadingIndicator>
 <div class="row">
     <div class="col-4">
         <h3>@L["Items"]</h3>
    </div>
    <div class="col-8 text-lg-end">
        <Div Class="d-inline-block">
            <Span>@L["Display"]</Span>
                <Div Class="d-inline-block">
                    <Select TValue="int" SelectedValue="@Filters.MaxResultCount" SelectedValueChanged="@OnPageSizeChanged" Class="form-select-sm bg-white">
                        <SelectItem TValue="int" Value="10">10</SelectItem>
                        <SelectItem TValue="int" Value="25">25</SelectItem>
                        <SelectItem TValue="int" Value="50">50</SelectItem>
                        <SelectItem TValue="int" Value="100">100</SelectItem>
                    </Select>
                </Div>
                <Span>@L["Results"]</Span>
            </Div>
            <div class="custom-check-group me-1">
                <input type="checkbox" class="form-check-input" checked="@IsAllSelected" @onchange="HandleSelectAllChange"></input>
                <Label Class="form-label">@L["SelectAll"]</Label>
            </div>
            <Button Type="@ButtonType.Button" Class="btn btn-sm btn-primary" Clicked="CreateNewItem">
                <i class="fa fa-plus"></i>
                @L["NewItem"]
        </Button>
        <Button Type="@ButtonType.Button" Class="btn btn-sm btn-secondary">@L["CopyItem"]</Button>
            <Button Type="@ButtonType.Button" Class="btn btn-sm btn-danger" Clicked="DeleteSelectedAsync">
                @L["DeleteSelected"]
        </Button>
    </div>
</div>
<Card>
    <CardBody>
        <Div Class="form-group">
            <Label Class="form-label">@L["EnterItemName"]</Label>
                <Autocomplete TItem="KeyValueDto"
                              TValue="Guid?"
                              Data="@ItemLookup"
                              TextField="@(( item ) => item.Name)"
                              ValueField="@(( item ) => item.Id)"
                              Placeholder="@L["Search"]"
                              Filter="AutocompleteFilter.StartsWith"
                              CustomFilter="@(( item, searchValue ) => item.Name.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )"
                              Immediate="true"
                              @bind-SelectedValue="Filters.ItemId"
                              @ref="Autocomplete">
                    <NotFoundContent> @L["NotFound"] </NotFoundContent>
            </Autocomplete>
        </Div>
        <Div Class="row">
            <Div Class="col-3">
                <Label Class="form-label">@L["MinAvailableTime"]</Label>
                    <InputDate class="form-control form-control-sm" @bind-Value="Filters.MinAvailableTime"></InputDate>
                </Div>
                <Div Class="col-3">
                    <Label Class="form-label">@L["MaxAvailableTime"]</Label>
                    <InputDate class="form-control form-control-sm" @bind-Value="Filters.MaxAvailableTime"></InputDate>
                </Div>
                <Div Class="col-2">
                    <Label Class="form-label">@L["FreeShipping"]</Label>
                    <Select TValue="bool?" @bind-SelectedValue="Filters.IsFreeShipping" Class="form-select form-select-sm">
                        <SelectItem TValue="bool?" Value="null"></SelectItem>
                        <SelectItem TValue="bool?" Value="true">@L["Yes"]</SelectItem>
                        <SelectItem TValue="bool?" Value="false">@L["No"]</SelectItem>
                    </Select>
                </Div>
                <Div Class="col-2">
                    <Label Class="form-label">@L["Availability"]</Label>
                    <Select TValue="bool?" @bind-SelectedValue="Filters.IsAvailable" Class="form-select form-select-sm">
                        <SelectItem TValue="bool?" Value="null"></SelectItem>
                        <SelectItem TValue="bool?" Value="true">@L["Yes"]</SelectItem>
                        <SelectItem TValue="bool?" Value="false">@L["No"]</SelectItem>
                    </Select>
                </Div>
                <Div Class="col-2 d-flex align-items-end">
                    <Button Class="btn btn-sm btn-primary me-1" Clicked="FilterAsync">
                        <i class="fas fa-filter"></i>
                        @L["Filter"]
                </Button>
                <Button Class="btn btn-sm btn-outline-primary" Clicked="ResetAsync">
                    <i class="fas fa-undo"></i>
                    @L["Reset"]
                </Button>
            </Div>
        </Div>
    </CardBody>
</Card>
<Card>
    <CardBody>
        <DataGrid TItem="ItemListDto"
                  Data="ItemList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="Total"
                  ShowPager="true"
                  PageSize="Filters.MaxResultCount"
                  RowDoubleClicked="OnEditItem"
                  SortChanged="OnSortChange">
            <DataGridColumns>
                <DataGridColumn Caption="@L["Select"]" Width="30px">
                    <DisplayTemplate>
                        <InputCheckbox class="form-check-input" @bind-Value="@context.IsSelected"></InputCheckbox>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn Field="@nameof(ItemListDto.ItemName)"
                                Caption="@L["ItemName"]">
                </DataGridColumn>
                <DataGridColumn Field="@nameof(ItemListDto.ItemDescriptionTitle)"
                                Caption="@L["ItemDescription"]">
                </DataGridColumn>
                <DataGridColumn Caption="@L["TimeLimitPeriod"]"
                                Sortable="false">
                    <DisplayTemplate>
                        @context.LimitAvaliableTimeStart.ToShortDateString() - @context.LimitAvaliableTimeEnd.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn Field="@nameof(ItemListDto.CreationTime)"
                                Caption="@L["CreatedTime"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn Field="@nameof(ItemListDto.IsFreeShipping)"
                                Caption="@L["FreeShipping"]">
                    <DisplayTemplate>
                        @if (context.IsFreeShipping)
                        {
                            <i class="fa fa-check bg-success text-light p-1"></i>
                        }
                        else
                        {
                            <i class="fa fa-times bg-danger text-light p-1"></i>
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn Field="@nameof(ItemListDto.ShareProfit)"
                                Caption="@L["ShareProfit"]">
                </DataGridColumn>
                <DataGridColumn Field="@nameof(ItemListDto.IsItemAvaliable)"
                                Caption="@L["Availability"]">
                    <DisplayTemplate>
                        <Switch TValue="bool" Checked="@context.IsItemAvaliable" CheckedChanged="@(() => OnItemAvaliablityChange(context.Id))"></Switch>
                    </DisplayTemplate>
                </DataGridColumn>

            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>
@code {

}