@page
@using Kooco.Pikachu.Localization
@using Microsoft.AspNetCore.Mvc.Localization
@using Volo.Abp.Account.Localization
@using Volo.Abp.Account.Settings
@using Volo.Abp.Account.Web.Pages.Account;
@using Volo.Abp.AspNetCore.Mvc.UI.Theming;
@using Volo.Abp.Identity;
@using Volo.Abp.Settings
@* @model Kooco.Pikachu.Blazor.Pages.Account.LoginModel *@
@model Volo.Abp.Account.Web.Pages.Account.LoginModel
@inject IHtmlLocalizer<AccountResource> L
@inject IHtmlLocalizer<PikachuResource> LP
@inject IThemeManager ThemeManager
@inject Volo.Abp.Settings.ISettingProvider SettingProvider

@{
    Layout = ThemeManager.CurrentTheme.GetAccountLayout();
}

@section styles {
    <abp-style src="/Pages/Account/Login.css"></abp-style>
}
@section scripts {
    <abp-script-bundle name="@typeof(LoginModel).FullName">
        <abp-script src="/Pages/Account/Login.js" />
        <abp-script src="/Pages/Account/LoginStyles.js" />
    </abp-script-bundle>
}

<div class="card shadow-sm rounded">
    <div class="card-body">
        <div class="login-header">
            <h1 class="main-title">@LP["Login:ECommercePlatform"]</h1>
            <div class="logo-container">
                <svg class="logo" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                    <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
                </svg>
            </div>
            <h2>@LP["Login:AdministratorLogin"]</h2>
            <p>@LP["Login:EnterAccountPassword"]</p>
        </div>
        @if (Model.EnableLocalLogin)
        {
            <form method="post" class="mt-3">
                <div class="mb-2">
                    <div class="input-group">
                        <svg class="input-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <rect x="2" y="4" width="20" height="16" rx="2"></rect>
                            <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path>
                        </svg>
                        <input asp-for="LoginInput.UserNameOrEmailAddress" class="form-control login-input" title="@LP["Login:FillOutField"]" placeholder="@LP["Login:UsernameOrEmailAddress"]" />
                    </div>
                    <span asp-validation-for="LoginInput.UserNameOrEmailAddress" class="text-danger"></span>
                </div>

                <div class="mb-1">
                    <div class="input-group">
                        <svg class="input-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                            <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
                        </svg>
                        <input type="password" class="form-control login-input" autocomplete="new-password" maxlength="@IdentityUserConsts.MaxPasswordLength" asp-for="LoginInput.Password" title="@LP["Login:FillOutField"]" placeholder="@LP["Login:Password"]" />
                    </div>
                    <span asp-validation-for="LoginInput.Password" class="text-danger"></span>
                </div>
                <div class="row">
                    <div class="col col-6">
                        <label class="remember-me">
                            <input type="checkbox" asp-for="LoginInput.RememberMe" />
                            <span>@LP["Login:RememberMe"]</span>
                        </label>
                    </div>
                    <div class="col col-6 text-end">
                        <a class="forgot-password" href="@Url.Page("./ForgotPassword", new {returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash})">@L["ForgotPassword"]</a>
                    </div>
                </div>
                <div class="d-grid gap-2">
                    <button type="submit" button-type="Primary" name="Action" value="Login" class="btn-lg mt-3 login-button">
                        <svg class="button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"></path>
                            <polyline points="10 17 15 12 10 7"></polyline>
                            <line x1="15" y1="12" x2="3" y2="12"></line>
                        </svg>
                        <span>@L["Login"]</span>
                    </button>
                    @if (Model.ShowCancelButton)
                    {
                        <abp-button type="submit" button-type="Secondary" formnovalidate="formnovalidate" name="Action" value="Cancel" class="btn-lg mt-3">@L["Cancel"]</abp-button>
                    }
                </div>
                @if (await SettingProvider.IsTrueAsync(AccountSettingNames.IsSelfRegistrationEnabled))
                {
                    <strong class="d-block mt-1">
                        @L["AreYouANewUser"]
                        <a href="@Url.Page("./Register", new {returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash})">@L["Register"]</a>
                    </strong>
                }
            </form>
        }

        @if (Model.VisibleExternalProviders.Any())
        {
            <div class="mt-2">
                <h5>@L["OrLoginWith"]</h5>
                <form asp-page="./Login" asp-page-handler="ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" asp-route-returnUrlHash="@Model.ReturnUrlHash" method="post">
                    @foreach (var provider in Model.VisibleExternalProviders)
                    {
                        <button type="submit" class="btn btn-primary m-1" name="provider" value="@provider.AuthenticationScheme" title="@L["LogInUsingYourProviderAccount", provider.DisplayName]">@provider.DisplayName</button>
                    }
                </form>
            </div>
        }

        @if (!Model.EnableLocalLogin && !Model.VisibleExternalProviders.Any())
        {
            <div class="alert alert-warning">
                <strong>@L["InvalidLoginRequest"]</strong>
                @L["ThereAreNoLoginSchemesConfiguredForThisClient"]
            </div>
        }

    </div>
</div>