@using Kooco.Pikachu.Campaigns
@using Kooco.Pikachu.Items.Dtos
@using Kooco.Pikachu.Localization
@using Volo.Abp.AspNetCore.Components.Web
@inherits PikachuComponentBase

<Divider></Divider>
<h5>@L["AllowToBeUsedWithOtherCampaigns"]</h5>

<Validation MessageLocalizer="@LH.Localize">
    <Field>
        <FieldLabel required>@L["Useable:Discount"]</FieldLabel>
        <RadioGroup Orientation="Orientation.Vertical" TValue="CampaignUsagePolicy?" Name="DiscountUsage" @bind-CheckedValue="@Entity.DiscountUsagePolicy">
            <ChildContent>
                <Radio TValue="CampaignUsagePolicy?" Value="@CampaignUsagePolicy.None">@L["None"]</Radio>
                <Radio TValue="CampaignUsagePolicy?" Value="@CampaignUsagePolicy.All">@L["All"]</Radio>
                <Radio TValue="CampaignUsagePolicy?" Value="@CampaignUsagePolicy.Specific">@L["SpecificDiscounts"]</Radio>
            </ChildContent>
            <Feedback>
                <ValidationError />
            </Feedback>
        </RadioGroup>
        @if (Entity.DiscountUsagePolicy == CampaignUsagePolicy.Specific)
        {
            <Field indent mb0>
                <AntDesign.Select Mode="AntDesign.SelectMode.Multiple"
                                  Size="AntDesign.InputSize.Large"
                                  TItem="Guid"
                                  TItemValue="Guid"
                                  Placeholder="@L["SelectDiscounts"]"
                                  EnableSearch
                                  AllowClear
                                  MaxTagCount="AntDesign.Select.ResponsiveTag.Responsive"
                                  Class="@ValidationClass(nameof(Entity.AllowedDiscountIds))"
                                  OnSelectedItemsChanged="() => EditContext.NotifyFieldChanged(new FieldIdentifier(Entity, nameof(Entity.AllowedDiscountIds)))"
                                  @bind-Values="Entity.AllowedDiscountIds">
                    <SelectOptions>
                        @foreach (var item in DiscountOptions)
                        {
                            <AntDesign.SelectOption TItemValue="Guid" TItem="Guid" Value=@item.Id Label=@item.Name />
                        }
                    </SelectOptions>
                </AntDesign.Select>
                <ValidationMessage For="() => Entity.AllowedDiscountIds" />
            </Field>
        }
    </Field>
</Validation>

<Validation MessageLocalizer="@LH.Localize">
    <Field>
        <FieldLabel required>@L["Useable:ShoppingCredit"]</FieldLabel>
        <RadioGroup Orientation="Orientation.Vertical" TValue="CampaignUsagePolicy?" Name="ShoppingCreditUsage" @bind-CheckedValue="@Entity.ShoppingCreditUsagePolicy">
            <ChildContent>
                <Radio TValue="CampaignUsagePolicy?" Value="@CampaignUsagePolicy.None">@L["None"]</Radio>
                <Radio TValue="CampaignUsagePolicy?" Value="@CampaignUsagePolicy.All">@L["All"]</Radio>
                <Radio TValue="CampaignUsagePolicy?" Value="@CampaignUsagePolicy.Specific">@L["SpecificShoppingCredits"]</Radio>
            </ChildContent>
            <Feedback>
                <ValidationError />
            </Feedback>
        </RadioGroup>
        @if (Entity.ShoppingCreditUsagePolicy == CampaignUsagePolicy.Specific)
        {
            <Field indent mb0>
                <AntDesign.Select Mode="AntDesign.SelectMode.Multiple"
                                  Size="AntDesign.InputSize.Large"
                                  TItem="Guid"
                                  TItemValue="Guid"
                                  Placeholder="@L["SelectShoppingCredits"]"
                                  EnableSearch
                                  AllowClear
                                  MaxTagCount="AntDesign.Select.ResponsiveTag.Responsive"
                                  Class="@ValidationClass(nameof(Entity.AllowedShoppingCreditIds))"
                                  OnSelectedItemsChanged="() => EditContext.NotifyFieldChanged(new FieldIdentifier(Entity, nameof(Entity.AllowedShoppingCreditIds)))"
                                  @bind-Values="Entity.AllowedShoppingCreditIds">
                    <SelectOptions>
                        @foreach (var item in ShoppingCreditOptions)
                        {
                            <AntDesign.SelectOption TItemValue="Guid" TItem="Guid" Value=@item.Id Label=@item.Name />
                        }
                    </SelectOptions>
                </AntDesign.Select>
                <ValidationMessage For="() => Entity.AllowedShoppingCreditIds" />
            </Field>
        }
    </Field>
</Validation>

<Validation MessageLocalizer="@LH.Localize">
    <Field>
        <FieldLabel required>@L["Useable:AddOnProduct"]</FieldLabel>
        <RadioGroup Orientation="Orientation.Vertical" TValue="CampaignUsagePolicy?" Name="AddOnProductUsage" @bind-CheckedValue="@Entity.AddOnProductUsagePolicy">
            <ChildContent>
                <Radio TValue="CampaignUsagePolicy?" Value="@CampaignUsagePolicy.None">@L["None"]</Radio>
                <Radio TValue="CampaignUsagePolicy?" Value="@CampaignUsagePolicy.All">@L["All"]</Radio>
                <Radio TValue="CampaignUsagePolicy?" Value="@CampaignUsagePolicy.Specific">@L["SpecificAddOnProducts"]</Radio>
            </ChildContent>
            <Feedback>
                <ValidationError />
            </Feedback>
        </RadioGroup>
        @if (Entity.AddOnProductUsagePolicy == CampaignUsagePolicy.Specific)
        {
            <Field indent mb0>
                <AntDesign.Select Mode="AntDesign.SelectMode.Multiple"
                                  Size="AntDesign.InputSize.Large"
                                  TItem="Guid"
                                  TItemValue="Guid"
                                  Placeholder="@L["SelectAddOnProducts"]"
                                  EnableSearch
                                  AllowClear
                                  MaxTagCount="AntDesign.Select.ResponsiveTag.Responsive"
                                  Class="@ValidationClass(nameof(Entity.AllowedAddOnProductIds))"
                                  OnSelectedItemsChanged="() => EditContext.NotifyFieldChanged(new FieldIdentifier(Entity, nameof(Entity.AllowedAddOnProductIds)))"
                                  @bind-Values="Entity.AllowedAddOnProductIds">
                    <SelectOptions>
                        @foreach (var item in AddOnProductOptions)
                        {
                            <AntDesign.SelectOption TItemValue="Guid" TItem="Guid" Value=@item.Id Label=@item.Name />
                        }
                    </SelectOptions>
                </AntDesign.Select>
                <ValidationMessage For="() => Entity.AllowedAddOnProductIds" />
            </Field>
        }
    </Field>
</Validation>
@code {
    [Parameter] public CreateCampaignDto Entity { get; set; }
    [Parameter] public EditContext EditContext { get; set; }
    [Parameter] public AbpBlazorMessageLocalizerHelper<PikachuResource> LH { get; set; }
    [Parameter] public IReadOnlyList<CampaignLookupWithModuleDto> CampaignOptions { get; set; } = [];

    private IReadOnlyList<CampaignLookupWithModuleDto> DiscountOptions { get; set; } = [];
    private IReadOnlyList<CampaignLookupWithModuleDto> ShoppingCreditOptions { get; set; } = [];
    private IReadOnlyList<CampaignLookupWithModuleDto> AddOnProductOptions { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        DiscountOptions = [.. CampaignOptions.Where(l => l.Module == PromotionModule.Discount)];
        ShoppingCreditOptions = [.. CampaignOptions.Where(l => l.Module == PromotionModule.ShoppingCredit)];
        AddOnProductOptions = [.. CampaignOptions.Where(l => l.Module == PromotionModule.AddOnProduct)];

        await base.OnInitializedAsync();
    }

    string ValidationClass(string propertyName)
    {
        var fieldIdentifier = new FieldIdentifier(Entity, propertyName);
        return EditContext.GetValidationMessages(fieldIdentifier).Any() ? "is-invalid" : string.Empty;
    }
}
