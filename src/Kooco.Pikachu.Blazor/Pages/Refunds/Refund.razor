@page "/Refund"

@using Kooco.Pikachu.EnumValues;
@using Kooco.Pikachu.Localization;
@using Kooco.Pikachu.Orders;
@using Kooco.Pikachu.PaymentGateways.LinePay
@using Kooco.Pikachu.Refunds;
@using Microsoft.Extensions.Localization;
@using Blazorise;
@using Blazorise.LoadingIndicator;
@using Volo.Abp.AspNetCore.Components.Messages;

@inherits PikachuComponentBase;

@inject NavigationManager NavigationManager;
@inject IRefundAppService _refundAppService;
@inject IStringLocalizer<PikachuResource> L;
@inject IUiMessageService _uiMessageService;
@inject IJSRuntime JSRunTime;
@inject ILinePayAppService LinePayAppService
@attribute [Authorize]

@if (loading)
{
    <Skeleton Animation="SkeletonAnimation.Pulse">
        <div class="row">
            <!-- Left column for the OrdersList heading -->
            <div class="col-3">
                <!-- This skeleton item is ~7/12 wide, you can adjust ColumnSize -->
                <SkeletonItem ColumnSize="ColumnSize.Is12" Class="mb-2" />
            </div>

            <!-- Right column for multiple button placeholders -->
            <div class="col-9 text-lg-end d-flex gap-2 justify-content-end">
                <!-- Make each skeleton item narrower or wider to mimic small buttons -->
                <SkeletonItem ColumnSize="ColumnSize.Is12" />

                <!-- Add more SkeletonItem lines if needed -->
            </div>
        </div>
    </Skeleton>
    <Card>
        <CardBody>
                     <Skeleton Animation="SkeletonAnimation.Pulse">
        <!-- For example, 5 horizontal bars to represent the table rows -->
      <SkeletonTable Rows="10" Columns="13" />
    </Skeleton>
                </CardBody>
            </Card>
            }

<div style="@($"display: {(loading ? "none" : "block")};" )">
    <div class="row">
        <div class="col-6">
            <h3>@L["RefundsList"]</h3>
        </div>
        <div class="col-6 text-lg-end">
            <div class="input-group">
                <InputText class="form-control form-control-sm search-bar" @bind-Value="@Filter" placeholder="@L["Search"]"></InputText>
                <Button Type="ButtonType.Button" Class="btn btn-sm btn-primary" Clicked="OnSearch">
                    <i class="fa fa-search"></i>
                </Button>
            </div>
        </div>
    </div>

    <Card>
        <CardBody>
            <DataGrid TItem="RefundDto"
                      Data="Refunds"
                      ReadData="OnDataGridReadAsync"
                      TotalItems="TotalCount"
                      ShowPager="true"
                      PageSize="PageSize"
                      Responsive="true"
                      SortChanged="OnSortChange"
                      Hoverable>
                <DataGridColumns>
                    <DataGridColumn TItem="RefundDto"
                                    Caption="@L["OrderNo"]">
                        <DisplayTemplate>
                            <Button Class="btn-link hyperlink" Clicked="() => NavigateToOrderDetails(context)">
                                @context.Order.OrderNo
                            </Button>
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="RefundDto"
                                    Caption="@L["MerchantTradeNo"]">
                        <DisplayTemplate>
                            @context.Order.MerchantTradeNo
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="RefundDto"
                                    Caption="@L["TradeNo"]">
                        <DisplayTemplate>
                            @context.Order.TradeNo
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="RefundDto"
                                    Caption="@L["SubmissionTime"]">
                        <DisplayTemplate>
                            @context.CreationTime.ToShortDateString() @context.CreationTime.ToShortTimeString()
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="RefundDto"
                                    Caption="@L["ReviewCompletionTime"]">
                        <DisplayTemplate>
                            @context.ReviewCompletionTime?.ToShortDateString() @context.ReviewCompletionTime?.ToShortTimeString()
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="RefundDto"
                                    Caption="@L["CustomerName"]">
                        <DisplayTemplate>
                            @context.Order.CustomerName
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Width="15%"
                                    TItem="RefundDto"
                                    Caption="@L["RefundReview"]">
                        <DisplayTemplate>
                            @if (!(context.RefundReview is RefundReviewStatus.Proccessing &&
                            context.Order.PaymentMethod is PaymentMethods.CreditCard))
                            {
                                <Div Class="d-flex">
                                    <Select Disabled
                                            TValue="RefundReviewStatus"
                                            Class="form-select form-select-sm mb-1"
                                            SelectedValue="@context.RefundReview"
                                            SelectedValueChanged="@(e => RefundReviewChanged(e, context))"
                                            Style="min-width: 150px;">
                                        @foreach (object enumValue in Enum.GetValues(typeof(RefundReviewStatus)))
                                        {
                                            <SelectItem Value="@enumValue">@L[enumValue.ToString()]</SelectItem>
                                        }
                                    </Select>

                                    @if (context.RefundReview is RefundReviewStatus.Fail)
                                    {
                                        <Button Class="btn-white"
                                                Clicked="@((e) => RefundApproved(context))">
                                            <i class="fas fa-rotate" />
                                        </Button>
                                    }
                                </Div>
                            }
                            else if (context.RefundReview is RefundReviewStatus.Proccessing &&
                            context.Order.PaymentMethod is PaymentMethods.CreditCard)
                            {
                                <Div Class="d-flex">
                                    <Select TValue="RefundReviewStatus"
                                            Class="form-select form-select-sm mb-1"
                                            SelectedValue="@context.RefundReview"
                                            SelectedValueChanged="@(e => RefundReviewChanged(e, context))">
                                        @foreach (object enumValue in Enum.GetValues(typeof(RefundReviewStatus)))
                                        {
                                            @if (enumValue.ToString() is "Success" || enumValue.ToString() is "Fail")
                                            {
                                                <SelectItem Value="@enumValue">@L[enumValue.ToString()]</SelectItem>
                                            }
                                        }
                                    </Select>

                                    @if (context.RefundReview is RefundReviewStatus.Fail ||
                                   context.RefundReview is RefundReviewStatus.Proccessing)
                                    {
                                        <Button Class="btn-white"
                                                Clicked="@((e) => RefundApproved(context))">
                                            <i class="fas fa-rotate" />
                                        </Button>
                                    }
                                </Div>
                            }
                            @if (CanProcessRefund && context.RefundReview is RefundReviewStatus.PendingReview)
                            {
                                <Div Class="d-flex justify-content-center flex-nowrap gap-1">
                                    <Button Type="ButtonType.Button"
                                            Clicked="@(e => RefundApproved(context))"
                                            Class="btn btn-sm btn-primary">
                                        @L["Approve"]
                                    </Button>
                                    <Button Type="ButtonType.Button"
                                            Clicked="@(e => OpenRefundRejectModal(context, false))"
                                            Class="btn btn-sm btn-danger">
                                        @L["Reject"]
                                    </Button>
                                </Div>
                            }
                            @if (!string.IsNullOrWhiteSpace(context.RejectReason))
                            {
                                <Div Class="text-center">
                                    <Button Type="ButtonType.Button"
                                            Clicked="@(e => OpenRefundRejectModal(context, true))"
                                            Class="btn btn-sm btn-danger">
                                        @L["ViewReason"]
                                    </Button>
                                </Div>
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="RefundDto"
                                    Caption="@L["Approver"]">
                        <DisplayTemplate>
                            @L[context.Approver ?? ""]
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="RefundDto"
                                    Caption="@L["Refunder"]">
                        <DisplayTemplate>
                            @L[context.Refunder ?? ""]
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="RefundDto"
                                    Caption="@L["MerchantRemarks"]">
                        <DisplayTemplate>
                            @context.Order.Remarks
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="RefundDto"
                                    Caption="@L["ShippingStatus"]">
                        <DisplayTemplate>
                            @L[context.Order.ShippingStatus.ToString()]
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="RefundDto"
                                    Caption="@L["PaymentMethod"]">
                        <DisplayTemplate>
                            @L[context.Order.PaymentMethod.ToString()]
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="RefundDto"
                                    Caption="@L["CheckoutAmount"]">
                        <DisplayTemplate>
                            $@L[context.Order.TotalAmount.ToString("N2")]
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGridColumns>
                <FirstPageButtonTemplate>@L[PikachuResource.FirstPage]</FirstPageButtonTemplate>
                <PreviousPageButtonTemplate>@L[PikachuResource.PrevPage]</PreviousPageButtonTemplate>
                <NextPageButtonTemplate>@L[PikachuResource.NextPage]</NextPageButtonTemplate>
                <LastPageButtonTemplate>@L[PikachuResource.LastPage]</LastPageButtonTemplate>
            </DataGrid>
        </CardBody>
    </Card>
    </div>
    <Modal @ref="@RejectReasonModal">
        <ModalContent IsCentered="true">
            <Form>
                <ModalHeader>
                    <ModalTitle>@L["RejectReason"]</ModalTitle>
                    <CloseButton Clicked="() => RejectReasonModal?.Hide()" />
                </ModalHeader>
                <ModalBody>
                    @if (ViewRejectReason)
                    {
                        <pre style="font-size: medium; white-space: pre-wrap;">
                            @SelectedRefund?.RejectReason
                        </pre>
                    }
                    else
                    {
                        <Validation Validator="ValidationRule.IsNotEmpty">
                            <Field>
                                <FieldLabel>@L["PleaseSpecifyTheReasonForRejection"]</FieldLabel>
                                <MemoEdit @bind-Text="@RejectReason" Rows="7">
                                    <Feedback>
                                        <ValidationNone>@L["PleaseSpecifyTheReasonForRejection"]:</ValidationNone>
                                        <ValidationError>@L["ThisFieldIsRequired"]</ValidationError>
                                    </Feedback>
                                </MemoEdit>
                            </Field>
                        </Validation>
                    }
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary"
                            Clicked="() => RejectReasonModal?.Hide()">
                        @L["Cancel"]
                    </Button>
                    @if (!ViewRejectReason)
                    {
                        <Button Color="Color.Primary"
                                Type="@ButtonType.Submit"
                                PreventDefaultOnSubmit="true"
                                Clicked="RefundReject">
                            @L["Save"]
                        </Button>
                    }
                </ModalFooter>
            </Form>
        </ModalContent>
    </Modal>

@{

}