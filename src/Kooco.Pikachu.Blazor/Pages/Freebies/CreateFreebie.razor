@page "/Freebie/New"

@using Kooco.Pikachu.EnumValues;
@using Kooco.Pikachu.GroupBuys;
@using Kooco.Pikachu.Items.Dtos;
@using Pikachu.Items;
@using Pikachu.Localization;
@using Microsoft.Extensions.Localization;
@using System.ComponentModel
@using Blazorise.Components;

@inject NavigationManager NavigationManager
@inject IStringLocalizer<PikachuResource> L
<script src="interop.js"></script>

<h3>@L["NewFreebie"]</h3>
<Card>

    <CardBody>
        <div class="card-body">
            <div class="col-12"> </div>
            <div class=" col-12 row">

                <div class="col-2">
                    <label>@L["ItemName"]</label>
                </div>
                <div class="col-10">
                    <TextEdit />
                </div>


            </div>

            <div class="col-12 row mt-2">
                <div class="col-2">
                    <label>
                        @L["ItemImages"]<Span>
                            <Tooltip Text="Upload upto 10 images">

                                <Icon class="fa-question-circle "></Icon>
                            </Tooltip>
                        </Span>
                    </label>
                </div>
                <div class="col-10 ">
                    <Field>
                        <FilePicker @ref="FilePicker"
                                                Multiple
                                     Changed="OnImageUploadAsync"
                                     ShowMode="FilePickerShowMode.List"
                                     Accept=".jpg, .png, .svg">
                             <FileTemplate>
                                 <Div Flex="Flex.JustifyContent.Between">
                                     <Div>
                                         <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
                                         <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                     </Div>
                                     <Div Class="ps-2">
                                         <Div>
                                             @if (context.File.Status == FileEntryStatus.Ready)
                                            {
                                                <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
                                            }
                                            else if (context.File.Status == FileEntryStatus.Uploading)
                                            {
                                                <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
                                            }
                                            else if (context.File.Status == FileEntryStatus.Uploaded)
                                            {
                                                <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
                                            }
                                            else if (context.File.Status == FileEntryStatus.Error)
                                            {
                                                <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
                                            }
                                        </Div>
                                        <Div>
                                            <Icon TextColor="TextColor.Danger" Name="IconName.Delete" class="cursor-pointer" Clicked="context.RemoveFile" />
                                        </Div>
                                    </Div>
                                </Div>
                            </FileTemplate>
                            <ButtonsTemplate>
                                <Progress Value="@FilePicker.GetProgressPercentage()" />
                            </ButtonsTemplate>
                        </FilePicker>
                    </Field>

                </div>
                @if (ImageList.Count > 0)
                {
                    <div Class="col-12 row">
                        <div class="col-2"></div>
                        <div class="col-10">
                            <div class="image-list-container">
                                @foreach (var image in ImageList)
                                {
                                    <div class="image-container">
                                        <Image class="blur-image" Source="@image.ImageUrl" Text="Carousel Image" Fluid />
                                         <button class="delete-button" @onclick="() => DeleteImageAsync(image.BlobImageName)">
                                             <i class="fa fa-trash"></i>
                                         </button>
                                     </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class=" col-12 row mt-2">
                <div class="col-2">
                    <label>@L["ItemDescription"]</label>
                </div>
                <div class=" col-10">
                    <Blazored.TextEditor.BlazoredTextEditor @ref="@ItemDescription">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-image"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-video"></button>
                            </span>
                        </ToolbarContent>
                    </Blazored.TextEditor.BlazoredTextEditor>
                </div>
            </div>

            <div class=" col-12 row mt-5">
                <div class="row mb-2"></div>
                <div class="col-2">
                    <label>@L["ChooseGroupBuy"]</label>
                </div>
                <div class="col-4">
                    <Radio TValue="bool" Group="Payment">
                        @L["ApplyToAllGroupBuy"]
                    </Radio>
                </div>
            </div>
            <div class=" col-12 row mt-1">
                <div class="col-2">
                </div>
                <div class="col-2">
                    <Radio TValue="bool" Group="Payment">

                    </Radio>
                </div>
                <div class="col-8">
                    <Autocomplete TItem="KeyValueDto"
                                TValue="Guid?"
                                Data="@GroupBuyList"
                                TextField="@(( item ) => item.Name)"
                                ValueField="@(( item ) => item.Id)"
                                @bind-SelectedValues="SelectedItems"
                                @bind-SelectedTexts="SelectedTexts"
                                Placeholder="Search..."
                                Filter="AutocompleteFilter.StartsWith"
                                SelectionMode="AutocompleteSelectionMode.Multiple"
                                CustomFilter="@(( item, searchValue ) => item.Name.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )"
                                HighlightSearch
                                Immediate="true"
                                @ref="AutocompleteField">
                         <NotFoundContent> @L["NotFound"] </NotFoundContent>
                     </Autocomplete>
                 </div>
             </div>
         </div>
     </CardBody>
 </Card>

 @code {
    }
