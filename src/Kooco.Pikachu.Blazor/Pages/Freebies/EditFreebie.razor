@page "/Freebie/Edit/{id}"

@using Kooco.Pikachu.EnumValues;
@using Kooco.Pikachu.GroupBuys;
@using Kooco.Pikachu.Items.Dtos;
@using MudBlazor;
@using Pikachu.Items;
@using Pikachu.Localization;
@using Microsoft.Extensions.Localization;
@using System.ComponentModel
@using Blazorise.Components;

@inject NavigationManager NavigationManager
@inject IStringLocalizer<PikachuResource> L

<link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
<link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<h3>@L["EditFreebie"]</h3>
<Card>
    <CardBody>
        <div class="card-body">
            <div class="row">
                <div class="col-2">
                    <label>
                        @L["ItemName"]
                        <span class="text-danger">*</span>
                    </label>
                </div>
                <div class="col-8">
                    <TextEdit @bind-Text="UpdateFreebieDto.ItemName" />
                </div>
                <div class="col-1">
                    <span>
                        @(string.IsNullOrWhiteSpace(UpdateFreebieDto.ItemName) ? 60 : (MaxTextCount - UpdateFreebieDto.ItemName.Count()))/@MaxTextCount
                    </span>
                </div>
            </div>
            <div class="row mt-2">
                <div class="col-2">
                    <label>
                        @L["ItemImages"]
                        <span class="text-danger">*</span><Span>
                            <Tooltip Text="@L["uploadUpto10Images"]">
                                <Icon class="fa-question-circle "></Icon>
                            </Tooltip>
                        </Span>
                    </label>
                </div>
                <div class="col-9">
                    <Field>
                        <FilePicker @ref="FilePicker"
                                                Multiple
                                     Changed="OnImageUploadAsync"
                                     ShowMode="FilePickerShowMode.List"
                                     Accept=".jpg, .png, .svg">
                             <FileTemplate>
                                 <Div Flex="Flex.JustifyContent.Between">
                                     <Div>
                                         <Heading Size="HeadingSize.Is6">@context.File.Name</Heading>
                                         <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                     </Div>
                                     <Div Class="ps-2">
                                         <Div>
                                             @if (context.File.Status == FileEntryStatus.Ready)
                                            {
                                                <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" />
                                            }
                                            else if (context.File.Status == FileEntryStatus.Uploading)
                                            {
                                                <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" />
                                            }
                                            else if (context.File.Status == FileEntryStatus.Uploaded)
                                            {
                                                <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" />
                                            }
                                            else if (context.File.Status == FileEntryStatus.Error)
                                            {
                                                <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" />
                                            }
                                        </Div>
                                        <Div>
                                            <Icon TextColor="TextColor.Danger" Name="IconName.Delete" class="cursor-pointer" Clicked="context.RemoveFile" />
                                        </Div>
                                    </Div>
                                </Div>
                            </FileTemplate>
                            <ButtonsTemplate>
                                <Progress Value="@FilePicker.GetProgressPercentage()" />
                            </ButtonsTemplate>
                        </FilePicker>
                    </Field>
                </div>
                @if (UpdateFreebieDto?.Images != null && UpdateFreebieDto.Images.Count > 0)
                {
                    <div Class="row mt-2">
                        <div class="col-2"></div>
                        <div class="col-9">
                            <div class="image-list-container">
                                @foreach (var image in UpdateFreebieDto.Images)
                                {
                                    <div class="image-container">
                                        <Image class="blur-image" Source="@image.ImageUrl" Text="Item Image" Fluid />
                                         <button class="delete-button" @onclick="() => DeleteImageAsync(image.BlobImageName)">
                                             <i class="fa fa-trash"></i>
                                         </button>
                                     </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="row mt-2">
                <div class="col-2">
                    <label>@L["ItemDescription"]</label>
                </div>
                <div class="col-9">
                    <Blazored.TextEditor.BlazoredTextEditor @ref="@ItemDescription">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-image"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-video"></button>
                            </span>
                        </ToolbarContent>
                    </Blazored.TextEditor.BlazoredTextEditor>
                </div>
            </div>
            <br />
            <br />
            <div class="row mt-5">
                <div class="row mb-2"></div>
                <div class="col-2">
                    <label>@L["ChooseGroupBuy"]</label>
                </div>
                <div class="col-9">
                    <RadioGroup TValue="bool"
                                CheckedValue="@UpdateFreebieDto.ApplyToAllGroupBuy"
                                CheckedValueChanged="@OnGroupbuyCheckedValueChanged"
                                Name="ApplyToAllGroupBuy"
                                Class="d-flex flex-row">
                        <Radio Value="@(true)">
                            @L["ApplyToAllGroupBuys"]
                        </Radio>
                        <Radio Value="@(false)">
                            @L["SelectGroupsBuys"]
                        </Radio>
                    </RadioGroup>
                </div>
            </div>

            @if (UpdateFreebieDto.ApplyToAllGroupBuy == false)
            {
                <div class="row mt-2">
                    <div class="col-2">
                    </div>
                    <div class="col-9">
                        <Autocomplete TItem="KeyValueDto"
                                      TValue="Guid"
                                      Data="@GroupBuyList"
                                      TextField="@(( item ) => item.Name)"
                                      ValueField="@(( item ) => item.Id)"
                                      @bind-SelectedValues="UpdateFreebieDto.FreebieGroupBuys"
                                      @bind-SelectedTexts="SelectedTexts"
                                      Placeholder="Search..."
                                      Filter="AutocompleteFilter.StartsWith"
                                      SelectionMode="AutocompleteSelectionMode.Multiple"
                                      CustomFilter="@((item, searchValue) =>item.Name != null && item.Name.IndexOf(searchValue, 0, StringComparison.CurrentCultureIgnoreCase) >= 0)"
                                      HighlightSearch
                                      Immediate="true"
                                      Size="Blazorise.Size.Small">
                             <NotFoundContent> @L["NotFound"] </NotFoundContent>
                         </Autocomplete>
                     </div>
                 </div>
            }

            <div class="row mt-3">
                <div class="col-2">
                    @L["ApplyCondition"]
                </div>
                <div class="col-9">

                    <RadioGroup TValue="bool"
                                CheckedValue="@UpdateFreebieDto.UnCondition"
                                CheckedValueChanged="@OnUnconditionCheckedValueChanged"
                                Name="Condition"
                                Class="d-flex flex-row">
                        <Radio Value="@(true)">
                            @L["Uncondition"]
                        </Radio>
                        <Radio Value="@(false)">
                            @L["WhenOrderReach"]
                        </Radio>
                    </RadioGroup>

                </div>
            </div>

            @if (UpdateFreebieDto.UnCondition == false)
            {
                <div class="row mt-1">
                    <div class="col-2">
                    </div>
                    <div class="col-4">
                        <select class="form-control form-control-sm" @bind="UpdateFreebieDto.FreebieOrderReach">
                            @foreach (var enumValue in Enum.GetValues(typeof(FreebieOrderReach)))
                            {
                                <option value="@enumValue">@L[enumValue.ToString()]</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="row mt-1">
                    <div class="col-2">
                    </div>
                    @if (UpdateFreebieDto.FreebieOrderReach is FreebieOrderReach.MinimumAmount)
                    {
                        <div class="col-2">
                            <Label>@L["AmountReach"]</Label>
                            <div class="input-group">
                                <Span Class="bg-primary text-light px-2 py-2">$</Span>
                                <MudNumericField @bind-Value="UpdateFreebieDto.MinimumAmount"
                                                 Min="0" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col-2">
                            <Label>@L["QuantityReach"]</Label>
                            <div class="input-group">
                                <Span Class="bg-primary text-light px-2 py-2">@L["Piece"]</Span>
                                <MudNumericField @bind-Value="UpdateFreebieDto.MinimumPiece"
                                                 Min="0" />
                            </div>
                        </div>
                    }
                   
                    <div class="col-2">
                        <Label l>@L["Get"]</Label>
                        <div class="input-group">
                            <MudNumericField @bind-Value="UpdateFreebieDto.FreebieQuantity"
                                             Min="0" />
                            <Span Class="bg-primary text-light px-2 py-2">@L["Piece"]</Span>
                        </div>
                    </div>
                </div>
            }

            <div class="row mt-3">
                <div class="col-2">@L["ActivityDate"]</div>
                <div class="col-2">
                    <DateEdit Class="form-control" 
                              DateChanged="@((e) => OnActivityDateChanged(e, true))" 
                              Date="UpdateFreebieDto.ActivityStartDate" 
                              Placeholder="@L["StartDate"].ToString()" 
                              TValue="DateTime?" />
                </div>
                <div class="col-2">
                    <DateEdit Class="form-control" 
                              DateChanged="@((e) => OnActivityDateChanged(e))" 
                              Date="UpdateFreebieDto.ActivityEndDate" 
                              Placeholder="@L["EndDate"].ToString()" 
                              TValue="DateTime?" />
                </div>
            </div>
            <div class="row mt-2">
                <div class="col-2">
                    <label>
                        @L["FreebieAmount"]
                        <span class="text-danger">*</span>
                    </label>
                </div>
                <div class="col-9">
                    <MudNumericField @bind-Value="UpdateFreebieDto.FreebieAmount"
                                     Min="0" />
                </div>
            </div>
        </div>
    </CardBody>
</Card>
<div class="row">
    <div class="col-12 text-lg-end">
        <Button Type="@Blazorise.ButtonType.Button" class="btn btn-danger" Clicked="CancelToFreebieList">@L["Cancel"]</Button>
        <Button Type="@Blazorise.ButtonType.Button" class="btn btn-primary" Clicked="UpdateFreebieAsync">
            <i class="fa fa-check"></i>
            @L["Save"]
        </Button>
    </div>
</div>
@code {

 }
