
@using Blazorise
@using System.Linq
@using Kooco.Pikachu.Localization;
@using Kooco.Pikachu.EnumValues;
@using Kooco.Pikachu.TenantDeliveryFees
@using Microsoft.AspNetCore.Components.Web;
@inherits PikachuComponentBase
@inject ITenantDeliveryFeeAppService FeeApp
@inject IMessageService MessageService
@using Microsoft.Extensions.Localization;
@inject IStringLocalizer<PikachuResource> L;
@inject IAuthorizationService Authorization
@inject IMessageService MessageService

<style>
    /* Logistics Fee Management Custom Styles */

    /* File Drop Zone Styling */
    .file-drop-zone {
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .file-drop-zone:hover {
            border-color: #007bff !important;
            background-color: #f8f9fa;
        }

        .file-drop-zone.dragover {
            border-color: #28a745 !important;
            background-color: #d4edda;
        }

    /* Status Badge Enhancements */
    .badge {
        font-size: 0.85em;
        padding: 0.35em 0.65em;
    }

    /* Progress Bar Customizations */
    .progress-sm {
        height: 0.5rem;
    }

    /* Card Hover Effects */
    .card {
        transition: box-shadow 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.12);
        }

    /* Summary Cards */
    .summary-card {
        border-left: 4px solid #007bff;
    }

        .summary-card.success {
            border-left-color: #28a745;
        }

        .summary-card.warning {
            border-left-color: #ffc107;
        }

        .summary-card.danger {
            border-left-color: #dc3545;
        }

    /* Table Row Hover Effects */
    .table tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.05);
    }

    /* Action Button Groups */
    .btn-group-sm > .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }

    /* Loading States */
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    /* Checkbox Styling */
    .form-check-input:checked {
        background-color: #007bff;
        border-color: #007bff;
    }

    /* Balance Color Classes */
    .text-balance-low {
        color: #dc3545 !important;
        font-weight: 600;
    }

    .text-balance-medium {
        color: #ffc107 !important;
        font-weight: 600;
    }

    .text-balance-high {
        color: #28a745 !important;
        font-weight: 600;
    }

    /* File Icon Styling */
    .file-icon {
        width: 24px;
        height: 24px;
        margin-right: 8px;
    }

    /* Breadcrumb Enhancements */
    .breadcrumb {
        background-color: transparent;
        padding: 0;
        margin-bottom: 1rem;
    }

    .breadcrumb-item + .breadcrumb-item::before {
        content: ">";
        color: #6c757d;
    }

    /* Modal Enhancements */
    .modal-header {
        border-bottom: 1px solid #dee2e6;
        padding: 1.5rem;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .modal-footer {
        border-top: 1px solid #dee2e6;
        padding: 1.5rem;
    }

    /* Alert Customizations */
    .alert {
        border: none;
        border-radius: 0.375rem;
    }

    .alert-success {
        background-color: #d1f2eb;
        color: #0f5132;
    }

    .alert-warning {
        background-color: #fff3cd;
        color: #664d03;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }

    .alert-info {
        background-color: #cff4fc;
        color: #055160;
    }

    /* Responsive Table Wrapper */
    .table-responsive {
        border-radius: 0.375rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
    }

    /* Custom Spinner */
    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
    }

    /* Form Control Focus */
    .form-control:focus {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    /* Pagination Styling */
    .pagination {
        margin-bottom: 0;
    }

    .page-link {
        color: #007bff;
        border-color: #dee2e6;
    }

        .page-link:hover {
            background-color: #e9ecef;
            border-color: #dee2e6;
        }

    .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
    }

    /* Search Input Styling */
    .search-input {
        border-radius: 2rem;
        padding-left: 2.375rem;
    }

    .search-input-icon {
        position: absolute;
        left: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
    }

    /* Status Indicators */
    .status-indicator {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 0.5rem;
    }

        .status-indicator.success {
            background-color: #28a745;
        }

        .status-indicator.warning {
            background-color: #ffc107;
        }

        .status-indicator.danger {
            background-color: #dc3545;
        }

        .status-indicator.info {
            background-color: #17a2b8;
        }

    /* Utility Classes */
    .text-truncate-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .cursor-pointer {
        cursor: pointer;
    }

    .content-header {
        background-color: #ffffff;
        border-bottom: 1px solid #dee2e6;
        padding: 0;
        margin-bottom: 1.5rem;
    }

    .breadcrumb-container {
        padding: 12px 24px 8px;
        background-color: #ffffff;
       /*  border-bottom: 1px solid #e9ecef; */
    }

    .breadcrumb-nav {
        font-size: 13px;
        color: #6c757d;
        margin: 0;
        padding: 0;
        display: flex;
        align-items: center;
    }

    .breadcrumb-link {
        color: #007bff;
        text-decoration: none;
        transition: color 0.2s ease;
    }

    .breadcrumb-link:hover {
        color: #0056b3;
        text-decoration: none;
    }

    .breadcrumb-separator {
        margin: 0 8px;
        color: #adb5bd;
        font-size: 12px;
    }

    .breadcrumb-current {
        color: #495057;
        font-weight: 500;
    }

    .page-header {
        padding: 16px 24px 20px;
        background-color: #ffffff;
    }

    .page-title {
        font-size: 24px;
        font-weight: 600;
        color: #343a40;
        margin: 0;
        line-height: 1.2;
    }

     .input-group-text span.text-muted {
    display: none !important;
}


    .logistic-fee-container {
        background-color: #f8f9fa;
        border-radius: 12px;
        padding: 24px;
        border: 1px solid #e9ecef;
    }

    .delivery-row {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 16px 0;
        min-height: 60px;
    }

    .delivery-row:not(:last-child) {
        border-bottom: 1px solid #e9ecef;
    }

    .delivery-provider-left {
        display: flex;
        align-items: center;
        gap: 16px;
      
    }

    .delivery-provider-name {
        font-weight: 500;
        font-size: 15px;
        color: #212529;
    }

    .delivery-controls-right {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    /* Blazorise Select styling */
    .delivery-controls-right .form-select,
    .delivery-controls-right select {
        width: 140px !important;
        font-size: 14px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        padding: 8px 12px;
        background-color: white;
    }

   

    

    /* Remove any Bootstrap input styling that might interfere */
    .delivery-controls-right input {
        -webkit-appearance: none;
        -moz-appearance: textfield;
    }

    .percentage-symbol {
        color: #6c757d;
        font-size: 14px;
        margin-left: 8px;
        font-weight: normal;
    }

    .delivery-options-title {
        font-size: 16px;
        font-weight: 400;
        color: #212529;
        margin-bottom: 20px;
    }

    .custom-switch {
        transform: scale(1.1);
    }

    .action-buttons {
        padding-top: 20px;
        border-top: none;
        background-color: transparent;
    }

    /* Button styling */
    .action-buttons .btn:first-child {
        padding: 10px 24px;
        border: 1px solid #ced4da;
        color: #6c757d;
        background-color: white;
        border-radius: 6px;
    }

    .action-buttons .btn:last-child {
        padding: 10px 24px;
        background-color: #0d6efd;
        border: 1px solid #0d6efd;
        color: white;
        border-radius: 6px;
    }
</style>

<Validations @ref="formValidations" Mode="ValidationMode.Manual">
    <Card Class="mb-4 border-0">
        <CardBody>
            <h5 class="mb-1">@L["LogisticFeeConfiguration"]</h5>
            <p class="text-muted mb-4">@L["LogisticFeeConfiguration_Desc"]</p>

            <!-- Delivery Options Section -->
            <div class="logistic-fee-container">
                <div class="delivery-options-title">@L["DeliveryOptions"]</div>

                @foreach (var item in Vm.Items)
                {
                    <Card Class="mb-4 border-0">
                        <CardBody>
                    <div class="delivery-row">
                        <!-- Left side: Switch and Provider name -->
                        <div class="delivery-provider-left">
                            <Switch @bind-Checked="item.IsEnabled" 
                                   Toggled="() => OnEnabledChanged(item)"
                                   Class="custom-switch" />
                            <span class="delivery-provider-name">@item.DeliveryProvider.ToString()</span>
                        </div>
                        </div>
                         <div class="delivery-row">
                        <!-- Right side: Fee controls -->
                        <div class="delivery-provider-left">
                            <!-- Fee Type Dropdown -->
                            <Select TValue="FeeKind"
                                   SelectedValue="item.FeeKind"
                                   SelectedValueChanged="(e)=>OnFeeKindChanged(e,item)"
                               
                                   Class="fee-type-select">
                                <SelectItem Value="FeeKind.Percentage">@L["Percentage"]</SelectItem>
                                <SelectItem Value="FeeKind.FixedAmount">@L["FixedAmount"]</SelectItem>
                            </Select>
                            </div>
                             <div class="delivery-controls-right">
                            <!-- Value Input -->
                            @if (item.FeeKind == FeeKind.Percentage)
                            {
                                <div class="d-flex align-items-center">
                                    <Validation Validator="@(e => ValidatePercent(e, item))">
                                        <NumericEdit TValue="decimal?"
                                                   @bind-Value="item.PercentValue"
                                                   Min="0" Max="100"
                                                
                                                   Placeholder="0.00"
                                                   />
                                        <ValidationError />
                                    </Validation>
                                    <span class="percentage-symbol">%</span>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex align-items-center">
                                    
                                <Validation Validator="@(e => ValidateFixed(e, item))">
                                     
                                    <NumericEdit TValue="decimal?"
                                               @bind-Value="item.FixedAmount"
                                               Min="0"  Max="1000"
                                               
                                               Placeholder="0.00"
                                               
                                                />
                                    <ValidationError />

                                </Validation>
                                <span class="percentage-symbol">$</span>
                                </div>
                            }
                        </div>
                    </div>
                    </CardBody>
                    </Card>
                }
            </div>
        </CardBody>

        <CardFooter class="d-flex justify-content-end gap-3 action-buttons">
            <Button Color="Color.Light" 
                   Outline 
                   Clicked="ResetAsync"
                   Class="btn-reset">
                @L["Reset"]
            </Button>
            <Button Color="Color.Primary" 
             Disabled="@(!CanManage)"
                   Clicked="SaveAsync"
                   Class="btn-save">
                @L["SaveLogisticFeeSettings"]
            </Button>
        </CardFooter>
    </Card>
</Validations>


