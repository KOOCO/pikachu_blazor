@page "/Inventory-Management/Inventory-Logs/{ItemId:guid}/{ItemDetailId:guid}"
@using Kooco.Pikachu.InventoryManagement
@inherits PikachuComponentBase
@inject IInventoryAppService InventoryAppService
@inject IInventoryLogAppService InventoryLogAppService
@inject NavigationManager NavigationManager
@inject ExcelDownloadHelper ExcelDownloadHelper

<style>
    .table.table-striped > tbody > tr:nth-of-type(odd) > td, .table.table-bordered > tbody > tr:nth-of-type(odd) > td {
        background-color: transparent;
        color: #1f1f1f !important;
        font-weight: 500;
    }

    .table.table-striped > tbody > tr:nth-of-type(even) > td, .table.table-bordered > tbody > tr:nth-of-type(even) > td {
        background-color: transparent;
        color: #1f1f1f !important;
        font-weight: 500;
    }
</style>
<PageHeader Title="@PageTitle" BreadcrumbItems="@BreadcrumbItems">
    <Div Class="d-flex align-items-end justify-content-end gap-1">
        <PikachuButton Class="pk-btn-sm pk-btn-primary"
                       Clicked="Export"
                       Loading="IsExporting"
                       Disabled="IsLoading"
                       IconClass="fas fa-file-download">
            @L["ExportAll"]
        </PikachuButton>
        <PikachuButton Class="pk-btn-sm pk-btn-secondary"
                       Clicked="AdjustStock"
                       Disabled="IsExporting || IsLoading">
            @L["AdjustStock"]
        </PikachuButton>
        <PikachuButton Class="pk-btn-sm pk-btn-danger ms-2"
                       Clicked="Close"
                       Disabled="IsExporting || IsLoading">
            @L["Close"]
        </PikachuButton>
    </Div>
</PageHeader>

<Card>
    <CardBody>
        <Table Bordered Class="text-dark">
            <TableHeader>
                <TableRow>
                    <TableHeaderCell>@L["SKU"]</TableHeaderCell>
                    <TableHeaderCell>@L["Timestamp"]</TableHeaderCell>
                    <TableHeaderCell>@L["Action"]</TableHeaderCell>
                    <TableHeaderCell>@L["CurrentStock"]</TableHeaderCell>
                    <TableHeaderCell>@L["AvailableStock"]</TableHeaderCell>
                    <TableHeaderCell>@L["PreOrderQuantity"]</TableHeaderCell>
                    <TableHeaderCell>@L["AvailablePreOrderQuantity"]</TableHeaderCell>
                    <TableHeaderCell TextAlignment="TextAlignment.Center">@L["View"]</TableHeaderCell>
                </TableRow>
            </TableHeader>
            <TableBody>
                @if (IsLoading)
                {
                    <TableRow>
                        <TableRowCell ColumnSpan="8">
                            <Div Class="text-center pt-3">
                                <Div Class="spinner-border text-primary" Style="height: 3rem; width: 3rem;"></Div>
                            </Div>
                        </TableRowCell>
                    </TableRow>
                }
                else
                {
                    if (InventoryLogList?.Count > 0)
                    {
                        foreach (var log in InventoryLogList)
                        {
                            <TableRow>
                                <TableRowCell>@log.Sku</TableRowCell>
                                <TableRowCell>@log.CreationTime.ToString("MM/dd/yyyy HH:mm:ss")</TableRowCell>
                                <TableRowCell>
                                    @switch (log.ActionType)
                                    {
                                        case InventoryActionType.AddStock:
                                            @L["StockAdded"]
                                            break;
                                        case InventoryActionType.DeductStock:
                                            @L["StockDeducted"]
                                            break;
                                        case InventoryActionType.ItemSold:
                                            @L["ItemSold", log.OrderNumber]
                                            break;
                                    }
                                </TableRowCell>
                                <TableRowCell>
                                    <InventoryLogsAmountComponent Value="log" ExpectedStockType="InventoryStockType.CurrentStock" />
                                </TableRowCell>
                                <TableRowCell>
                                    <InventoryLogsAmountComponent Value="log" ExpectedStockType="InventoryStockType.AvailableStock" />
                                </TableRowCell>
                                <TableRowCell>
                                    <InventoryLogsAmountComponent Value="log" ExpectedStockType="InventoryStockType.PreOrderQuantity" />
                                </TableRowCell>
                                <TableRowCell>
                                    <InventoryLogsAmountComponent Value="log" ExpectedStockType="InventoryStockType.AvailablePreOrderQuantity" />
                                </TableRowCell>
                                <TableRowCell TextAlignment="TextAlignment.Center">
                                    <Button Class="pk-btn-icon indigo" Clicked="() => View(log)">
                                        <Icon Name="IconName.Eye"></Icon>
                                    </Button>
                                </TableRowCell>
                            </TableRow>
                        }
                    }
                    else
                    {
                        <TableRow>
                            <TableRowCell ColumnSpan="8">
                                <Div Class="text-center pt-3">
                                    <h5 class="text-muted">@L["NoStockAdjustmentDescription"]</h5>
                                </Div>
                            </TableRowCell>
                        </TableRow>
                    }
                }
            </TableBody>
        </Table>
    </CardBody>
</Card>

<AdjustStockModal @ref="AdjustStockModalRef" OnClosed="OnStockAdjustment" />

<Modal @ref="ViewModalRef">
    <ModalContent Centered Size="ModalSize.Large">
        <Form>
            <ModalHeader>
                <ModalTitle>
                    <h4 class="text-dark m-0">@SelectedLog?.Sku</h4>
                </ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Paragraph>
                    @SelectedLog?.Description
                </Paragraph>
            </ModalBody>
            <ModalFooter>
                <PikachuButton Class="pk-btn-sm pk-btn-danger"
                               Clicked="ViewModalRef.Hide"
                               Style="width: 75px;">
                    @L["Close"]
                </PikachuButton>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>