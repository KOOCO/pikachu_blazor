@page "/logistics-management"
@using Volo.Abp.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Authorization
@using Blazorise
@using Blazorise.DataGrid
@using Kooco.Pikachu.Localization;
@using Kooco.Pikachu.LogisticsFeeManagements;
@using Kooco.Pikachu.EnumValues;
@inherits PikachuComponentBase
@using Microsoft.Extensions.Localization;
@inject ILogisticsFeeAppService LogisticsFeeAppService
@inject LogisticsFeeProcessingJob LogisticsFeeProcessingJob
@inject NavigationManager NavigationManager
@inject IMessageService MessageService
@inject IStringLocalizer<PikachuResource> L;
@attribute [Authorize(PikachuPermissions.LogisticsFeeManagement.Default)]

<style>
    /* Logistics Fee Management Custom Styles */

    /* File Drop Zone Styling */
    .file-drop-zone {
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .file-drop-zone:hover {
            border-color: #007bff !important;
            background-color: #f8f9fa;
        }

        .file-drop-zone.dragover {
            border-color: #28a745 !important;
            background-color: #d4edda;
        }

    /* Status Badge Enhancements */
    .badge {
        font-size: 0.85em;
        padding: 0.35em 0.65em;
    }

    /* Progress Bar Customizations */
    .progress-sm {
        height: 0.5rem;
    }

    /* Card Hover Effects */
    .card {
        transition: box-shadow 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.12);
        }

    /* Summary Cards */
    .summary-card {
        border-left: 4px solid #007bff;
    }

        .summary-card.success {
            border-left-color: #28a745;
        }

        .summary-card.warning {
            border-left-color: #ffc107;
        }

        .summary-card.danger {
            border-left-color: #dc3545;
        }

    /* Table Row Hover Effects */
    .table tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.05);
    }

    /* Action Button Groups */
    .btn-group-sm > .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }

    /* Loading States */
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    /* Checkbox Styling */
    .form-check-input:checked {
        background-color: #007bff;
        border-color: #007bff;
    }

    /* Balance Color Classes */
    .text-balance-low {
        color: #dc3545 !important;
        font-weight: 600;
    }

    .text-balance-medium {
        color: #ffc107 !important;
        font-weight: 600;
    }

    .text-balance-high {
        color: #28a745 !important;
        font-weight: 600;
    }

    /* File Icon Styling */
    .file-icon {
        width: 24px;
        height: 24px;
        margin-right: 8px;
    }

    /* Breadcrumb Enhancements */
    .breadcrumb {
        background-color: transparent;
        padding: 0;
        margin-bottom: 1rem;
    }

    .breadcrumb-item + .breadcrumb-item::before {
        content: ">";
        color: #6c757d;
    }

    /* Modal Enhancements */
    .modal-header {
        border-bottom: 1px solid #dee2e6;
        padding: 1.5rem;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .modal-footer {
        border-top: 1px solid #dee2e6;
        padding: 1.5rem;
    }

    /* Alert Customizations */
    .alert {
        border: none;
        border-radius: 0.375rem;
    }

    .alert-success {
        background-color: #d1f2eb;
        color: #0f5132;
    }

    .alert-warning {
        background-color: #fff3cd;
        color: #664d03;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }

    .alert-info {
        background-color: #cff4fc;
        color: #055160;
    }

    /* Responsive Table Wrapper */
    .table-responsive {
        border-radius: 0.375rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
    }

    /* Custom Spinner */
    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
    }

    /* Form Control Focus */
    .form-control:focus {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    /* Pagination Styling */
    .pagination {
        margin-bottom: 0;
    }

    .page-link {
        color: #007bff;
        border-color: #dee2e6;
    }

        .page-link:hover {
            background-color: #e9ecef;
            border-color: #dee2e6;
        }

    .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
    }

    /* Search Input Styling */
    .search-input {
        border-radius: 2rem;
        padding-left: 2.375rem;
    }

    .search-input-icon {
        position: absolute;
        left: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
    }

    /* Status Indicators */
    .status-indicator {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 0.5rem;
    }

        .status-indicator.success {
            background-color: #28a745;
        }

        .status-indicator.warning {
            background-color: #ffc107;
        }

        .status-indicator.danger {
            background-color: #dc3545;
        }

        .status-indicator.info {
            background-color: #17a2b8;
        }

    /* Utility Classes */
    .text-truncate-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .cursor-pointer {
        cursor: pointer;
    }

    .content-header {
        background-color: #ffffff;
        border-bottom: 1px solid #dee2e6;
        padding: 0;
        margin-bottom: 1.5rem;
    }

    .breadcrumb-container {
        padding: 12px 24px 8px;
        background-color: #ffffff;
       /*  border-bottom: 1px solid #e9ecef; */
    }

    .breadcrumb-nav {
        font-size: 13px;
        color: #6c757d;
        margin: 0;
        padding: 0;
        display: flex;
        align-items: center;
    }

    .breadcrumb-link {
        color: #007bff;
        text-decoration: none;
        transition: color 0.2s ease;
    }

    .breadcrumb-link:hover {
        color: #0056b3;
        text-decoration: none;
    }

    .breadcrumb-separator {
        margin: 0 8px;
        color: #adb5bd;
        font-size: 12px;
    }

    .breadcrumb-current {
        color: #495057;
        font-weight: 500;
    }

    .page-header {
        padding: 16px 24px 20px;
        background-color: #ffffff;
    }

    .page-title {
        font-size: 24px;
        font-weight: 600;
        color: #343a40;
        margin: 0;
        line-height: 1.2;
    }

     .input-group-text span.text-muted {
    display: none !important;
}

    
</style>

  @if(loading)
    {
     <div class="content-header">
    <div class="breadcrumb-container">
        <nav class="breadcrumb-nav">
             <SkeletonItem ColumnSize="ColumnSize.Is12" Class="mb-2" />
        </nav>
    </div>
    <div class="page-header">
          <SkeletonItem ColumnSize="ColumnSize.Is12" Class="mb-2" />
    </div>
</div>
    <Card>
        <CardBody>
            <Row>
                <Column ColumnSize="ColumnSize.Is10">
                    <SkeletonItem ColumnSize="ColumnSize.Is10" Class="mb-2" />
                </Column>
                <Column ColumnSize="ColumnSize.Is2">
                     <SkeletonItem ColumnSize="ColumnSize.Is4" Class="mb-2" />
                </Column>
            </Row>
            
           

        </CardBody>

    </Card>
    <Card>
        <CardBody>
            <Skeleton Animation="SkeletonAnimation.Pulse">
        <!-- For example, 5 horizontal bars to represent the table rows -->
      <SkeletonTable Rows="10" Columns="5" />
    </Skeleton>
        </CardBody>
    </Card>
    }
    <div style="@($"display: {(loading ? "none" : "block")};" )">
<PikachuPageHeader Breadcrumbs="@(new() { @L["LogisticsManagement"], @L["FeeManagement"] })"
    Title="@L["LogisticsFeeManagement"]" />
<Card>
    <CardBody>
        <Row>
            <Column ColumnSize="ColumnSize.Is8">
                <TextEdit 
                    @bind-Text="Filter" 
                    Placeholder="@L["SearchTenantNameOrWalletId"]" 
                    @onkeypress="OnSearchKeyPress">
                    <Feedback>
                        <ValidationNone />
                    </Feedback>
                </TextEdit>
            </Column>
            <Column ColumnSize="ColumnSize.Is2">
           <Select TValue="string?" @bind-SelectedValue="StatusFilter">
    <SelectItem TValue="string?" Value="@null">@L["AllTenants"]</SelectItem>
    <SelectItem TValue="string?" Value="@( "failed" )">@L["FailedPaymentsOnly"]</SelectItem>
    <SelectItem TValue="string?" Value="@( "lowbalance" )">@L["LowBalance"]</SelectItem>
</Select>
            </Column>
            <Column ColumnSize="ColumnSize.Is2">
                <Button Color="Color.Primary" @onclick="OpenImportModal" Block>
                    <Icon Name="IconName.FileUpload" />
                    @L["ImportLogisticsFees"]
                </Button>
            </Column>
        </Row>
    </CardBody>
</Card>

<Card Margin="Margin.Is3.FromTop">
    <CardBody>
        <DataGrid TItem="TenantLogisticsFeeDto"
                  Data="TenantList"
                  ReadData="OnDataGridReadData"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize"
                  Responsive="true">
            <DataGridColumns>
                <DataGridColumn TItem="TenantLogisticsFeeDto" 
                               Field="@nameof(TenantLogisticsFeeDto.TenantName)" 
                               Caption="@L["TenantName"]">
                    <DisplayTemplate>
                        <div class="d-flex align-items-center">
                            @if (context.HasFailedRecords)
                            {
                                <Icon Name="IconName.ExclamationTriangle" 
                                      TextColor="TextColor.Warning" 
                                      Margin="Margin.Is1.FromEnd" />
                            }
                            @context.TenantName
                        </div>
                    </DisplayTemplate>
                </DataGridColumn>
                
                <DataGridColumn TItem="TenantLogisticsFeeDto" 
                               Field="@nameof(TenantLogisticsFeeDto.WalletId)" 
                               Caption="@L["WalletId"]" />
                
                <DataGridColumn TItem="TenantLogisticsFeeDto" 
                               Field="@nameof(TenantLogisticsFeeDto.WalletBalance)" 
                               Caption="@L["WalletBalance"]">
                    <DisplayTemplate>
                        <span class="@GetBalanceColorClass(context.WalletBalance)">
                            $@context.WalletBalance.ToString("N2")
                        </span>
                    </DisplayTemplate>
                </DataGridColumn>
                
                <DataGridColumn TItem="TenantLogisticsFeeDto" 
                               Field="@nameof(TenantLogisticsFeeDto.RecentStatus)" 
                               Caption="@L["RecentStatus"]">
                    <DisplayTemplate>
                        <Badge Color="@GetStatusColor(context.RecentStatus)">
                            @L[GetStatusText(context.RecentStatus)]
                        </Badge>
                    </DisplayTemplate>
                </DataGridColumn>
                
                <DataGridColumn TItem="TenantLogisticsFeeDto" 
                               Field="@nameof(TenantLogisticsFeeDto.LastUpdated)" 
                               Caption="@L["LastUpdated"]">
                    <DisplayTemplate>
                        @context.LastUpdated.ToString("yyyy-MM-dd HH:mm")
                    </DisplayTemplate>
                </DataGridColumn>
                
                <DataGridColumn TItem="TenantLogisticsFeeDto" 
                               Caption="@L["Actions"]" 
                               Sortable="false">
                    <DisplayTemplate>
                        <Button Color="Color.Info" 
                                Size="Size.Small" 
                                @onclick="() => ViewTenantDetails(context.TenantId)">
                            @L["ViewDetails"]
                        </Button>
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>
</div>

<!-- Import Modal -->
<Modal @ref="ImportModal" Size="ModalSize.Large">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>@L["ImportLogisticsFees"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="ImportValidations" Mode="ValidationMode.Manual">
                <Row>
                    <Column>
                        <Field>
                            <FieldLabel>@L["SelectFileSource"] *</FieldLabel>
                            <RadioGroup TValue="LogisticsFileType" @bind-CheckedValue="SelectedFileType" Name="fileType">
                                <Radio TValue="LogisticsFileType" Value="LogisticsFileType.ECPay">@L["ECPayFileUpload"]</Radio>
                                <Radio TValue="LogisticsFileType" Value="LogisticsFileType.TCAT">@L["TCatFileUpload"]</Radio>
                            </RadioGroup>
                        </Field>
                    </Column>
                </Row>
                
                <Row Margin="Margin.Is3.FromTop">
                    <Column>
                        <Field>
                            <Validation Validator="ValidateFile">
                                <FileEdit @ref="FileEditRef" 
                                         Filter=".csv,.xlsx"
                                         Changed="OnFileChanged"
                                         Written="OnFileWritten"
                                         Progressed="OnFileProgressed">
                                    <ChildContent>
                                        <div class="file-drop-zone text-center p-5" style="border: 2px dashed #dee2e6; border-radius: 0.375rem;">
                                            <Icon Name="IconName.CloudUploadAlt" Size="IconSize.x2" TextColor="TextColor.Muted" />
                                            <div class="mt-2">
                                                <strong>@L["DragDropFileHere"]</strong>
                                            </div>
                                            <div class="text-muted">@L["OrClickToBrowse"]</div>
                                            <div class="text-muted small mt-2" style="min-width: 270px !important;">
                                                @L["SupportedFormats"]: CSV, XLSX<br/>
                                                @L["RequiredColumns"]: @L["OrderNumber"], @L["LogisticFee"]
                                            </div>
                                        </div>
                                    </ChildContent>
                                </FileEdit>
                                <ValidationFeedback />
                            </Validation>
                        </Field>
                        
                        @if (UploadProgress > 0)
                        {
                            <Progress Value="UploadProgress" Animated Striped Margin="Margin.Is2.FromTop" />
                        }
                        
                        @if (!string.IsNullOrEmpty(SelectedFileName))
                        {
                            <Alert Color="Color.Info" Margin="Margin.Is2.FromTop">
                                <Icon Name="IconName.File" Margin="Margin.Is1.FromEnd" />
                                @SelectedFileName
                            </Alert>
                        }
                    </Column>
                </Row>
                
                <Row Margin="Margin.Is3.FromTop">
                    <Column>
                        <Check TValue="bool" @bind-Checked="AutoDeduct">@L["AutoDeductFromTenantWallets"]</Check>
                        <Span Margin="Margin.Is2.FromTop"></Span>
                        <Check TValue="bool" @bind-Checked="SendNotifications">@L["SendEmailNotifications"]</Check>
                    </Column>
                </Row>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="CloseImportModal">@L["Cancel"]</Button>
            <Button Color="Color.Primary" @onclick="ProcessUpload" Loading="IsProcessing" Disabled="@(SelectedFile == null)">
                @L["UploadAndProcess"]
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

