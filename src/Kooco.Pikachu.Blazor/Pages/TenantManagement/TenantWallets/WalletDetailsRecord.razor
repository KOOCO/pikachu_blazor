@using Blazorise;
@using Blazorise.DataGrid;
@using Kooco.Pikachu.Tenants.Requests;
@using Kooco.Pikachu.Tenants;
@using Microsoft.Extensions.Localization;
@using System.IO
@using Volo.Abp.Application.Dtos;
@using System.Text.RegularExpressions;
@inject ITenantWalletAppService WalletService
@inherits FormComponentBase
@inject ExcelDownloadHelper ExcelDownloadHelper

<Div Class="d-flex align-items-end justify-content-end gap-1">
    <PikachuButton Class="pk-btn-sm pk-btn-primary"
                   Clicked="() => ExportSelected()"
                   Disabled="SelectedTransactions == null || SelectedTransactions.Count == 0"
                   IconClass="fas fa-file-download">
        @L["Export"]
    </PikachuButton>
    <PikachuButton Class="pk-btn-sm pk-btn-primary"
                   Clicked="() => ExportAll()"
                   IconClass="fas fa-file-download">
        @L["ExportAll"]
    </PikachuButton>
</Div>

<DataGrid TItem="TenantWalletTransactionDto"
          Data="@Transactions?.Items"
          TotalItems="@TotalCount"
          ShowPager="true"
          PageSize="@PageSize"
          CurrentPage="@CurrentPage"
          ReadData="@OnReadData"
          @bind-SelectedRows="@SelectedTransactions"
          SelectionMode="DataGridSelectionMode.Multiple"
          Responsive="true">
          <DataGridColumns>
              <DataGridMultiSelectColumn TItem="TenantWalletTransactionDto" Width="30px"></DataGridMultiSelectColumn>
   
    <DataGridColumn Field="@nameof(TenantWalletTransactionDto.Timestamp)" Caption="@L["Timestamp"]">
        <DisplayTemplate>@context.Timestamp.ToString("M/d/yyyy h:mm tt")</DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn Field="@nameof(TenantWalletTransactionDto.TransactionNo)" Caption="@L["TransactionNo"]" />

    <DataGridColumn Field="@nameof(TenantWalletTransactionDto.TransactionType)" Caption="@L["TransactionType"]">
        <DisplayTemplate>
            @L["WalletTransactionType:" + context.TransactionType.ToString()]
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn Field="@nameof(TenantWalletTransactionDto.TransactionStatus)" Caption="@L["TransactionStatus"]">
        <DisplayTemplate>
            @if (context.TransactionStatus == WalletDeductionStatus.Completed)
            {
                <Badge Color="Color.Success">@L["TransactionStatus."+context.TransactionStatus.ToString()]</Badge>
            }
            else if (context.TransactionStatus == WalletDeductionStatus.Pending)
            {
                    <Badge Color="Color.Warning">@L["TransactionStatus." + context.TransactionStatus.ToString()]</Badge>
            }
            else
            {
                    <Badge Color="Color.Danger">@L["TransactionStatus." + context.TransactionStatus.ToString()]</Badge>
            }
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn Field="@nameof(TenantWalletTransactionDto.Amount)" Caption="@L["Amount"]">
        <DisplayTemplate>
            @(context.Amount > 0 ? $"+{context.Amount:N0}" : $"{context.Amount:N0}")
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn Field="@nameof(TenantWalletTransactionDto.Balance)" Caption="@L["Balance"]">
        <DisplayTemplate>@context.Balance.ToString("N0")</DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn Field="@nameof(TenantWalletTransactionDto.Note)" Caption="@L["Note"]">
        <DisplayTemplate>
            @SplitNotesWithRegex(context.Note)
        </DisplayTemplate>
    </DataGridColumn>
    </DataGridColumns>
    <NextPageButtonTemplate>@L["NextPage"]</NextPageButtonTemplate>
    <PreviousPageButtonTemplate>@L["PrevPage"]</PreviousPageButtonTemplate>
    <LastPageButtonTemplate>@L["LastPage"]</LastPageButtonTemplate>
    <FirstPageButtonTemplate>@L["FirstPage"]</FirstPageButtonTemplate>
    <TotalItemsTemplate>
        @(string.Format(
            L["Range"],
            ((CurrentPage - 1) * PageSize) + 1,
            (CurrentPage * PageSize > TotalCount ? TotalCount : CurrentPage * PageSize),
            TotalCount
            ))
    </TotalItemsTemplate>
</DataGrid>

@code {
    [Parameter] public Guid WalletId { get; set; }

    private PagedResultDto<TenantWalletTransactionDto> Transactions;
    private List<TenantWalletTransactionDto> SelectedTransactions = new();

    private int CurrentPage = 1;
    private int PageSize = 10;
    private int TotalCount = 0;

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task OnReadData(DataGridReadDataEventArgs<TenantWalletTransactionDto> e)
    {
        CurrentPage = e.Page;
        PageSize = e.PageSize;
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            var skipCount = (CurrentPage - 1) * PageSize;
            Transactions = await WalletService.GetWalletTransactionsAsync(WalletId, skipCount, PageSize);
            TotalCount = (int)Transactions.TotalCount;

            // Clear selection when data changes
            SelectedTransactions.Clear();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle error appropriately
            Console.WriteLine($"Error loading wallet transactions: {ex.Message}");
        }
    }
    private string SplitNotesWithRegex(string note)

    {
        var pattern = @"^(Logistics fee deduction for order)\s+(.+)$";
        if (string.IsNullOrEmpty(note))
            return null;


        var regex = new Regex(pattern);
        var match = regex.Match(note);

        if (match.Success)
        {
            return L["NoteDescription", match.Groups[2].Value];
        }

        // If it doesn't match the pattern, return the original note as description
        return note;
    }
    private async Task ExportSelected()
    {
        if (SelectedTransactions == null || SelectedTransactions.Count == 0)
            return;

        try
        {
            var selectedIds = SelectedTransactions.Select(x => x.Id).ToList();
            var stream = await WalletService.ExportWalletTransactionsAsync(WalletId, selectedIds);
            await ExcelDownloadHelper.DownloadExcelAsync(stream);
            SelectedTransactions = new List<TenantWalletTransactionDto>();
        }
        catch (Exception ex)
        {
            // Handle error appropriately
            Console.WriteLine($"Error exporting selected transactions: {ex.Message}");
        }
    }

    private async Task ExportAll()
    {
        try
        {
            var stream = await WalletService.ExportWalletTransactionsAsync(WalletId);
            await ExcelDownloadHelper.DownloadExcelAsync(stream);
        }
        catch (Exception ex)
        {
            // Handle error appropriately
            Console.WriteLine($"Error exporting all transactions: {ex.Message}");
        }
    }
}