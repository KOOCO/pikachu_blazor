@page "/enterprice-purchase"
@using Kooco.Pikachu.ElectronicInvoiceSettings
@using Kooco.Pikachu.EnumValues;
@using Kooco.Pikachu.Localization;
@using Kooco.Pikachu.OrderDeliveries
@using Kooco.Pikachu.OrderItems;
@using Kooco.Pikachu.GroupBuys;
@using Kooco.Pikachu.Orders;
@using Microsoft.Extensions.Localization;
@using Blazorise;
@using Volo.Abp.AspNetCore.Components.Messages;
@using Blazorise.LoadingIndicator;
@using Kooco.Pikachu.Items.Dtos;
@inject IStringLocalizer<PikachuResource> L;

@inject NavigationManager NavigationManager;
@inject IUiMessageService _uiMessageService;
@inject IElectronicInvoiceAppService _electronicInvoiceAppService;
@inject IOrderAppService _orderAppService;
@inject IOrderDeliveryAppService _OrderDeliveryAppService;
@inject IGroupBuyAppService _groupBuyAppService;
@using Microsoft.JSInterop;
@inject IJSRuntime JSRuntime;
<LoadingIndicator @ref="loading" FullScreen FadeIn>
    <div class="row">
        <div class="col-3">
            <h3>@L["EnterpricePurchase"]</h3>
        </div>
        <br />
        <div class="col-9 text-lg-end">
            <div class="custom-check-group me-1">
                <input type="checkbox" class="form-check-input" checked="@IsAllSelected" @onchange="HandleSelectAllChange"></input>
                <Label Class="form-label">@L["SelectAll"]</Label>
            </div>

            @if (SelectedTabName is PikachuResource.ToBeShipped)
            {
                @if ((Orders.Where(x => x.IsSelected).Count() != 1) || (Orders.Where(x => x.InvoiceNumber != null && x.IsSelected).Any()))
                {
                    <Button Type="@ButtonType.Button" disabled Class="ms-1 btn btn-sm btn-primary">
                        <i class="fa fa-print"></i>
                        @L["Shipped"]
                    </Button>
                }
                else
                {
                    <Button Type="@ButtonType.Button" Class="ms-1 btn btn-sm btn-primary">
                        <i class="fa fa-print"></i>
                        @L["Shipped"]
                    </Button>
                }
            }

            @if (SelectedTabName is PikachuResource.ToBeShipped)
            {
                @if ((Orders.Where(x => x.IsSelected).Count() != 1) || (Orders.Where(x => x.InvoiceNumber != null && x.IsSelected).Any()))
                {
                    <Button Type="@ButtonType.Button" disabled Class="ms-1 btn btn-sm btn-primary">
                        <i class="fa fa-print"></i>
                        @L["Print Shipped Label"]
                    </Button>
                }
                else
                {
                    <Button Type="@ButtonType.Button" Class="ms-1 btn btn-sm btn-primary">
                        <i class="fa fa-print"></i>
                        @L["Print Shipped Label"]
                    </Button>
                }
            }

            @if (SelectedTabName is PikachuResource.PrepareShipment)
            {
                @if ((Orders.Where(x => x.IsSelected).Count() != 1) || (Orders.Where(x => x.InvoiceNumber != null && x.IsSelected).Any()))
                {
                    <Button Type="@ButtonType.Button" disabled Class="ms-1 btn btn-sm btn-primary">
                        <i class="fa fa-print"></i>
                        @L["Generate Delivery Number"]
                    </Button>
                }
                else
                {
                    <Button Type="@ButtonType.Button" Class="ms-1 btn btn-sm btn-primary">
                        <i class="fa fa-print"></i>
                        @L["Generate Delivery Number"]
                    </Button>
                }
            }

            @if (SelectedTabName is PikachuResource.Shipped)
            {
                @if ((Orders.Where(x => x.IsSelected).Count() != 1) || (Orders.Where(x => x.InvoiceNumber != null && x.IsSelected).Any()))
                {
                    <Button Type="@ButtonType.Button" disabled Class="ms-1 btn btn-sm btn-primary">
                        <i class="fa fa-print"></i>
                        @L["Delivered"]
                    </Button>
                }
                else
                {
                    <Button Type="@ButtonType.Button" Class="ms-1 btn btn-sm btn-primary">
                        <i class="fa fa-print"></i>
                        @L["Delivered"]
                    </Button>
                }
            }

            @if (SelectedTabName is PikachuResource.Delivered)
            {
                @if ((Orders.Where(x => x.IsSelected).Count() != 1) || (Orders.Where(x => x.InvoiceNumber != null && x.IsSelected).Any()))
                {
                    <Button Type="@ButtonType.Button" disabled Class="ms-1 btn btn-sm btn-primary">
                        <i class="fa fa-print"></i>
                        @L["Picked Up"]
                    </Button>
                }
                else
                {
                    <Button Type="@ButtonType.Button" Class="ms-1 btn btn-sm btn-primary">
                        <i class="fa fa-print"></i>
                        @L["Picked Up"]
                    </Button>
                }
            }

            @if (SelectedTabName is "All" ||
            SelectedTabName is PikachuResource.PrepareShipment ||
            SelectedTabName is PikachuResource.ToBeShipped ||
            SelectedTabName is PikachuResource.Shipped ||
            SelectedTabName is PikachuResource.Delivered ||
            SelectedTabName is PikachuResource.Completed)
            {
                @if ((Orders.Where(x => x.IsSelected).Count() != 1) || (Orders.Where(x => x.InvoiceNumber != null && x.IsSelected).Any()))
                {
                    <Button Type="@ButtonType.Button" disabled Class="ms-1 btn btn-sm btn-primary">
                        <i class="fa fa-print"></i>
                        @L["IssueInvoice"]
                    </Button>
                }
                else
                {
                    <Button Type="@ButtonType.Button" @onclick="IssueInvoice" Class="ms-1 btn btn-sm btn-primary">
                        <i class="fa fa-print"></i>
                        @L["IssueInvoice"]
                    </Button>
                }
            }

            @if (SelectedTabName is "All" || SelectedTabName is PikachuResource.PrepareShipment)
            {
                @if (ShowCombineButton())
                {
                    <Button Type="@ButtonType.Button" Clicked="MergeOrders" Class="btn btn-sm btn-secondary">@L["CombineOrders"]</Button>
                }
                else
                {

                    <Button Disabled Type="@ButtonType.Button" Class="btn btn-sm btn-secondary">@L["CombineOrders"]</Button>
                }
            }

            @if (SelectedTabName is "All" || SelectedTabName is PikachuResource.PrepareShipment)
            {
                @if (Orders.Where(x => x.IsSelected).Count() < 1)
                {
                    <Button Type="@ButtonType.Button" disabled Class="ms-1 btn btn-sm btn-primary">
                        <i class="fa fa-print"></i>
                        @L["Print"]
                    </Button>
                }
                else
                {
                    <Button Type="@ButtonType.Button" @onclick="NavigateToOrderPrint" Class="ms-1 btn btn-sm btn-primary">
                        <i class="fa fa-print"></i>
                        @L["Print"]
                    </Button>
                }
            }

            @if (SelectedTabName is PikachuResource.WaitingForPayment)
            {
                @if (Orders.Where(x => x.IsSelected).Count() != 1)
                {
                    <Button Type="@ButtonType.Button" disabled Class="ms-1 btn btn-sm btn-primary">
                        <i class="fa fa-print"></i>
                        @L["Close Order"]
                    </Button>
                }
                else
                {
                    <Button Type="@ButtonType.Button" Class="ms-1 btn btn-sm btn-primary">
                        <i class="fa fa-print"></i>
                        @L["Close Order"]
                    </Button>
                }
            }

            <Button Type="ButtonType.Button" Class="btn btn-sm btn-outline-dark" Clicked="DownloadExcel"><i class="fa fa-arrow-down"></i></Button>
        </div>

        @if (SelectedTabName is PikachuResource.ToBeShipped)
        {
            <Div Class="col-12 text-lg-end">
                <h5>Normal: @NormalCount piece(s) Freeze: @FreezeCount piece(s) Frozen: @FrozenCount piece(s)</h5>
            </Div>
        }
    </div>
    <Card>
        <CardBody>
            <Row>
                <Column ColumnSize="ColumnSize.Is10">
                    <Addons>
                        <Addon AddonType="AddonType.Body">
                            <TextEdit @bind-Text="@Filter" Style="border-radius: 0.5rem 0 0 0.5rem;" />
                        </Addon>
                        <Addon AddonType="AddonType.End">
                            <Button Type="ButtonType.Button" Color="Color.Primary" Clicked="(e) => OnSearch()"
                                    Style="border-radius: 0 0.5rem 0.5rem 0;">
                                <Icon Name="IconName.Search"></Icon>
                            </Button>
                        </Addon>
                    </Addons>
                </Column>
                <Column ColumnSize="ColumnSize.Is2">
                    <Button Class="btn-outline-primary w-100" Clicked="(() => FiltersVisible = !FiltersVisible)">
                        @L["Filters"]
                        <i class="fas @(FiltersVisible ? "fa-angles-up" : "fa-angles-down") ms-1"></i>
                    </Button>
                </Column>
            </Row>
            @if (FiltersVisible)
            {
                <Row Class="mt-2">
                    <Column ColumnSize="ColumnSize.Is3">
                        <Select TValue="Guid?"
                                SelectedValue="@SelectedGroupBuy"
                                SelectedValueChanged="@(e=>OnSearch(e))">
                            <SelectItem Value="@Guid.Empty">
                                @L["SelectGroupBuy"]
                            </SelectItem>
                            @foreach (var item in GroupBuyList)
                            {
                                <SelectItem Value="@item.Id">@item.Name</SelectItem>
                            }
                        </Select>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6">
                        <Div Class="d-flex w-100 align-items-center gap-1">
                            <DateEdit Date="StartDate" DateChanged="(e) => OnDateChange(e, EndDate)" TValue="DateTime?" />
                            <Span>~</Span>
                            <DateEdit Date="EndDate" DateChanged="(e) => OnDateChange(StartDate, e)" TValue="DateTime?" />
                        </Div>
                    </Column>
                </Row>
            }
        </CardBody>
    </Card>
    <Row>
        <Column ColumnSize="SelectedOrder != null ? ColumnSize.Is8 : ColumnSize.Is12">
            <Card>
                <CardBody>
                    <DataGrid TItem="OrderDto"
                              Data="@Orders"
                              @bind-SelectedRow="@SelectedOrder"
                              ReadData="@(async (e) => await OnTabLoadDataGridReadAsync(e, "EnterpricePurchase"))"
                              TotalItems="TotalCount"
                              Responsive
                              ShowPager="true"
                              PageSize="PageSize"
                              RowClicked="ToggleRow"
                              SortChanged="OnSortChange"
                              Hoverable>
                        <DataGridColumns>
                            <DataGridCommandColumn />
                            <DataGridColumn Caption="@L["Select"]" Width="30px">
                                <DisplayTemplate>
                                    <InputCheckbox class="form-check-input" @bind-Value="@context.IsSelected"></InputCheckbox>
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn Field="@nameof(OrderDto.OrderNo)" Caption="@L["OrderNo"]">
                                <DisplayTemplate>
                                    <Button Class="btn-link hyperlink" Clicked="() => NavigateToOrderDetails(context)">@context.OrderNo</Button>
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn Field="@nameof(OrderDto.CreationTime)" Caption="@L["OrderDate"]" />
                            <DataGridColumn Field="@nameof(OrderDto.CustomerName)" Caption="@L["CustomerName"]" />
                            <DataGridColumn Field="@nameof(OrderDto.CustomerEmail)" Caption="@L["Email"]" />
                            <DataGridColumn Field="@nameof(OrderDto.OrderStatus)" Caption="@L["OrderStatus"]">
                                <DisplayTemplate>
                                    @L[context.OrderStatus.ToString()]
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn Field="@nameof(OrderDto.ShippingStatus)" Caption="@L["ShippingStatus"]">
                                <DisplayTemplate>
                                    @L[context.ShippingStatus.ToString()]
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn Field="@nameof(OrderDto.PaymentMethod)" Caption="@L["PaymentMethod"]">
                                <DisplayTemplate>
                                    @L[context.PaymentMethod.ToString()]
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn TextAlignment="TextAlignment.Center" Field="@nameof(OrderDto.TotalAmount)" Caption="@L["CheckoutAmount"]">
                                <DisplayTemplate>
                                    $ @context.TotalAmount.ToString("N2")
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn TextAlignment="TextAlignment.Center" Field="@nameof(OrderDto.OrderType)">
                                <DisplayTemplate>
                                    @if (context.OrderType == OrderType.MargeToNew || context.OrderType == OrderType.SplitToNew)
                                    {
                                        @L["Orignal"]
                                    }
                                    @if (context.OrderType == OrderType.NewSplit)
                                    {
                                        @L["Split"]
                                    }
                                    @if (context.OrderType == OrderType.NewMarge)
                                    {
                                        @L["Combined"]
                                    }
                                </DisplayTemplate>
                            </DataGridColumn>
                        </DataGridColumns>
                        <FirstPageButtonTemplate>@L[PikachuResource.FirstPage]</FirstPageButtonTemplate>
                        <PreviousPageButtonTemplate>@L[PikachuResource.PrevPage]</PreviousPageButtonTemplate>
                        <NextPageButtonTemplate>@L[PikachuResource.NextPage]</NextPageButtonTemplate>
                        <LastPageButtonTemplate>@L[PikachuResource.LastPage]</LastPageButtonTemplate>
                    </DataGrid>
                </CardBody>
            </Card>
        </Column>
        @if (SelectedOrder != null)
        {
            <Column ColumnSize="ColumnSize.Is4">
                <Card>
                    <CardHeader style="display: flex;justify-content: space-between;">
                        <h5>Order Details - @SelectedOrder?.OrderNo</h5>
                        <CloseButton Clicked="() => SelectedOrder = null" />
                    </CardHeader>

                    <CardBody>
                        @if (SelectedOrder != null)
                        {
                            var orderItems = SelectedOrder.OrderItems;
                            <div class="mx-2 px-3 py-2 border">
                                <Table Responsive>
                                    <TableBody>
                                        <TableRow>

                                            <TableRowHeader>@L["RecipientInformation"]</TableRowHeader>

                                            @if (SelectedOrder.DeliveryMethod is not EnumValues.DeliveryMethod.DeliveredByStore)
                                            {
                                                <TableRowCell>@SelectedOrder.RecipientName / @SelectedOrder.RecipientPhone</TableRowCell>
                                            }

                                            else
                                            {
                                                <TableRowCell>
                                                    <span>@L["Normal"] :- @SelectedOrder.RecipientNameDbsNormal / @SelectedOrder.RecipientPhoneDbsNormal</span>
                                                    <hr />
                                                    <span>@L["Freeze"] :- @SelectedOrder.RecipientNameDbsFreeze / @SelectedOrder.RecipientPhoneDbsFreeze</span>
                                                    <hr />
                                                    <span>@L["Frozen"] :- @SelectedOrder.RecipientNameDbsFrozen / @SelectedOrder.RecipientPhoneDbsFrozen</span>
                                                </TableRowCell>
                                            }
                                        </TableRow>
                                        <TableRow>
                                            <TableRowHeader>@L["ShippingMethod"]</TableRowHeader>
                                            <TableRowCell>@L[SelectedOrder.DeliveryMethod.ToString()]</TableRowCell>
                                        </TableRow>
                                        <TableRow>
                                            <TableRowHeader>@L["PostalCode"]</TableRowHeader>

                                            <TableRowCell>@SelectedOrder.PostalCode</TableRowCell>
                                        </TableRow>

                                        <TableRow>
                                            <TableRowHeader>@L["City"]</TableRowHeader>

                                            <TableRowCell>@SelectedOrder.City</TableRowCell>
                                        </TableRow>
                                        <TableRow>
                                            <TableRowHeader>@L["Address"]</TableRowHeader>
                                            <TableRowCell class="d-none">@SelectedOrder.AddressDetails</TableRowCell>
                                            <TableRowCell>@SelectedOrder.AddressDetails</TableRowCell>
                                        </TableRow>
                                        <TableRow>
                                            <TableRowHeader>@L["Remarks"]</TableRowHeader>
                                            <TableRowCell>@SelectedOrder.Remarks</TableRowCell>
                                        </TableRow>
                                        <TableRow>
                                            <TableRowHeader>@L["MerchantRemarks"]</TableRowHeader>
                                            <TableRowCell>
                                                @foreach (var item in SelectedOrder.StoreComments.OrderByDescending(x => x.CreationTime))
                                                {
                                                    if (SelectedOrder.StoreComments.Count > 1)
                                                    {
                                                        <span> @item.Comment /</span>
                                                    }
                                                    else
                                                    {
                                                        <span> @item.Comment</span>
                                                    }
                                                }
                                            </TableRowCell>
                                        </TableRow>
                                        <TableRow>
                                            <TableRowHeader>@L["OrderItems"]</TableRowHeader>
                                            <TableRowCell Style="border-bottom: 1px solid #e7e9ec !important;">
                                                @foreach (OrderItemDto item in orderItems.OrderBy(o => o.ItemType).ToList())
                                                {
                                                    @if (item.ItemType is ItemType.Item)
                                                    {
                                                        <div mb-1>
                                                            <span>@item.Spec</span>
                                                            <span>@item.Item?.ItemName x @item.Quantity</span>
                                                        </div>
                                                    }
                                                    @if (item.ItemType is ItemType.SetItem)
                                                    {
                                                        <div mb-1>
                                                            <span>@item.Spec</span>
                                                            <span>- @item.SetItem?.SetItemName x @item.Quantity</span>
                                                        </div>

                                                        <div mb-1>
                                                            <span>@item.SetItem?.SetItemName x @item.Quantity</span>
                                                            <br />

                                                            @{
                                                                List<string> setItemNames = (item.Spec != null ? [.. item.Spec.Split(", ")] : []);
                                                            }

                                                            @foreach (string setItemName in setItemNames)
                                                            {
                                                                <span>- @setItemName</span>

                                                                <br />
                                                            }
                                                        </div>
                                                    }
                                                    @if (item.ItemType is ItemType.Freebie)
                                                    {
                                                        <div mb-1>
                                                            <span>@item.Spec</span>
                                                            <span>@item.Freebie?.ItemName x @item.Quantity</span>
                                                        </div>
                                                    }
                                                }
                                            </TableRowCell>
                                        </TableRow>
                                    </TableBody>
                                </Table>
                            </div>
                        }

                    </CardBody>
                </Card>
            </Column>
        }
    </Row>
</LoadingIndicator>