@using Kooco.Pikachu.EnumValues
@using Kooco.Pikachu.GroupBuys
@using Kooco.Pikachu.Members
@using Kooco.Pikachu.Orders
@using Kooco.Pikachu.Orders.Interfaces
@inherits PikachuComponentBase
@inject IMemberAppService MemberAppService
@inject IOrderAppService OrderAppService

<Card>
    <CardBody>
        <h4>@L["Orders"]</h4>
        <Row HorizontalGutter="10">
            <Column ColumnSize="ColumnSize.Is4">
                <PikachuCard Type="success" Title="@L["OrdersCompleted"]" Count="Completed" CountVisible="true"></PikachuCard>
            </Column>
            <Column ColumnSize="ColumnSize.Is4">
                <PikachuCard Type="warning" Title="@L["Exchange"]" Count="Exchange" CountVisible="true"></PikachuCard>
            </Column>
            <Column ColumnSize="ColumnSize.Is4">
                <PikachuCard Type="danger" Title="@L["Return"]" Count="Return" CountVisible="true"></PikachuCard>
            </Column>
        </Row>
    </CardBody>
</Card>
@if (FiltersVisible)
{
    <Card>
        <CardBody>
            <Row Gutter="(10, 10)">
                <Column ColumnSize="ColumnSize.Is12">
                    <TextEdit Class="search-bar" Placeholder="Search" @bind-Text="OrderFilters.Filter"></TextEdit>
                </Column>
                <Column ColumnSize="ColumnSize.Is12.Is2.OnFullHD">
                    <FieldLabel>@L["From"]</FieldLabel>
                    <DateEdit TValue="DateTime?" Size="Size.Small" @bind-Date="OrderFilters.StartDate"></DateEdit>
                </Column>
                <Column ColumnSize="ColumnSize.Is12.Is2.OnFullHD">
                    <FieldLabel>@L["To"]</FieldLabel>
                    <DateEdit TValue="DateTime?" Size="Size.Small" @bind-Date="OrderFilters.EndDate"></DateEdit>
                </Column>
                <Column ColumnSize="ColumnSize.Is12.Is2.OnFullHD">
                    <FieldLabel>@L["GroupBuy"]</FieldLabel>
                    <Select TValue="Guid?" Size="Size.Small" @bind-SelectedValue="OrderFilters.GroupBuyId">
                        <SelectItem Value="(Guid?)null"></SelectItem>
                        @foreach (var groupbuy in GroupBuysLookup)
                        {
                            <SelectItem Value="groupbuy.Id">@groupbuy.Name</SelectItem>
                        }
                    </Select>
                </Column>
                <Column ColumnSize="ColumnSize.Is12.Is2.OnFullHD">
                    <FieldLabel>@L["ShippingMethod"]</FieldLabel>
                    <Select TValue="DeliveryMethod?" Size="Size.Small" @bind-SelectedValue="OrderFilters.DeliveryMethod">
                        <SelectItem Value="(DeliveryMethod?)null"></SelectItem>
                        @foreach (DeliveryMethod deliveryMethod in Enum.GetValues(typeof(DeliveryMethod)))
                        {
                            <SelectItem Value="deliveryMethod">@L[deliveryMethod.ToString()]</SelectItem>
                        }
                    </Select>
                </Column>
                <Column ColumnSize="ColumnSize.Is12.Is2.OnFullHD">
                    <FieldLabel>@L["ShippingStatus"]</FieldLabel>
                    <Select TValue="ShippingStatus?" Size="Size.Small" @bind-SelectedValue="OrderFilters.ShippingStatus">
                        <SelectItem Value="(ShippingStatus?)null"></SelectItem>
                        @foreach (ShippingStatus shippingStatus in Enum.GetValues(typeof(ShippingStatus)))
                        {
                            <SelectItem Value="shippingStatus">@L[shippingStatus.ToString()]</SelectItem>
                        }
                    </Select>
                </Column>
                <Column ColumnSize="ColumnSize.Is12.Is2.OnFullHD">
                    <Div Class="d-flex align-items-end gap-1 h-100">
                        <PikachuButton Class="pk-btn-sm pk-btn-primary" Clicked="ApplyFilters">
                            <Icon Name="IconName.Filter"></Icon>
                            @L["Filter"]
                        </PikachuButton>
                        <PikachuButton Class="pk-btn-sm pk-btn-light" Clicked="ResetFilters">
                            <Icon Name="IconName.Undo"></Icon>
                            @L["Reset"]
                        </PikachuButton>
                    </Div>
                </Column>
            </Row>
        </CardBody>
    </Card>
}
<Card>
    <CardBody>
        <Div Class="text-end">
            <PikachuButton Clicked="() => FiltersVisible = !FiltersVisible">
                @if (!FiltersVisible)
                {
                    <Icon Name="IconName.ArrowDown" Class="me-1"></Icon>
                }
                else
                {
                    <Icon Name="IconName.ArrowUp" Class="me-1"></Icon>
                }
                @L["ToggleFilters"]
            </PikachuButton>
        </Div>
        <DataGrid TItem="OrderDto"
                  Data="MemberOrders"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize"
                  CurrentPage="CurrentPage"
                  Narrow
                  Responsive>
            <DataGridColumns>
                <DataGridColumn TItem="OrderDto"
                                Field="@nameof(OrderDto.OrderNo)"
                                Caption="@L["OrderNo"]">
                </DataGridColumn>
                <DataGridColumn TItem="OrderDto"
                                Field="@nameof(OrderDto.CreationTime)"
                                Caption="@L["OrderDate"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToShortDateString() @context.CreationTime.ToShortTimeString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="OrderDto"
                                Field="@nameof(OrderDto.OrderStatus)"
                                Caption="@L["OrderStatus"]">
                    <DisplayTemplate>
                        @L[context.OrderStatus.ToString()]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="OrderDto"
                                Field="@nameof(OrderDto.ShippingStatus)"
                                Caption="@L["ShippingStatus"]">
                    <DisplayTemplate>
                        @L[context.ShippingStatus.ToString()]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="OrderDto"
                                Field="@nameof(OrderDto.PaymentMethod)"
                                Caption="@L["PaymentMethod"]">
                    <DisplayTemplate>
                        @if (context.PaymentMethod.HasValue)
                        {
                            @L[context.PaymentMethod.ToString()]
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="OrderDto"
                                Field="@nameof(OrderDto.TotalAmount)"
                                Caption="@L["CheckoutAmount"]">
                    <DisplayTemplate>
                        $ @context.TotalAmount.ToString("N2")
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
            <NextPageButtonTemplate>@L["NextPage"]</NextPageButtonTemplate>
            <PreviousPageButtonTemplate>@L["PrevPage"]</PreviousPageButtonTemplate>
            <LastPageButtonTemplate>@L["LastPage"]</LastPageButtonTemplate>
            <FirstPageButtonTemplate>@L["FirstPage"]</FirstPageButtonTemplate>
            <TotalItemsTemplate>
                @(string.Format(
                    L["Range"],
                    ((CurrentPage - 1) * PageSize) + 1,
                    (CurrentPage * PageSize > TotalCount ? TotalCount : CurrentPage * PageSize),
                    TotalCount
                    ))
            </TotalItemsTemplate>
        </DataGrid>
    </CardBody>
</Card>
