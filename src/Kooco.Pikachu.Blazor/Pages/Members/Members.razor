@page "/Members"
@attribute [Authorize(PikachuPermissions.Members.Default)]
@using Kooco.Pikachu.Blazor.Helpers
@using Kooco.Pikachu.Localization
@using Kooco.Pikachu.Members
@using Kooco.Pikachu.Permissions
@using Kooco.Pikachu.TierManagement
@using Microsoft.Extensions.Localization
@inherits PikachuComponentBase
@inject IMemberAppService MemberAppService
@inject IVipTierSettingAppService VipTierSettingAppService
@inject NavigationManager NavigationManager
@inject ExcelDownloadHelper ExcelDownloadHelper

<Div>
    <Row>
        <Column ColumnSize="ColumnSize.Is6">
            <h3 class="text-dark">@L["Members"]</h3>
        </Column>
        <Column ColumnSize="ColumnSize.Is6" TextAlignment="TextAlignment.End">
            <PikachuButton Class="pk-btn-sm pk-btn-primary" Clicked="ExportAsync"
                           Disabled="SelectedMembers == null || SelectedMembers.Count == 0">
                <Icon Name="IconName.FileDownload"></Icon>
                @L["Export"]
            </PikachuButton>
            <PikachuButton Class="pk-btn-sm pk-btn-primary" Clicked="ExportAllAsync" Loading="IsExporting">
                <Icon Name="IconName.FileDownload" Display="IsExporting ? Display.None : Display.InlineBlock"></Icon>
                @L["ExportAll"]
            </PikachuButton>
        </Column>
    </Row>
</Div>
<Card>
    <CardBody>
        <Row>
            <Column ColumnSize="ColumnSize.Is10">
                <Div Class="input-group">
                    <TextEdit @bind-Text="Filters.Filter" Style="border-radius: 0.5rem 0 0 0.5rem;" />
                    <Button Color="Color.Primary" Clicked="ApplyFilters"
                            Style="border-radius: 0 0.5rem 0.5rem 0;">
                        <Icon Class="fas fa-search"></Icon>
                    </Button>
                </Div>
            </Column>
            <Column ColumnSize="ColumnSize.Is2">
                <Button Class="btn-outline-primary w-100" Clicked="(() => FiltersVisible = !FiltersVisible)">
                    @L["Filters"]
                    <i class="fas @(FiltersVisible ? "fa-angles-up" : "fa-angles-down") ms-1"></i>
                </Button>
            </Column>
        </Row>
        @if (FiltersVisible)
        {
            <Row Class="mt-2">
                <Column ColumnSize="ColumnSize.Is3">
                    <Label>@L["MemberType"]</Label>
                    <AntDesign.Select @bind-Value="@Filters.MemberType"
                                      AllowClear
                                      TItem="string"
                                      TItemValue="string">
                        <SelectOptions>
                            @foreach (var tagName in MemberConsts.MemberTags.Names)
                            {
                                <AntDesign.SelectOption TItemValue="string" TItem="string" Value=@tagName Label=@L[tagName] />
                            }
                        </SelectOptions>
                    </AntDesign.Select>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Label>@L["MemberTags"]</Label>
                    <AntDesign.Select Mode="AntDesign.SelectMode.Multiple"
                                      @bind-Values="@Filters.SelectedMemberTags"
                                      MaxTagCount="AntDesign.Select.ResponsiveTag.Responsive"
                                      HideSelected
                                      AllowClear
                                      TItem="string"
                                      TItemValue="string">
                        <SelectOptions>
                            @foreach (var item in MemberTagOptions)
                            {
                                <AntDesign.SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
                            }
                        </SelectOptions>
                    </AntDesign.Select>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Div Class="d-flex align-items-end gap-1 h-100">
                        <Button Class="btn-sm btn-outline-primary" Clicked="ResetFilters">
                            <Icon Name="IconName.Undo"></Icon>
                            @L["Reset"]
                        </Button>
                        <Button Class="btn-sm btn-primary" Clicked="ApplyFilters">
                            <Icon Name="IconName.Filter"></Icon>
                            @L["Filter"]
                        </Button>
                    </Div>
                </Column>
            </Row>
        }
    </CardBody>
</Card>
<Card>
    <CardBody>
        <DataGrid TItem="MemberDto"
                  Data="MembersList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize"
                  CurrentPage="CurrentPage"
                  Hoverable
                  Narrow
                  Responsive
                  @bind-SelectedRow="@SelectedMember"
                  SelectionMode="DataGridSelectionMode.Multiple"
                  @bind-SelectedRows="SelectedMembers"
                  RowSelectable="RowSelectableHandler">
            <DataGridColumns>
                <DataGridMultiSelectColumn TItem="MemberDto" Width="30px"></DataGridMultiSelectColumn>
                <DataGridCommandColumn TItem="MemberDto" />
                <DataGridColumn TItem="MemberDto"
                                Field="@nameof(MemberDto.Name)"
                                Caption="@L["Name"]">
                    <DisplayTemplate>
                        <Div Class="d-flex align-items-center gap-1">
                            <Div Class="member-image">
                                <img class="img-fluid rounded-circle" src="https://e7.pngegg.com/pngimages/799/987/png-clipart-computer-icons-avatar-icon-design-avatar-heroes-computer-wallpaper-thumbnail.png" alt="Alternate Text" />
                                @if (context.IsBlacklisted)
                                {
                                    <Span Class="blacklisted">
                                        <Icon Name="IconName.Ban"></Icon>
                                    </Span>
                                }
                                else if (context.IsNew)
                                {
                                    <Badge>@L[MemberConsts.MemberTags.New]</Badge>
                                }
                            </Div>
                            <Div>
                                <Div>
                                    <Button Class="btn-link hyperlink fs-large" Clicked="() => EditMember(context)">@context.Name</Button>
                                </Div>
                                <Span>@context.Email</Span>
                            </Div>
                        </Div>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="MemberDto"
                                Caption="@L["LoginType"]"
                                TextAlignment="TextAlignment.Center">
                    <DisplayTemplate>
                        @if (!context.LineId.IsNullOrEmpty())
                        {
                            <PikachuBadge Class="pk-badge-success">Line</PikachuBadge>
                        }
                        else if (!context.GoogleId.IsNullOrEmpty())
                        {
                            <PikachuBadge Class="pk-badge-danger">Google</PikachuBadge>
                        }
                        else if (!context.FacebookId.IsNullOrEmpty())
                        {
                            <PikachuBadge Class="pk-badge-primary">Facebook</PikachuBadge>
                        }
                        else
                        {
                            <PikachuBadge Class="pk-badge-warning">Email</PikachuBadge>
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="MemberDto"
                                Caption="@L["MemberStatus"]"
                                TextAlignment="TextAlignment.Center">
                    <DisplayTemplate>
                        @if (context.IsBlacklisted || context.IsNew)
                        {
                            <MemberTagComponent Tag="@(context.IsBlacklisted ? MemberConsts.MemberTags.Blacklisted : MemberConsts.MemberTags.New)" />
                        }
                        else if (context.IsMember)
                        {
                            <MemberTagComponent Tag="@MemberConsts.MemberTags.Existing" />
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="MemberDto"
                                Caption="@L["VipTier"]"
                                TextAlignment="TextAlignment.Center">
                    <DisplayTemplate>
                        @foreach (var tag in context.MemberTags.Where(tag => !MemberConsts.MemberTags.Names.Contains(tag)))
                        {
                            <MemberTagComponent Tag="@tag" Margin />
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="MemberDto"
                                Field="@nameof(MemberDto.TotalOrders)"
                                Caption="@L["Orders"]">
                    <DisplayTemplate>
                        @context.TotalOrders.ToString("N0")
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="MemberDto"
                                Field="@nameof(MemberDto.TotalSpent)"
                                Caption="@L["Spent"]">
                    <DisplayTemplate>
                        $ @context.TotalSpent.ToString("N2")
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>


