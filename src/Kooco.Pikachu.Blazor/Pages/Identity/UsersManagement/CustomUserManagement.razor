@attribute [Authorize(IdentityPermissions.Users.Default)]
@using Kooco.Pikachu.Localization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.DependencyInjection
@using Volo.Abp.Identity
@using Volo.Abp.Identity.Blazor.Pages.Identity
@using Volo.Abp.PermissionManagement.Blazor.Components
@using Volo.Abp.BlazoriseUI.Components.ObjectExtending
@using Volo.Abp.Identity.Localization
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
﻿@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@using Blazorise;
@using Microsoft.AspNetCore.Components;
@using Volo.Abp.AspNetCore.Components.Web.Extensibility.EntityActions;
@using Volo.Abp.AspNetCore.Components.Web.Extensibility.TableColumns;
@using Volo.Abp.AspNetCore.Components.Web.Theming.PageToolbars;
@using Volo.Abp.Authorization.Permissions;
@using Volo.Abp.ObjectExtending;
@using Volo.Abp.Users;
@inject AbpBlazorMessageLocalizerHelper<IdentityResource> LH

@inject IStringLocalizer<PikachuResource> l

@inject IUiMessageService _UiMessageService;

@attribute [ExposeServices(typeof(Volo.Abp.Identity.Blazor.Pages.Identity.UserManagement))]

@attribute [Dependency(ReplaceServices = true)]

@inherits Volo.Abp.Identity.Blazor.Pages.Identity.UserManagement;

<Card>
    <CardHeader>
        @* ************************* PAGE HEADER ************************* *@
        <PageHeader Title="@L["Users"]"
                    BreadcrumbItems="@BreadcrumbItems"
                    Toolbar="@Toolbar" />
    </CardHeader>
    <CardBody class="row">

        <Column ColumnSize="ColumnSize.Is8">
        </Column>
        <Column ColumnSize="ColumnSize.Is4" class="form-group row" style="text-align:right;">
            <label for="inputPassword" class="col-sm-4 col-form-label pt-1">  @L["Search"] </label>
            <div class="col-sm-8">
                <TextEdit class="form-control-sm" id="inputPassword" Text="@GetListInput.Filter" TextChanged="@OnSearchTextChanged" />
            </div>
        </Column>

        @* ************************* DATA GRID ************************* *@
        <AbpExtensibleDataGrid TItem="IdentityUserDto"
                               Data="Entities"
                               ReadData="OnDataGridReadAsync"
                               TotalItems="TotalCount"
                               ShowPager="true"
                               PageSize="PageSize"
                               CurrentPage="@CurrentPage"
                               Columns="@(CustomUserManagementTableColumns)">
        </AbpExtensibleDataGrid>
    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
@if (HasCreatePermission)
{
    <Modal @ref="CreateModal" Closing="@ClosingCreateModal">
        <ModalContent Centered="true">
            <Form>
                <ModalHeader>
                    <ModalTitle>@L["NewUser"]</ModalTitle>
                    <CloseButton Clicked="CloseCreateModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                        <Tabs @bind-SelectedTab="@CreateModalSelectedTab">
                            <Items>
                                <Tab Name="UserInformations">@L["UserInformations"]</Tab>
                                <Tab Name="Roles">@L["Roles"]</Tab>
                            </Items>
                            <Content>
                                <TabPanel Name="UserInformations">
                                    <Validation MessageLocalizer="@LH.Localize">
                                        <Field>
                                            <FieldLabel>@l["DisplayName:UserName"] *</FieldLabel>
                                            <TextEdit @bind-Text="NewEntity.UserName" Autofocus="true">
                                                <Feedback>
                                                    <ValidationError />
                                                </Feedback>
                                            </TextEdit>
                                        </Field>
                                    </Validation>
                                    <Validation MessageLocalizer="@LH.Localize">
                                        <Field>
                                            <FieldLabel>@l["DisplayName:name"]</FieldLabel>
                                            <TextEdit @bind-Text="NewEntity.Name">
                                                <Feedback>
                                                    <ValidationError />
                                                </Feedback>
                                            </TextEdit>
                                        </Field>
                                    </Validation>
                                    <Validation MessageLocalizer="@LH.Localize">
                                        <Field>
                                            <FieldLabel>@L["DisplayName:Password"] *</FieldLabel>
                                            <Addons>
                                                <Addon AddonType="AddonType.Body">
                                                    <TextEdit Role="@_passwordTextRole" @bind-Text="NewEntity.Password">
                                                    </TextEdit>
                                                </Addon>
                                                <Addon AddonType="AddonType.End">
                                                    <Button Color="Color.Secondary" Clicked="@(() => ChangePassword(null))">
                                                        <Icon Name="ShowPassword ? IconName.Eye : IconName.EyeSlash" />
                                                    </Button>
                                                </Addon>
                                            </Addons>
                                            <ValidationError Style="display: block" />
                                        </Field>
                                    </Validation>
                                    <Validation MessageLocalizer="@LH.Localize">
                                        <Field>
                                            <FieldLabel>@L["DisplayName:Email"] *</FieldLabel>
                                            <TextEdit @bind-Text="NewEntity.Email">
                                                <Feedback>
                                                    <ValidationError />
                                                </Feedback>
                                            </TextEdit>
                                        </Field>
                                    </Validation>
                                    <Validation MessageLocalizer="@LH.Localize">
                                        <Field>
                                            <FieldLabel>@L["DisplayName:PhoneNumber"]</FieldLabel>
                                            <TextEdit @bind-Text="NewEntity.PhoneNumber">
                                                <Feedback>
                                                    <ValidationError />
                                                </Feedback>
                                            </TextEdit>
                                        </Field>
                                    </Validation>
                                    <Field>
                                        <Check TValue="bool" @bind-Checked="@NewEntity.IsActive">@L["DisplayName:IsActive"]</Check>
                                    </Field>
                                    @if (!IsEditCurrentUser)
                                    {
                                        <Field>
                                            <Check TValue="bool" @bind-Checked="@NewEntity.LockoutEnabled">@L["DisplayName:LockoutEnabled"]</Check>
                                        </Field>
                                    }
                                    <ExtensionProperties TEntityType="IdentityUserCreateDto" TResourceType="IdentityResource" Entity="@NewEntity" LH="@LH" ModalType="ExtensionPropertyModalType.CreateModal" />
                                </TabPanel>
                                <TabPanel Name="Roles">
                                    @if (NewUserRoles != null)
                                    {
                                        @foreach (var role in NewUserRoles)
                                        {
                                            <Field>
                                                <input type="hidden" @bind-value="@role.Name" />
                                                <Check TValue="bool" @bind-Checked="@role.IsAssigned">@role.Name</Check>
                                            </Field>
                                        }
                                    }
                                </TabPanel>
                            </Content>
                        </Tabs>
                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Primary" Outline Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
                    <SubmitButton Clicked="@CreateEntityAsync" />
                </ModalFooter>
            </Form>
        </ModalContent>
    </Modal>
}

@* ************************* EDIT MODAL ************************* *@
@if (HasUpdatePermission)
{
    <Modal @ref="EditModal" Closing="@ClosingEditModal">
        <ModalContent Centered="true">
            <Form>
                <ModalHeader>
                    <ModalTitle>@l[PikachuResource.EditUser]</ModalTitle>
                    <CloseButton Clicked="CloseEditModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@EditValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
                        <input type="hidden" name="ConcurrencyStamp" @bind-value="EditingEntity.ConcurrencyStamp" />

                        <Tabs @bind-SelectedTab="@EditModalSelectedTab">
                            <Items>
                                <Tab Name="UserInformations">@L["UserInformations"]</Tab>
                                @if (EditUserRoles != null && EditUserRoles.Any())
                                {
                                    <Tab Name="Roles">@L["Roles"]</Tab>
                                }
                            </Items>
                            <Content>
                                <TabPanel Name="UserInformations">
                                    <Validation MessageLocalizer="@LH.Localize">
                                        <Field>
                                            <FieldLabel>@l["DisplayName:UserName"] *</FieldLabel>
                                            <TextEdit @bind-Text="EditingEntity.UserName" Autofocus="true">
                                                <Feedback>
                                                    <ValidationError />
                                                </Feedback>
                                            </TextEdit>
                                        </Field>
                                    </Validation>
                                    <Validation MessageLocalizer="@LH.Localize">
                                        <Field>
                                            <FieldLabel>@l["DisplayName:name"]</FieldLabel>
                                            <TextEdit @bind-Text="EditingEntity.Name">
                                                <Feedback>
                                                    <ValidationError />
                                                </Feedback>
                                            </TextEdit>
                                        </Field>
                                    </Validation>
                                    <Validation MessageLocalizer="@LH.Localize">
                                        <Field>
                                            <FieldLabel>@L["DisplayName:Password"]</FieldLabel>
                                            <Addons>
                                                <Addon AddonType="AddonType.Body">
                                                    <TextEdit Role="@_passwordTextRole" @bind-Text="EditingEntity.Password">
                                                    </TextEdit>
                                                </Addon>
                                                <Addon AddonType="AddonType.End">
                                                    <Button Color="Color.Secondary" Clicked="@(() => ChangePassword(null))">
                                                        <Icon Name="ShowPassword ? IconName.Eye : IconName.EyeSlash" />
                                                    </Button>
                                                </Addon>
                                            </Addons>
                                            <ValidationError Style="display: block" />
                                        </Field>
                                    </Validation>
                                    <Validation MessageLocalizer="@LH.Localize">
                                        <Field>
                                            <FieldLabel>@L["DisplayName:Email"] *</FieldLabel>
                                            <TextEdit @bind-Text="EditingEntity.Email">
                                                <Feedback>
                                                    <ValidationError />
                                                </Feedback>
                                            </TextEdit>
                                        </Field>
                                    </Validation>
                                    <Validation MessageLocalizer="@LH.Localize">
                                        <Field>
                                            <FieldLabel>@L["DisplayName:PhoneNumber"]</FieldLabel>
                                            <TextEdit @bind-Text="EditingEntity.PhoneNumber">
                                                <Feedback>
                                                    <ValidationError />
                                                </Feedback>
                                            </TextEdit>
                                        </Field>
                                    </Validation>
                                    <Field>
                                        <Check TValue="bool" @bind-Checked="EditingEntity.IsActive">@L["DisplayName:IsActive"]</Check>
                                    </Field>
                                    <Field>
                                        <Check TValue="bool" @bind-Checked="EditingEntity.LockoutEnabled">@L["DisplayName:LockoutEnabled"]</Check>
                                    </Field>
                                    <ExtensionProperties TEntityType="IdentityUserUpdateDto" TResourceType="IdentityResource" Entity="@EditingEntity" LH="@LH" ModalType="ExtensionPropertyModalType.EditModal" />
                                </TabPanel>
                                @if (EditUserRoles != null && EditUserRoles.Any())
                                {
                                    <TabPanel Name="Roles">
                                        @if (EditUserRoles != null)
                                        {
                                            @foreach (var role in EditUserRoles)
                                            {
                                                <Field>
                                                    <input type="hidden" @bind-value="@role.Name" />
                                                    <Check TValue="bool" @bind-Checked="@role.IsAssigned">@role.Name</Check>
                                                </Field>
                                            }
                                        }
                                    </TabPanel>
                                }
                            </Content>
                        </Tabs>
                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Primary" Outline Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
                    <SubmitButton Clicked="@UpdateEntityAsync" />
                </ModalFooter>
            </Form>
        </ModalContent>
    </Modal>
}

@if (HasManagePermissionsPermission)
{
    <PermissionManagementModal @ref="PermissionManagementModal" />
}

@code {
    #region Inject
    private List<TableColumn> CustomUserManagementTableColumns => base.TableColumns.Get<UserManagement>();

    TextRole _passwordTextRole = TextRole.Password;
    #endregion

    #region Methods
    public void ChangePassword(TextRole? textRole)
    {
        if (textRole is null)
        {
            ChangePassword(_passwordTextRole == TextRole.Password ? TextRole.Text : TextRole.Password);
            ShowPassword = !ShowPassword;
        }

        else _passwordTextRole = textRole.Value;
    }

    protected override ValueTask SetTableColumnsAsync()
    {
        CustomUserManagementTableColumns
            .AddRange(new TableColumn[]
            {
                    new TableColumn
                    {
                        Title = L["Actions"],
                        Actions = EntityActions.Get<UserManagement>(),
                    },
                    new TableColumn
                    {
                        Title = l["DisplayName:UserName"],
                        Data = nameof(IdentityUserDto.UserName),
                        Sortable = true,
                    },
                    new TableColumn
                    {
                        Title = l["DisplayName:name"],
                        Data = nameof(IdentityUserDto.Name),
                        Sortable = true,
                    },
                    new TableColumn
                    {
                        Title = L["EmailAddress"],
                        Data = nameof(IdentityUserDto.Email),
                        Sortable = true,
                    },
                    new TableColumn
                    {
                        Title = L["PhoneNumber"],
                        Data = nameof(IdentityUserDto.PhoneNumber),
                        Sortable = true,
                    }
            });

        CustomUserManagementTableColumns.AddRange(GetExtensionTableColumns(IdentityModuleExtensionConsts.ModuleName,
            IdentityModuleExtensionConsts.EntityNames.User));

        return ValueTask.CompletedTask;
    }

    protected override async Task CreateEntityAsync()
    {
        if (base.NewEntity.Name.IsNullOrEmpty()) await _UiMessageService.Error(l[PikachuResource.NameCannotBeEmpty]);

        else await base.CreateEntityAsync();
    }

    protected async override Task UpdateEntityAsync()
    {
        if (base.EditingEntity.Name.IsNullOrEmpty()) await _UiMessageService.Error(l[PikachuResource.NameCannotBeEmpty]);

        else await base.UpdateEntityAsync();
    }
    #endregion
}
