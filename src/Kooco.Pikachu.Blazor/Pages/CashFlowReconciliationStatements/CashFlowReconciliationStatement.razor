@page "/CashFlowManagement/CashFlowReconciliationStatement"
@using Blazorise;
@using Blazorise.LoadingIndicator;
@using Kooco.Pikachu.EnumValues;
@using Kooco.Pikachu.Items
@using Kooco.Pikachu.Localization;
@using Kooco.Pikachu.OrderItems;
@using Kooco.Pikachu.OrderTransactions
@using Kooco.Pikachu.Orders;
@using Kooco.Pikachu.Orders.Interfaces
@using Microsoft.Extensions.Localization;
@using Volo.Abp.AspNetCore.Components.Messages;

@inherits PikachuComponentBase
@inject IOrderTransactionAppService OrderTransactionAppService
@inject NavigationManager NavigationManager;
@inject IUiMessageService _uiMessageService;
@inject IOrderAppService _orderAppService;
@inject IOrderInvoiceAppService _orderInvoiceAppService;
@inject IItemAppService _ItemAppService;
@inject IJSRuntime JSRuntime;
@attribute [Authorize]
<div class="row">
    <div class="col-6">
        <h3>@L["CashFlowReconciliation"]</h3>
    </div>
    <div class="col-6 text-lg-end">
        @if (OrderTransactions.Where(x => x.IsSelected).Count() != 1 || OrderTransactions.Any(x => x.IsSelected && x.Order != null && x.Order.IsVoidInvoice && x.Order.CreditNoteReason != null||x.Order.InvoiceDate==null))
        {
            <Button Type="@ButtonType.Button" disabled Class="ms-1 btn btn-sm btn-primary">
                <i class="fa fa-print"></i>
                @L["IssueCreditNote"]
            </Button>
        }
        else
        {
            <Button Type="@ButtonType.Button" Clicked="() => OpenCreditReasonModal()" Class="ms-1 btn btn-sm btn-primary">
                <i class="fa fa-print"></i>
                @L["IssueCreditNote"]
            </Button>
        }

        @if (OrderTransactions.Where(x => x.IsSelected).Count() != 1 || OrderTransactions.Any(x => x.IsSelected && x.Order != null && (x.Order.IsVoidInvoice || x.Order.InvoiceDate==null)))
        {
            <Button Type="@ButtonType.Button" disabled Class="ms-1 btn btn-sm btn-primary">
                <i class="fa fa-print"></i>
                @L["VoidInvoice"]
            </Button>
        }
        else
        {
            <Button Type="@ButtonType.Button" Clicked="() => OpenVoidReasonModal()" Class="ms-1 btn btn-sm btn-primary">
                <i class="fa fa-print"></i>
                @L["VoidInvoice"]
            </Button>
        }
        <Button Type="ButtonType.Button" Class="btn btn-sm btn-outline-dark" Clicked="DownloadExcel"><i class="fa fa-arrow-down"></i></Button>


    </div>
</div>
<Card>
    <CardBody>
        <Addons>
            <Addon AddonType="AddonType.Body">
                <TextEdit @bind-Text="@Filter" placeholder="@L["Search"]"></TextEdit>
            </Addon>
            <Addon AddonType="AddonType.End">
                <Button Type="ButtonType.Button" Class="btn-primary" Clicked="OnSearch">
                    <i class="fa fa-search"></i>
                </Button>
            </Addon>
        </Addons>
    </CardBody>
</Card>

@if (IsLoading)
{
    <Skeleton Animation="SkeletonAnimation.Pulse">
        <SkeletonTable Rows="5" Columns="8" />
    </Skeleton>
}
@{
    var style = $"display: {(IsLoading ? "none" : "block")};";
}
<div style="@style">
    <Card>
        <CardBody>
            <DataGrid TItem="OrderTransactionDto"
                      Data="OrderTransactions"
                      ReadData="OnDataGridReadAsync"
                      TotalItems="TotalCount"
                      ShowPager="true"
                      PageSize="PageSize"
                      Responsive
                      Hoverable>
                <DataGridColumns>
                    <DataGridCommandColumn />
                    <DataGridColumn Caption="@L["Select"]" Width="30px">
                        <DisplayTemplate>
                            <InputCheckbox class="form-check-input" @bind-Value="@context.IsSelected"></InputCheckbox>
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="OrderTransactionDto"
                                    Field="@nameof(OrderTransactionDto.OrderNo)"
                                    Caption="@L["OrderNo"]">
                        <DisplayTemplate>
                            <Button Class="btn-link hyperlink" Clicked="@(() => NavigationManager.NavigateTo("Orders/OrderDetails/" + context.OrderId))">@context.OrderNo</Button>
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Sortable="false" Caption="@L["LastUpdatedDate"]">
                        <DisplayTemplate>
                            @context.Order?.LastModificationTime?.ToString("dd/MM/yyyy hh:mm:ss tt")
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Sortable="false" Caption="@L["InvoiceIssueStatus"]">
                        <DisplayTemplate>
                            @{
                                var str = context.Order?.IssueStatus.ToString() == "Succeeded"
                                ? context.Order?.IssueStatus.ToString() + " cash flow"
                                : context.Order?.IssueStatus.ToString();
                            }
                            @L[str]
                            @if (context.Order?.IssueStatus == IssueInvoiceStatus.Failed)
                            {
                                <Button Class="btn-white"
                                        Clicked="@((e) => IssueInvoice(context.OrderId))">
                                    <i class="fas fa-rotate" />
                                </Button>
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Sortable="false" Caption="@L["InvoiceNumber"]">
                        <DisplayTemplate>
                            @context.Order?.InvoiceNumber
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(OrderTransactionDto.TransactionType)" Caption="@L["TransactionType"]">
                        <DisplayTemplate>
                            @L[$"Enum:TransactionType.{(int)context.TransactionType}"]
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(OrderTransactionDto.TransactionStatus)" Caption="@L["TransactionStatus"]" TextAlignment="TextAlignment.Center">
                        <DisplayTemplate>
                            @{
                                var color = context.TransactionStatus == TransactionStatus.Pending
                                ? Color.Warning
                                : (context.TransactionStatus == TransactionStatus.Successful ? Color.Success : Color.Danger);
                            }
                            <Badge Color="@color">@L[$"Enum:TransactionStatus.{(int)context.TransactionStatus}"]</Badge>
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(OrderTransactionDto.PaymentChannel)" Caption="@L["PaymentChannel"]">
                        <DisplayTemplate>
                            @if (context.PaymentChannel.HasValue)
                            {
                                @L[$"Enum:PaymentChannel.{(int)context.PaymentChannel}"]
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TextAlignment="TextAlignment.End" Field="@nameof(OrderTransactionDto.Amount)" Caption="@L["CheckoutAmount"]">
                        <DisplayTemplate>
                            <Div Class="text-nowrap">
                                $ @context.Amount.ToString("N2")
                            </Div>
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Sortable="false" Caption="@L["Editor"]">
                        <DisplayTemplate>
                            @context.Order?.VoidUser
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGridColumns>
                <FirstPageButtonTemplate>@L[PikachuResource.FirstPage]</FirstPageButtonTemplate>
                <PreviousPageButtonTemplate>@L[PikachuResource.PrevPage]</PreviousPageButtonTemplate>
                <NextPageButtonTemplate>@L[PikachuResource.NextPage]</NextPageButtonTemplate>
                <LastPageButtonTemplate>@L[PikachuResource.LastPage]</LastPageButtonTemplate>
                 <TotalItemsTemplate>
               @(string.Format(
          L["Range"],
          ((PageIndex) * PageSize) + 1,
          ((PageIndex+1) * PageSize > TotalCount ? TotalCount : (PageIndex+1) * PageSize),
          TotalCount
          ))
            </TotalItemsTemplate>
            </DataGrid>
        </CardBody>
    </Card>
</div>


<Modal @ref="CreateVoidReasonModal">

    <ModalContent IsCentered="true">
        <EditForm Model="@VoidReason" OnValidSubmit="ApplyVoidReasonAsync">
            <ModalHeader>
                <ModalTitle>@L["VoidReason"]</ModalTitle>
                <CloseButton Clicked="CloseVoidReasonModal" />
            </ModalHeader>
            <ModalBody>

                <DataAnnotationsValidator />

                <div class="row my-2">
                    <label class="form-label">@L["VoidReason"]</label>
                    <div class="col-12 mb-2">
                        <InputText class="form-control" @bind-Value="@VoidReason.Reason"></InputText>
                        <ValidationMessage For="@(() => VoidReason.Reason)" />
                    </div>
                </div>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Danger"
                        Clicked="CloseVoidReasonModal">
                    @L["Cancel"]
                </Button>
                <Button Type="ButtonType.Submit" Class="btn btn-primary">
                    <i class="fa fa-check"></i>
                    @L["Save"]
                </Button>
            </ModalFooter>
        </EditForm>
    </ModalContent>
</Modal>

<Modal @ref="CreateCreditNoteReasonModal">

    <ModalContent IsCentered="true">
        <EditForm Model="@CreditReason" OnValidSubmit="ApplyCreditReasonAsync">
            <ModalHeader>
                <ModalTitle>@L["CreditNoteReason"]</ModalTitle>
                <CloseButton Clicked="CloseCreditReasonModal" />
            </ModalHeader>
            <ModalBody>

                <DataAnnotationsValidator />

                <div class="row my-2">
                    <label class="form-label">@L["CreditNoteReason"]</label>
                    <div class="col-12 mb-2">
                        <InputText class="form-control" @bind-Value="@CreditReason.Reason"></InputText>
                        <ValidationMessage For="@(() => CreditReason.Reason)" />
                    </div>
                </div>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Danger"
                        Clicked="CloseCreditReasonModal">
                    @L["Cancel"]
                </Button>
                <Button Type="ButtonType.Submit" Class="btn btn-primary">
                    <i class="fa fa-check"></i>
                    @L["Save"]
                </Button>
            </ModalFooter>
        </EditForm>
    </ModalContent>
</Modal>

<script>
    window.downloadFile = function (data) {
        debugger;
        var blob = new Blob([new Uint8Array(data.byteArray)], { type: data.contentType });
        var url = window.URL.createObjectURL(blob);
        var a = document.createElement('a');
        a.href = url;
        a.download = data.fileName;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
    }
</script>