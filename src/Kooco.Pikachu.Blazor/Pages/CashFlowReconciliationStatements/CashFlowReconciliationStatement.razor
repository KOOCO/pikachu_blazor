@page "/CashFlowManagement/CashFlowReconciliationStatement"
@using Kooco.Pikachu.EnumValues;
@using Kooco.Pikachu.Localization;
@using Kooco.Pikachu.OrderItems;
@using Kooco.Pikachu.Orders;
@using Microsoft.Extensions.Localization;
@using Blazorise;
@using Volo.Abp.AspNetCore.Components.Messages;
@using Blazorise.LoadingIndicator;

@inject IStringLocalizer<PikachuResource> L;
@inject NavigationManager NavigationManager;
@inject IUiMessageService _uiMessageService;
@inject IOrderAppService _orderAppService;
@inject IJSRuntime JSRuntime;
<LoadingIndicator @ref="loading" FullScreen FadeIn>
    <div class="row">
        <div class="col-3">
            <h3>@L["金流對帳表"]</h3>
        </div>
        <div class="col-9 text-lg-end">
            <div class="d-inline-block me-1">
                <div class="input-group">
                    <InputText class="form-control form-control-sm search-bar" @bind-Value="@Filter" placeholder="@L["Search"]"></InputText>
                    <Button Type="ButtonType.Button" Class="btn btn-sm btn-primary" Clicked="OnSearch">
                        <i class="fa fa-search"></i>
                    </Button>
                </div>
                
            </div>
             @if (Orders.Where(x => x.IsSelected).Count() != 1)
            {
                <Dropdown Class="btn btn-md" Disabled>
                 <DropdownToggle Color="Color.Primary">
                     @L["SelectModule"]
                 </DropdownToggle>
                 <DropdownMenu>
                     @foreach (IssueInvoice issueInvoiceDropdownValue in Enum.GetValues(typeof(IssueInvoice)))
                        {
                            <DropdownItem>
                                @L[issueInvoiceDropdownValue.ToString()]
                            </DropdownItem>
                        }
                    </DropdownMenu>
                </Dropdown>
            }
            else
            {
                <Dropdown Class="btn btn-md">
                    <DropdownToggle Color="Color.Primary">
                        @L["SelectModule"]
                    </DropdownToggle>
                    <DropdownMenu>
                        @foreach (IssueInvoice issueInvoiceDropdownValue in Enum.GetValues(typeof(IssueInvoice)))
                        {
                            <DropdownItem>
                                @L[issueInvoiceDropdownValue.ToString()]
                            </DropdownItem>
                        }
                    </DropdownMenu>
                </Dropdown>
            }
            <Button Type="ButtonType.Button" Class="btn btn-sm btn-outline-dark" Clicked="DownloadExcel"><i class="fa fa-arrow-down"></i></Button>
           

        </div>
    </div>
    <Card>
        <CardBody>
            <DataGrid TItem="OrderDto"
                      Data="@Orders"
            @bind-SelectedRow="@SelectedOrder"
                      ReadData="OnDataGridReadAsync"
                      TotalItems="TotalCount"
                      DetailRowTrigger="@((e) => e.Item.OrderItems?.Count > 0 && e.Item.Id == SelectedOrder?.Id)"
                      Responsive
                       ShowPager="true"
                       PageSize="PageSize"
                       RowClicked="ToggleRow"
                       RowDoubleClicked="NavigateToOrderDetails"
                       SortChanged="OnSortChange">
                 <DataGridColumns>
                     <DataGridCommandColumn />
                     <DataGridColumn Caption="@L["Select"]" Width="30px">
                         <DisplayTemplate>
                             <InputCheckbox class="form-check-input" @bind-Value="@context.IsSelected"></InputCheckbox>
                         </DisplayTemplate>
                     </DataGridColumn>
                     <DataGridColumn Field="@nameof(OrderDto.OrderNo)" Caption="@L["OrderNo"]">
                         <DisplayTemplate>
                             @{
                                var isExpanded = ExpandedRows.Contains(context.Id);
                                var chevronClass = isExpanded ? "fa fa-caret-up" : "fa fa-caret-down";
                            }
                            <i class="@chevronClass"></i>
                            @L[context.OrderNo]
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(OrderDto.CreationTime)" Caption="@L["OrderDate"]" />
                    <DataGridColumn Field="@nameof(OrderDto.CustomerName)" Caption="@L["CustomerName"]" />
                    <DataGridColumn Field="@nameof(OrderDto.CustomerEmail)" Caption="@L["Email"]" />
                    <DataGridColumn Field="@nameof(OrderDto.InvoiceStatus)" Caption="@L["InvoiceStatus"]">
                        <DisplayTemplate>
                            @L[context.InvoiceStatus.ToString()]
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(OrderDto.ShippingStatus)" Caption="@L["ShippingStatus"]">
                        <DisplayTemplate>
                            @L[context.ShippingStatus.ToString()]
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(OrderDto.PaymentMethod)" Caption="@L["PaymentMethod"]">
                        <DisplayTemplate>
                            @L[context.PaymentMethod.ToString()]
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TextAlignment="TextAlignment.Center" Field="@nameof(OrderDto.TotalAmount)" Caption="@L["CheckoutAmount"]">
                        <DisplayTemplate>
                            $ @context.TotalAmount.ToString("N2")
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGridColumns>
                <DetailRowTemplate>
                    @{
                        var orderItems = (context as OrderDto).OrderItems;
                        <div class="mx-2 px-3 py-2 border">
                            <table>
                                <tbody>
                                    <tr>
                                        <td>@L["RecipientInformation"]</td>
                                        <td>@context.CustomerName / @context.CustomerPhone</td>
                                    </tr>
                                    <tr>
                                        <td>@L["ShippingMethod"]</td>
                                        <td>@L[context.DeliveryMethod.ToString()]</td>
                                    </tr>
                                    <tr>
                                        <td>@L["Address"]</td>
                                        <td class="d-none">@context.AddressDetails, @context.Road, @context.District, @context.City</td>
                                        <td>@context.AddressDetails</td>
                                    </tr>
                                    <tr>
                                        <td>@L["Remarks"]</td>
                                        <td>@context.Remarks</td>
                                    </tr>
                                    <tr>
                                        <td>@L["MerchantRemarks"]</td>
                                        <td>@context.Remarks</td>
                                    </tr>
                                    <tr>
                                        <td>@L["OrderItems"]</td>
                                        <td>
                                            @foreach (var item in orderItems)
                                            {
                                                @if (item.ItemType == ItemType.Item)
                                                {
                                                    <div mb-1>
                                                        <span>@item.Spec</span>
                                                        <span>@item.Item?.ItemName x @item.Quantity</span>
                                                    </div>
                                                }
                                                @if (item.ItemType == ItemType.SetItem)
                                                {
                                                    <div mb-1>
                                                        <span>@item.Spec</span>
                                                        <span>@item.SetItem?.SetItemName x @item.Quantity</span>
                                                    </div>
                                                }
                                                @if (item.ItemType == ItemType.Freebie)
                                                {
                                                    <div mb-1>
                                                        <span>@item.Spec</span>
                                                        <span>@item.Freebie?.ItemName x @item.Quantity</span>
                                                    </div>
                                                }
                                            }
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    }
                </DetailRowTemplate>
            </DataGrid>
        </CardBody>
    </Card>
</LoadingIndicator>
@code {

}
<script>
    window.downloadFile = function (data) {
        debugger;
        var blob = new Blob([new Uint8Array(data.byteArray)], { type: data.contentType });
        var url = window.URL.createObjectURL(blob);
        var a = document.createElement('a');
        a.href = url;
        a.download = data.fileName;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
    }
</script>